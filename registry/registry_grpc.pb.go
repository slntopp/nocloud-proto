// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: registry/registry.proto

package registry

import (
	context "context"
	accounts "github.com/slntopp/nocloud-proto/registry/accounts"
	namespaces "github.com/slntopp/nocloud-proto/registry/namespaces"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountsServiceClient is the client API for AccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsServiceClient interface {
	Token(ctx context.Context, in *accounts.TokenRequest, opts ...grpc.CallOption) (*accounts.TokenResponse, error)
	SetCredentials(ctx context.Context, in *accounts.SetCredentialsRequest, opts ...grpc.CallOption) (*accounts.SetCredentialsResponse, error)
	Create(ctx context.Context, in *accounts.CreateRequest, opts ...grpc.CallOption) (*accounts.CreateResponse, error)
	Update(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*accounts.UpdateResponse, error)
	Get(ctx context.Context, in *accounts.GetRequest, opts ...grpc.CallOption) (*accounts.Account, error)
	List(ctx context.Context, in *accounts.ListRequest, opts ...grpc.CallOption) (*accounts.ListResponse, error)
	Delete(ctx context.Context, in *accounts.DeleteRequest, opts ...grpc.CallOption) (*accounts.DeleteResponse, error)
	Suspend(ctx context.Context, in *accounts.SuspendRequest, opts ...grpc.CallOption) (*accounts.SuspendResponse, error)
	Unsuspend(ctx context.Context, in *accounts.UnsuspendRequest, opts ...grpc.CallOption) (*accounts.UnsuspendResponse, error)
}

type accountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsServiceClient(cc grpc.ClientConnInterface) AccountsServiceClient {
	return &accountsServiceClient{cc}
}

func (c *accountsServiceClient) Token(ctx context.Context, in *accounts.TokenRequest, opts ...grpc.CallOption) (*accounts.TokenResponse, error) {
	out := new(accounts.TokenResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) SetCredentials(ctx context.Context, in *accounts.SetCredentialsRequest, opts ...grpc.CallOption) (*accounts.SetCredentialsResponse, error) {
	out := new(accounts.SetCredentialsResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/SetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Create(ctx context.Context, in *accounts.CreateRequest, opts ...grpc.CallOption) (*accounts.CreateResponse, error) {
	out := new(accounts.CreateResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Update(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*accounts.UpdateResponse, error) {
	out := new(accounts.UpdateResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Get(ctx context.Context, in *accounts.GetRequest, opts ...grpc.CallOption) (*accounts.Account, error) {
	out := new(accounts.Account)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) List(ctx context.Context, in *accounts.ListRequest, opts ...grpc.CallOption) (*accounts.ListResponse, error) {
	out := new(accounts.ListResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Delete(ctx context.Context, in *accounts.DeleteRequest, opts ...grpc.CallOption) (*accounts.DeleteResponse, error) {
	out := new(accounts.DeleteResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Suspend(ctx context.Context, in *accounts.SuspendRequest, opts ...grpc.CallOption) (*accounts.SuspendResponse, error) {
	out := new(accounts.SuspendResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Suspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Unsuspend(ctx context.Context, in *accounts.UnsuspendRequest, opts ...grpc.CallOption) (*accounts.UnsuspendResponse, error) {
	out := new(accounts.UnsuspendResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.AccountsService/Unsuspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServiceServer is the server API for AccountsService service.
// All implementations must embed UnimplementedAccountsServiceServer
// for forward compatibility
type AccountsServiceServer interface {
	Token(context.Context, *accounts.TokenRequest) (*accounts.TokenResponse, error)
	SetCredentials(context.Context, *accounts.SetCredentialsRequest) (*accounts.SetCredentialsResponse, error)
	Create(context.Context, *accounts.CreateRequest) (*accounts.CreateResponse, error)
	Update(context.Context, *accounts.Account) (*accounts.UpdateResponse, error)
	Get(context.Context, *accounts.GetRequest) (*accounts.Account, error)
	List(context.Context, *accounts.ListRequest) (*accounts.ListResponse, error)
	Delete(context.Context, *accounts.DeleteRequest) (*accounts.DeleteResponse, error)
	Suspend(context.Context, *accounts.SuspendRequest) (*accounts.SuspendResponse, error)
	Unsuspend(context.Context, *accounts.UnsuspendRequest) (*accounts.UnsuspendResponse, error)
	mustEmbedUnimplementedAccountsServiceServer()
}

// UnimplementedAccountsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServiceServer struct {
}

func (UnimplementedAccountsServiceServer) Token(context.Context, *accounts.TokenRequest) (*accounts.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAccountsServiceServer) SetCredentials(context.Context, *accounts.SetCredentialsRequest) (*accounts.SetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentials not implemented")
}
func (UnimplementedAccountsServiceServer) Create(context.Context, *accounts.CreateRequest) (*accounts.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountsServiceServer) Update(context.Context, *accounts.Account) (*accounts.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountsServiceServer) Get(context.Context, *accounts.GetRequest) (*accounts.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccountsServiceServer) List(context.Context, *accounts.ListRequest) (*accounts.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountsServiceServer) Delete(context.Context, *accounts.DeleteRequest) (*accounts.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountsServiceServer) Suspend(context.Context, *accounts.SuspendRequest) (*accounts.SuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (UnimplementedAccountsServiceServer) Unsuspend(context.Context, *accounts.UnsuspendRequest) (*accounts.UnsuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsuspend not implemented")
}
func (UnimplementedAccountsServiceServer) mustEmbedUnimplementedAccountsServiceServer() {}

// UnsafeAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServiceServer will
// result in compilation errors.
type UnsafeAccountsServiceServer interface {
	mustEmbedUnimplementedAccountsServiceServer()
}

func RegisterAccountsServiceServer(s grpc.ServiceRegistrar, srv AccountsServiceServer) {
	s.RegisterService(&AccountsService_ServiceDesc, srv)
}

func _AccountsService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Token(ctx, req.(*accounts.TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_SetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.SetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).SetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/SetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).SetCredentials(ctx, req.(*accounts.SetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Create(ctx, req.(*accounts.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Update(ctx, req.(*accounts.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Get(ctx, req.(*accounts.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).List(ctx, req.(*accounts.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Delete(ctx, req.(*accounts.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Suspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.SuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Suspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Suspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Suspend(ctx, req.(*accounts.SuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Unsuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.UnsuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Unsuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.AccountsService/Unsuspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Unsuspend(ctx, req.(*accounts.UnsuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsService_ServiceDesc is the grpc.ServiceDesc for AccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.registry.AccountsService",
	HandlerType: (*AccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _AccountsService_Token_Handler,
		},
		{
			MethodName: "SetCredentials",
			Handler:    _AccountsService_SetCredentials_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AccountsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountsService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountsService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountsService_Delete_Handler,
		},
		{
			MethodName: "Suspend",
			Handler:    _AccountsService_Suspend_Handler,
		},
		{
			MethodName: "Unsuspend",
			Handler:    _AccountsService_Unsuspend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/registry.proto",
}

// NamespacesServiceClient is the client API for NamespacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespacesServiceClient interface {
	Create(ctx context.Context, in *namespaces.CreateRequest, opts ...grpc.CallOption) (*namespaces.CreateResponse, error)
	List(ctx context.Context, in *namespaces.ListRequest, opts ...grpc.CallOption) (*namespaces.ListResponse, error)
	Join(ctx context.Context, in *namespaces.JoinRequest, opts ...grpc.CallOption) (*namespaces.JoinResponse, error)
	Link(ctx context.Context, in *namespaces.LinkRequest, opts ...grpc.CallOption) (*namespaces.LinkResponse, error)
	Delete(ctx context.Context, in *namespaces.DeleteRequest, opts ...grpc.CallOption) (*namespaces.DeleteResponse, error)
}

type namespacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespacesServiceClient(cc grpc.ClientConnInterface) NamespacesServiceClient {
	return &namespacesServiceClient{cc}
}

func (c *namespacesServiceClient) Create(ctx context.Context, in *namespaces.CreateRequest, opts ...grpc.CallOption) (*namespaces.CreateResponse, error) {
	out := new(namespaces.CreateResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.NamespacesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) List(ctx context.Context, in *namespaces.ListRequest, opts ...grpc.CallOption) (*namespaces.ListResponse, error) {
	out := new(namespaces.ListResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.NamespacesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) Join(ctx context.Context, in *namespaces.JoinRequest, opts ...grpc.CallOption) (*namespaces.JoinResponse, error) {
	out := new(namespaces.JoinResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.NamespacesService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) Link(ctx context.Context, in *namespaces.LinkRequest, opts ...grpc.CallOption) (*namespaces.LinkResponse, error) {
	out := new(namespaces.LinkResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.NamespacesService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) Delete(ctx context.Context, in *namespaces.DeleteRequest, opts ...grpc.CallOption) (*namespaces.DeleteResponse, error) {
	out := new(namespaces.DeleteResponse)
	err := c.cc.Invoke(ctx, "/nocloud.registry.NamespacesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespacesServiceServer is the server API for NamespacesService service.
// All implementations must embed UnimplementedNamespacesServiceServer
// for forward compatibility
type NamespacesServiceServer interface {
	Create(context.Context, *namespaces.CreateRequest) (*namespaces.CreateResponse, error)
	List(context.Context, *namespaces.ListRequest) (*namespaces.ListResponse, error)
	Join(context.Context, *namespaces.JoinRequest) (*namespaces.JoinResponse, error)
	Link(context.Context, *namespaces.LinkRequest) (*namespaces.LinkResponse, error)
	Delete(context.Context, *namespaces.DeleteRequest) (*namespaces.DeleteResponse, error)
	mustEmbedUnimplementedNamespacesServiceServer()
}

// UnimplementedNamespacesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespacesServiceServer struct {
}

func (UnimplementedNamespacesServiceServer) Create(context.Context, *namespaces.CreateRequest) (*namespaces.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNamespacesServiceServer) List(context.Context, *namespaces.ListRequest) (*namespaces.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNamespacesServiceServer) Join(context.Context, *namespaces.JoinRequest) (*namespaces.JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedNamespacesServiceServer) Link(context.Context, *namespaces.LinkRequest) (*namespaces.LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedNamespacesServiceServer) Delete(context.Context, *namespaces.DeleteRequest) (*namespaces.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNamespacesServiceServer) mustEmbedUnimplementedNamespacesServiceServer() {}

// UnsafeNamespacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespacesServiceServer will
// result in compilation errors.
type UnsafeNamespacesServiceServer interface {
	mustEmbedUnimplementedNamespacesServiceServer()
}

func RegisterNamespacesServiceServer(s grpc.ServiceRegistrar, srv NamespacesServiceServer) {
	s.RegisterService(&NamespacesService_ServiceDesc, srv)
}

func _NamespacesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.NamespacesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Create(ctx, req.(*namespaces.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.NamespacesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).List(ctx, req.(*namespaces.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.NamespacesService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Join(ctx, req.(*namespaces.JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.NamespacesService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Link(ctx, req.(*namespaces.LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.registry.NamespacesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Delete(ctx, req.(*namespaces.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespacesService_ServiceDesc is the grpc.ServiceDesc for NamespacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.registry.NamespacesService",
	HandlerType: (*NamespacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NamespacesService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NamespacesService_List_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _NamespacesService_Join_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _NamespacesService_Link_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NamespacesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/registry.proto",
}
