//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry/registry.proto

package registryconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	notes "github.com/slntopp/nocloud-proto/notes"
	registry "github.com/slntopp/nocloud-proto/registry"
	accounts "github.com/slntopp/nocloud-proto/registry/accounts"
	namespaces "github.com/slntopp/nocloud-proto/registry/namespaces"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountsServiceName is the fully-qualified name of the AccountsService service.
	AccountsServiceName = "nocloud.registry.AccountsService"
	// NamespacesServiceName is the fully-qualified name of the NamespacesService service.
	NamespacesServiceName = "nocloud.registry.NamespacesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountsServiceTokenProcedure is the fully-qualified name of the AccountsService's Token RPC.
	AccountsServiceTokenProcedure = "/nocloud.registry.AccountsService/Token"
	// AccountsServiceSetCredentialsProcedure is the fully-qualified name of the AccountsService's
	// SetCredentials RPC.
	AccountsServiceSetCredentialsProcedure = "/nocloud.registry.AccountsService/SetCredentials"
	// AccountsServiceAddNoteProcedure is the fully-qualified name of the AccountsService's AddNote RPC.
	AccountsServiceAddNoteProcedure = "/nocloud.registry.AccountsService/AddNote"
	// AccountsServicePatchNoteProcedure is the fully-qualified name of the AccountsService's PatchNote
	// RPC.
	AccountsServicePatchNoteProcedure = "/nocloud.registry.AccountsService/PatchNote"
	// AccountsServiceRemoveNoteProcedure is the fully-qualified name of the AccountsService's
	// RemoveNote RPC.
	AccountsServiceRemoveNoteProcedure = "/nocloud.registry.AccountsService/RemoveNote"
	// AccountsServiceCreateProcedure is the fully-qualified name of the AccountsService's Create RPC.
	AccountsServiceCreateProcedure = "/nocloud.registry.AccountsService/Create"
	// AccountsServiceSignUpProcedure is the fully-qualified name of the AccountsService's SignUp RPC.
	AccountsServiceSignUpProcedure = "/nocloud.registry.AccountsService/SignUp"
	// AccountsServiceUpdateProcedure is the fully-qualified name of the AccountsService's Update RPC.
	AccountsServiceUpdateProcedure = "/nocloud.registry.AccountsService/Update"
	// AccountsServiceGetProcedure is the fully-qualified name of the AccountsService's Get RPC.
	AccountsServiceGetProcedure = "/nocloud.registry.AccountsService/Get"
	// AccountsServiceListProcedure is the fully-qualified name of the AccountsService's List RPC.
	AccountsServiceListProcedure = "/nocloud.registry.AccountsService/List"
	// AccountsServiceDeleteProcedure is the fully-qualified name of the AccountsService's Delete RPC.
	AccountsServiceDeleteProcedure = "/nocloud.registry.AccountsService/Delete"
	// AccountsServiceSuspendProcedure is the fully-qualified name of the AccountsService's Suspend RPC.
	AccountsServiceSuspendProcedure = "/nocloud.registry.AccountsService/Suspend"
	// AccountsServiceUnsuspendProcedure is the fully-qualified name of the AccountsService's Unsuspend
	// RPC.
	AccountsServiceUnsuspendProcedure = "/nocloud.registry.AccountsService/Unsuspend"
	// NamespacesServiceCreateProcedure is the fully-qualified name of the NamespacesService's Create
	// RPC.
	NamespacesServiceCreateProcedure = "/nocloud.registry.NamespacesService/Create"
	// NamespacesServiceListProcedure is the fully-qualified name of the NamespacesService's List RPC.
	NamespacesServiceListProcedure = "/nocloud.registry.NamespacesService/List"
	// NamespacesServiceJoinProcedure is the fully-qualified name of the NamespacesService's Join RPC.
	NamespacesServiceJoinProcedure = "/nocloud.registry.NamespacesService/Join"
	// NamespacesServiceLinkProcedure is the fully-qualified name of the NamespacesService's Link RPC.
	NamespacesServiceLinkProcedure = "/nocloud.registry.NamespacesService/Link"
	// NamespacesServiceDeleteProcedure is the fully-qualified name of the NamespacesService's Delete
	// RPC.
	NamespacesServiceDeleteProcedure = "/nocloud.registry.NamespacesService/Delete"
	// NamespacesServicePatchProcedure is the fully-qualified name of the NamespacesService's Patch RPC.
	NamespacesServicePatchProcedure = "/nocloud.registry.NamespacesService/Patch"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountsServiceServiceDescriptor              = registry.File_registry_registry_proto.Services().ByName("AccountsService")
	accountsServiceTokenMethodDescriptor          = accountsServiceServiceDescriptor.Methods().ByName("Token")
	accountsServiceSetCredentialsMethodDescriptor = accountsServiceServiceDescriptor.Methods().ByName("SetCredentials")
	accountsServiceAddNoteMethodDescriptor        = accountsServiceServiceDescriptor.Methods().ByName("AddNote")
	accountsServicePatchNoteMethodDescriptor      = accountsServiceServiceDescriptor.Methods().ByName("PatchNote")
	accountsServiceRemoveNoteMethodDescriptor     = accountsServiceServiceDescriptor.Methods().ByName("RemoveNote")
	accountsServiceCreateMethodDescriptor         = accountsServiceServiceDescriptor.Methods().ByName("Create")
	accountsServiceSignUpMethodDescriptor         = accountsServiceServiceDescriptor.Methods().ByName("SignUp")
	accountsServiceUpdateMethodDescriptor         = accountsServiceServiceDescriptor.Methods().ByName("Update")
	accountsServiceGetMethodDescriptor            = accountsServiceServiceDescriptor.Methods().ByName("Get")
	accountsServiceListMethodDescriptor           = accountsServiceServiceDescriptor.Methods().ByName("List")
	accountsServiceDeleteMethodDescriptor         = accountsServiceServiceDescriptor.Methods().ByName("Delete")
	accountsServiceSuspendMethodDescriptor        = accountsServiceServiceDescriptor.Methods().ByName("Suspend")
	accountsServiceUnsuspendMethodDescriptor      = accountsServiceServiceDescriptor.Methods().ByName("Unsuspend")
	namespacesServiceServiceDescriptor            = registry.File_registry_registry_proto.Services().ByName("NamespacesService")
	namespacesServiceCreateMethodDescriptor       = namespacesServiceServiceDescriptor.Methods().ByName("Create")
	namespacesServiceListMethodDescriptor         = namespacesServiceServiceDescriptor.Methods().ByName("List")
	namespacesServiceJoinMethodDescriptor         = namespacesServiceServiceDescriptor.Methods().ByName("Join")
	namespacesServiceLinkMethodDescriptor         = namespacesServiceServiceDescriptor.Methods().ByName("Link")
	namespacesServiceDeleteMethodDescriptor       = namespacesServiceServiceDescriptor.Methods().ByName("Delete")
	namespacesServicePatchMethodDescriptor        = namespacesServiceServiceDescriptor.Methods().ByName("Patch")
)

// AccountsServiceClient is a client for the nocloud.registry.AccountsService service.
type AccountsServiceClient interface {
	Token(context.Context, *connect.Request[accounts.TokenRequest]) (*connect.Response[accounts.TokenResponse], error)
	SetCredentials(context.Context, *connect.Request[accounts.SetCredentialsRequest]) (*connect.Response[accounts.SetCredentialsResponse], error)
	AddNote(context.Context, *connect.Request[notes.AddNoteRequest]) (*connect.Response[notes.NoteResponse], error)
	PatchNote(context.Context, *connect.Request[notes.PatchNoteRequest]) (*connect.Response[notes.NoteResponse], error)
	RemoveNote(context.Context, *connect.Request[notes.RemoveNoteRequest]) (*connect.Response[notes.NoteResponse], error)
	Create(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error)
	SignUp(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error)
	Update(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.UpdateResponse], error)
	Get(context.Context, *connect.Request[accounts.GetRequest]) (*connect.Response[accounts.Account], error)
	List(context.Context, *connect.Request[accounts.ListRequest]) (*connect.Response[accounts.ListResponse], error)
	Delete(context.Context, *connect.Request[accounts.DeleteRequest]) (*connect.Response[accounts.DeleteResponse], error)
	Suspend(context.Context, *connect.Request[accounts.SuspendRequest]) (*connect.Response[accounts.SuspendResponse], error)
	Unsuspend(context.Context, *connect.Request[accounts.UnsuspendRequest]) (*connect.Response[accounts.UnsuspendResponse], error)
}

// NewAccountsServiceClient constructs a client for the nocloud.registry.AccountsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountsServiceClient{
		token: connect.NewClient[accounts.TokenRequest, accounts.TokenResponse](
			httpClient,
			baseURL+AccountsServiceTokenProcedure,
			connect.WithSchema(accountsServiceTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setCredentials: connect.NewClient[accounts.SetCredentialsRequest, accounts.SetCredentialsResponse](
			httpClient,
			baseURL+AccountsServiceSetCredentialsProcedure,
			connect.WithSchema(accountsServiceSetCredentialsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addNote: connect.NewClient[notes.AddNoteRequest, notes.NoteResponse](
			httpClient,
			baseURL+AccountsServiceAddNoteProcedure,
			connect.WithSchema(accountsServiceAddNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchNote: connect.NewClient[notes.PatchNoteRequest, notes.NoteResponse](
			httpClient,
			baseURL+AccountsServicePatchNoteProcedure,
			connect.WithSchema(accountsServicePatchNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeNote: connect.NewClient[notes.RemoveNoteRequest, notes.NoteResponse](
			httpClient,
			baseURL+AccountsServiceRemoveNoteProcedure,
			connect.WithSchema(accountsServiceRemoveNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[accounts.CreateRequest, accounts.CreateResponse](
			httpClient,
			baseURL+AccountsServiceCreateProcedure,
			connect.WithSchema(accountsServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signUp: connect.NewClient[accounts.CreateRequest, accounts.CreateResponse](
			httpClient,
			baseURL+AccountsServiceSignUpProcedure,
			connect.WithSchema(accountsServiceSignUpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[accounts.Account, accounts.UpdateResponse](
			httpClient,
			baseURL+AccountsServiceUpdateProcedure,
			connect.WithSchema(accountsServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[accounts.GetRequest, accounts.Account](
			httpClient,
			baseURL+AccountsServiceGetProcedure,
			connect.WithSchema(accountsServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[accounts.ListRequest, accounts.ListResponse](
			httpClient,
			baseURL+AccountsServiceListProcedure,
			connect.WithSchema(accountsServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[accounts.DeleteRequest, accounts.DeleteResponse](
			httpClient,
			baseURL+AccountsServiceDeleteProcedure,
			connect.WithSchema(accountsServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		suspend: connect.NewClient[accounts.SuspendRequest, accounts.SuspendResponse](
			httpClient,
			baseURL+AccountsServiceSuspendProcedure,
			connect.WithSchema(accountsServiceSuspendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unsuspend: connect.NewClient[accounts.UnsuspendRequest, accounts.UnsuspendResponse](
			httpClient,
			baseURL+AccountsServiceUnsuspendProcedure,
			connect.WithSchema(accountsServiceUnsuspendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountsServiceClient implements AccountsServiceClient.
type accountsServiceClient struct {
	token          *connect.Client[accounts.TokenRequest, accounts.TokenResponse]
	setCredentials *connect.Client[accounts.SetCredentialsRequest, accounts.SetCredentialsResponse]
	addNote        *connect.Client[notes.AddNoteRequest, notes.NoteResponse]
	patchNote      *connect.Client[notes.PatchNoteRequest, notes.NoteResponse]
	removeNote     *connect.Client[notes.RemoveNoteRequest, notes.NoteResponse]
	create         *connect.Client[accounts.CreateRequest, accounts.CreateResponse]
	signUp         *connect.Client[accounts.CreateRequest, accounts.CreateResponse]
	update         *connect.Client[accounts.Account, accounts.UpdateResponse]
	get            *connect.Client[accounts.GetRequest, accounts.Account]
	list           *connect.Client[accounts.ListRequest, accounts.ListResponse]
	delete         *connect.Client[accounts.DeleteRequest, accounts.DeleteResponse]
	suspend        *connect.Client[accounts.SuspendRequest, accounts.SuspendResponse]
	unsuspend      *connect.Client[accounts.UnsuspendRequest, accounts.UnsuspendResponse]
}

// Token calls nocloud.registry.AccountsService.Token.
func (c *accountsServiceClient) Token(ctx context.Context, req *connect.Request[accounts.TokenRequest]) (*connect.Response[accounts.TokenResponse], error) {
	return c.token.CallUnary(ctx, req)
}

// SetCredentials calls nocloud.registry.AccountsService.SetCredentials.
func (c *accountsServiceClient) SetCredentials(ctx context.Context, req *connect.Request[accounts.SetCredentialsRequest]) (*connect.Response[accounts.SetCredentialsResponse], error) {
	return c.setCredentials.CallUnary(ctx, req)
}

// AddNote calls nocloud.registry.AccountsService.AddNote.
func (c *accountsServiceClient) AddNote(ctx context.Context, req *connect.Request[notes.AddNoteRequest]) (*connect.Response[notes.NoteResponse], error) {
	return c.addNote.CallUnary(ctx, req)
}

// PatchNote calls nocloud.registry.AccountsService.PatchNote.
func (c *accountsServiceClient) PatchNote(ctx context.Context, req *connect.Request[notes.PatchNoteRequest]) (*connect.Response[notes.NoteResponse], error) {
	return c.patchNote.CallUnary(ctx, req)
}

// RemoveNote calls nocloud.registry.AccountsService.RemoveNote.
func (c *accountsServiceClient) RemoveNote(ctx context.Context, req *connect.Request[notes.RemoveNoteRequest]) (*connect.Response[notes.NoteResponse], error) {
	return c.removeNote.CallUnary(ctx, req)
}

// Create calls nocloud.registry.AccountsService.Create.
func (c *accountsServiceClient) Create(ctx context.Context, req *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// SignUp calls nocloud.registry.AccountsService.SignUp.
func (c *accountsServiceClient) SignUp(ctx context.Context, req *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// Update calls nocloud.registry.AccountsService.Update.
func (c *accountsServiceClient) Update(ctx context.Context, req *connect.Request[accounts.Account]) (*connect.Response[accounts.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls nocloud.registry.AccountsService.Get.
func (c *accountsServiceClient) Get(ctx context.Context, req *connect.Request[accounts.GetRequest]) (*connect.Response[accounts.Account], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls nocloud.registry.AccountsService.List.
func (c *accountsServiceClient) List(ctx context.Context, req *connect.Request[accounts.ListRequest]) (*connect.Response[accounts.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls nocloud.registry.AccountsService.Delete.
func (c *accountsServiceClient) Delete(ctx context.Context, req *connect.Request[accounts.DeleteRequest]) (*connect.Response[accounts.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Suspend calls nocloud.registry.AccountsService.Suspend.
func (c *accountsServiceClient) Suspend(ctx context.Context, req *connect.Request[accounts.SuspendRequest]) (*connect.Response[accounts.SuspendResponse], error) {
	return c.suspend.CallUnary(ctx, req)
}

// Unsuspend calls nocloud.registry.AccountsService.Unsuspend.
func (c *accountsServiceClient) Unsuspend(ctx context.Context, req *connect.Request[accounts.UnsuspendRequest]) (*connect.Response[accounts.UnsuspendResponse], error) {
	return c.unsuspend.CallUnary(ctx, req)
}

// AccountsServiceHandler is an implementation of the nocloud.registry.AccountsService service.
type AccountsServiceHandler interface {
	Token(context.Context, *connect.Request[accounts.TokenRequest]) (*connect.Response[accounts.TokenResponse], error)
	SetCredentials(context.Context, *connect.Request[accounts.SetCredentialsRequest]) (*connect.Response[accounts.SetCredentialsResponse], error)
	AddNote(context.Context, *connect.Request[notes.AddNoteRequest]) (*connect.Response[notes.NoteResponse], error)
	PatchNote(context.Context, *connect.Request[notes.PatchNoteRequest]) (*connect.Response[notes.NoteResponse], error)
	RemoveNote(context.Context, *connect.Request[notes.RemoveNoteRequest]) (*connect.Response[notes.NoteResponse], error)
	Create(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error)
	SignUp(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error)
	Update(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.UpdateResponse], error)
	Get(context.Context, *connect.Request[accounts.GetRequest]) (*connect.Response[accounts.Account], error)
	List(context.Context, *connect.Request[accounts.ListRequest]) (*connect.Response[accounts.ListResponse], error)
	Delete(context.Context, *connect.Request[accounts.DeleteRequest]) (*connect.Response[accounts.DeleteResponse], error)
	Suspend(context.Context, *connect.Request[accounts.SuspendRequest]) (*connect.Response[accounts.SuspendResponse], error)
	Unsuspend(context.Context, *connect.Request[accounts.UnsuspendRequest]) (*connect.Response[accounts.UnsuspendResponse], error)
}

// NewAccountsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountsServiceHandler(svc AccountsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountsServiceTokenHandler := connect.NewUnaryHandler(
		AccountsServiceTokenProcedure,
		svc.Token,
		connect.WithSchema(accountsServiceTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceSetCredentialsHandler := connect.NewUnaryHandler(
		AccountsServiceSetCredentialsProcedure,
		svc.SetCredentials,
		connect.WithSchema(accountsServiceSetCredentialsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceAddNoteHandler := connect.NewUnaryHandler(
		AccountsServiceAddNoteProcedure,
		svc.AddNote,
		connect.WithSchema(accountsServiceAddNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServicePatchNoteHandler := connect.NewUnaryHandler(
		AccountsServicePatchNoteProcedure,
		svc.PatchNote,
		connect.WithSchema(accountsServicePatchNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceRemoveNoteHandler := connect.NewUnaryHandler(
		AccountsServiceRemoveNoteProcedure,
		svc.RemoveNote,
		connect.WithSchema(accountsServiceRemoveNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceCreateHandler := connect.NewUnaryHandler(
		AccountsServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(accountsServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceSignUpHandler := connect.NewUnaryHandler(
		AccountsServiceSignUpProcedure,
		svc.SignUp,
		connect.WithSchema(accountsServiceSignUpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceUpdateHandler := connect.NewUnaryHandler(
		AccountsServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(accountsServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceGetHandler := connect.NewUnaryHandler(
		AccountsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(accountsServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceListHandler := connect.NewUnaryHandler(
		AccountsServiceListProcedure,
		svc.List,
		connect.WithSchema(accountsServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceDeleteHandler := connect.NewUnaryHandler(
		AccountsServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(accountsServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceSuspendHandler := connect.NewUnaryHandler(
		AccountsServiceSuspendProcedure,
		svc.Suspend,
		connect.WithSchema(accountsServiceSuspendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceUnsuspendHandler := connect.NewUnaryHandler(
		AccountsServiceUnsuspendProcedure,
		svc.Unsuspend,
		connect.WithSchema(accountsServiceUnsuspendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.registry.AccountsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountsServiceTokenProcedure:
			accountsServiceTokenHandler.ServeHTTP(w, r)
		case AccountsServiceSetCredentialsProcedure:
			accountsServiceSetCredentialsHandler.ServeHTTP(w, r)
		case AccountsServiceAddNoteProcedure:
			accountsServiceAddNoteHandler.ServeHTTP(w, r)
		case AccountsServicePatchNoteProcedure:
			accountsServicePatchNoteHandler.ServeHTTP(w, r)
		case AccountsServiceRemoveNoteProcedure:
			accountsServiceRemoveNoteHandler.ServeHTTP(w, r)
		case AccountsServiceCreateProcedure:
			accountsServiceCreateHandler.ServeHTTP(w, r)
		case AccountsServiceSignUpProcedure:
			accountsServiceSignUpHandler.ServeHTTP(w, r)
		case AccountsServiceUpdateProcedure:
			accountsServiceUpdateHandler.ServeHTTP(w, r)
		case AccountsServiceGetProcedure:
			accountsServiceGetHandler.ServeHTTP(w, r)
		case AccountsServiceListProcedure:
			accountsServiceListHandler.ServeHTTP(w, r)
		case AccountsServiceDeleteProcedure:
			accountsServiceDeleteHandler.ServeHTTP(w, r)
		case AccountsServiceSuspendProcedure:
			accountsServiceSuspendHandler.ServeHTTP(w, r)
		case AccountsServiceUnsuspendProcedure:
			accountsServiceUnsuspendHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountsServiceHandler struct{}

func (UnimplementedAccountsServiceHandler) Token(context.Context, *connect.Request[accounts.TokenRequest]) (*connect.Response[accounts.TokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Token is not implemented"))
}

func (UnimplementedAccountsServiceHandler) SetCredentials(context.Context, *connect.Request[accounts.SetCredentialsRequest]) (*connect.Response[accounts.SetCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.SetCredentials is not implemented"))
}

func (UnimplementedAccountsServiceHandler) AddNote(context.Context, *connect.Request[notes.AddNoteRequest]) (*connect.Response[notes.NoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.AddNote is not implemented"))
}

func (UnimplementedAccountsServiceHandler) PatchNote(context.Context, *connect.Request[notes.PatchNoteRequest]) (*connect.Response[notes.NoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.PatchNote is not implemented"))
}

func (UnimplementedAccountsServiceHandler) RemoveNote(context.Context, *connect.Request[notes.RemoveNoteRequest]) (*connect.Response[notes.NoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.RemoveNote is not implemented"))
}

func (UnimplementedAccountsServiceHandler) Create(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Create is not implemented"))
}

func (UnimplementedAccountsServiceHandler) SignUp(context.Context, *connect.Request[accounts.CreateRequest]) (*connect.Response[accounts.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.SignUp is not implemented"))
}

func (UnimplementedAccountsServiceHandler) Update(context.Context, *connect.Request[accounts.Account]) (*connect.Response[accounts.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Update is not implemented"))
}

func (UnimplementedAccountsServiceHandler) Get(context.Context, *connect.Request[accounts.GetRequest]) (*connect.Response[accounts.Account], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Get is not implemented"))
}

func (UnimplementedAccountsServiceHandler) List(context.Context, *connect.Request[accounts.ListRequest]) (*connect.Response[accounts.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.List is not implemented"))
}

func (UnimplementedAccountsServiceHandler) Delete(context.Context, *connect.Request[accounts.DeleteRequest]) (*connect.Response[accounts.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Delete is not implemented"))
}

func (UnimplementedAccountsServiceHandler) Suspend(context.Context, *connect.Request[accounts.SuspendRequest]) (*connect.Response[accounts.SuspendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Suspend is not implemented"))
}

func (UnimplementedAccountsServiceHandler) Unsuspend(context.Context, *connect.Request[accounts.UnsuspendRequest]) (*connect.Response[accounts.UnsuspendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.AccountsService.Unsuspend is not implemented"))
}

// NamespacesServiceClient is a client for the nocloud.registry.NamespacesService service.
type NamespacesServiceClient interface {
	Create(context.Context, *connect.Request[namespaces.CreateRequest]) (*connect.Response[namespaces.CreateResponse], error)
	List(context.Context, *connect.Request[namespaces.ListRequest]) (*connect.Response[namespaces.ListResponse], error)
	Join(context.Context, *connect.Request[namespaces.JoinRequest]) (*connect.Response[namespaces.JoinResponse], error)
	Link(context.Context, *connect.Request[namespaces.LinkRequest]) (*connect.Response[namespaces.LinkResponse], error)
	Delete(context.Context, *connect.Request[namespaces.DeleteRequest]) (*connect.Response[namespaces.DeleteResponse], error)
	Patch(context.Context, *connect.Request[namespaces.PatchRequest]) (*connect.Response[namespaces.PatchResponse], error)
}

// NewNamespacesServiceClient constructs a client for the nocloud.registry.NamespacesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNamespacesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NamespacesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &namespacesServiceClient{
		create: connect.NewClient[namespaces.CreateRequest, namespaces.CreateResponse](
			httpClient,
			baseURL+NamespacesServiceCreateProcedure,
			connect.WithSchema(namespacesServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[namespaces.ListRequest, namespaces.ListResponse](
			httpClient,
			baseURL+NamespacesServiceListProcedure,
			connect.WithSchema(namespacesServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		join: connect.NewClient[namespaces.JoinRequest, namespaces.JoinResponse](
			httpClient,
			baseURL+NamespacesServiceJoinProcedure,
			connect.WithSchema(namespacesServiceJoinMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		link: connect.NewClient[namespaces.LinkRequest, namespaces.LinkResponse](
			httpClient,
			baseURL+NamespacesServiceLinkProcedure,
			connect.WithSchema(namespacesServiceLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[namespaces.DeleteRequest, namespaces.DeleteResponse](
			httpClient,
			baseURL+NamespacesServiceDeleteProcedure,
			connect.WithSchema(namespacesServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patch: connect.NewClient[namespaces.PatchRequest, namespaces.PatchResponse](
			httpClient,
			baseURL+NamespacesServicePatchProcedure,
			connect.WithSchema(namespacesServicePatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// namespacesServiceClient implements NamespacesServiceClient.
type namespacesServiceClient struct {
	create *connect.Client[namespaces.CreateRequest, namespaces.CreateResponse]
	list   *connect.Client[namespaces.ListRequest, namespaces.ListResponse]
	join   *connect.Client[namespaces.JoinRequest, namespaces.JoinResponse]
	link   *connect.Client[namespaces.LinkRequest, namespaces.LinkResponse]
	delete *connect.Client[namespaces.DeleteRequest, namespaces.DeleteResponse]
	patch  *connect.Client[namespaces.PatchRequest, namespaces.PatchResponse]
}

// Create calls nocloud.registry.NamespacesService.Create.
func (c *namespacesServiceClient) Create(ctx context.Context, req *connect.Request[namespaces.CreateRequest]) (*connect.Response[namespaces.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// List calls nocloud.registry.NamespacesService.List.
func (c *namespacesServiceClient) List(ctx context.Context, req *connect.Request[namespaces.ListRequest]) (*connect.Response[namespaces.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Join calls nocloud.registry.NamespacesService.Join.
func (c *namespacesServiceClient) Join(ctx context.Context, req *connect.Request[namespaces.JoinRequest]) (*connect.Response[namespaces.JoinResponse], error) {
	return c.join.CallUnary(ctx, req)
}

// Link calls nocloud.registry.NamespacesService.Link.
func (c *namespacesServiceClient) Link(ctx context.Context, req *connect.Request[namespaces.LinkRequest]) (*connect.Response[namespaces.LinkResponse], error) {
	return c.link.CallUnary(ctx, req)
}

// Delete calls nocloud.registry.NamespacesService.Delete.
func (c *namespacesServiceClient) Delete(ctx context.Context, req *connect.Request[namespaces.DeleteRequest]) (*connect.Response[namespaces.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Patch calls nocloud.registry.NamespacesService.Patch.
func (c *namespacesServiceClient) Patch(ctx context.Context, req *connect.Request[namespaces.PatchRequest]) (*connect.Response[namespaces.PatchResponse], error) {
	return c.patch.CallUnary(ctx, req)
}

// NamespacesServiceHandler is an implementation of the nocloud.registry.NamespacesService service.
type NamespacesServiceHandler interface {
	Create(context.Context, *connect.Request[namespaces.CreateRequest]) (*connect.Response[namespaces.CreateResponse], error)
	List(context.Context, *connect.Request[namespaces.ListRequest]) (*connect.Response[namespaces.ListResponse], error)
	Join(context.Context, *connect.Request[namespaces.JoinRequest]) (*connect.Response[namespaces.JoinResponse], error)
	Link(context.Context, *connect.Request[namespaces.LinkRequest]) (*connect.Response[namespaces.LinkResponse], error)
	Delete(context.Context, *connect.Request[namespaces.DeleteRequest]) (*connect.Response[namespaces.DeleteResponse], error)
	Patch(context.Context, *connect.Request[namespaces.PatchRequest]) (*connect.Response[namespaces.PatchResponse], error)
}

// NewNamespacesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNamespacesServiceHandler(svc NamespacesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	namespacesServiceCreateHandler := connect.NewUnaryHandler(
		NamespacesServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(namespacesServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespacesServiceListHandler := connect.NewUnaryHandler(
		NamespacesServiceListProcedure,
		svc.List,
		connect.WithSchema(namespacesServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespacesServiceJoinHandler := connect.NewUnaryHandler(
		NamespacesServiceJoinProcedure,
		svc.Join,
		connect.WithSchema(namespacesServiceJoinMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespacesServiceLinkHandler := connect.NewUnaryHandler(
		NamespacesServiceLinkProcedure,
		svc.Link,
		connect.WithSchema(namespacesServiceLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespacesServiceDeleteHandler := connect.NewUnaryHandler(
		NamespacesServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(namespacesServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	namespacesServicePatchHandler := connect.NewUnaryHandler(
		NamespacesServicePatchProcedure,
		svc.Patch,
		connect.WithSchema(namespacesServicePatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.registry.NamespacesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NamespacesServiceCreateProcedure:
			namespacesServiceCreateHandler.ServeHTTP(w, r)
		case NamespacesServiceListProcedure:
			namespacesServiceListHandler.ServeHTTP(w, r)
		case NamespacesServiceJoinProcedure:
			namespacesServiceJoinHandler.ServeHTTP(w, r)
		case NamespacesServiceLinkProcedure:
			namespacesServiceLinkHandler.ServeHTTP(w, r)
		case NamespacesServiceDeleteProcedure:
			namespacesServiceDeleteHandler.ServeHTTP(w, r)
		case NamespacesServicePatchProcedure:
			namespacesServicePatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNamespacesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNamespacesServiceHandler struct{}

func (UnimplementedNamespacesServiceHandler) Create(context.Context, *connect.Request[namespaces.CreateRequest]) (*connect.Response[namespaces.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.NamespacesService.Create is not implemented"))
}

func (UnimplementedNamespacesServiceHandler) List(context.Context, *connect.Request[namespaces.ListRequest]) (*connect.Response[namespaces.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.NamespacesService.List is not implemented"))
}

func (UnimplementedNamespacesServiceHandler) Join(context.Context, *connect.Request[namespaces.JoinRequest]) (*connect.Response[namespaces.JoinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.NamespacesService.Join is not implemented"))
}

func (UnimplementedNamespacesServiceHandler) Link(context.Context, *connect.Request[namespaces.LinkRequest]) (*connect.Response[namespaces.LinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.NamespacesService.Link is not implemented"))
}

func (UnimplementedNamespacesServiceHandler) Delete(context.Context, *connect.Request[namespaces.DeleteRequest]) (*connect.Response[namespaces.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.NamespacesService.Delete is not implemented"))
}

func (UnimplementedNamespacesServiceHandler) Patch(context.Context, *connect.Request[namespaces.PatchRequest]) (*connect.Response[namespaces.PatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.registry.NamespacesService.Patch is not implemented"))
}
