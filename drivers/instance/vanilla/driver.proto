/*
Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.instance.driver.vanilla;

import "billing/addons/addons.proto";
import "services/services.proto";
import "instances/instances.proto";
import "services_providers/services_providers.proto";
import "google/protobuf/struct.proto";

message TestServiceProviderConfigRequest {
  nocloud.services_providers.ServicesProvider services_provider = 1;
  bool syntax_only = 2;
}

message GetTypeRequest {}
message GetTypeResponse { string type = 1; }

message UpRequest {
  nocloud.instances.InstancesGroup group = 1;
  nocloud.services_providers.ServicesProvider services_provider = 2;
}

message UpResponse { nocloud.instances.InstancesGroup group = 1; }

message DownRequest {
  nocloud.instances.InstancesGroup group = 1;
  nocloud.services_providers.ServicesProvider services_provider = 2;
}
message DownResponse { nocloud.instances.InstancesGroup group = 1; }

message MonitoringRequest {
  repeated nocloud.instances.InstancesGroup groups = 1;
  nocloud.services_providers.ServicesProvider services_provider = 2;
  bool scheduled = 3;
  map<string, double> balance = 4;
  map<string, nocloud.billing.addons.Addon> addons = 5;
}

message MonitoringResponse {}

message InvokeRequest {
  nocloud.instances.Instance instance = 1;
  nocloud.services_providers.ServicesProvider services_provider = 2;

  string method = 3;
  map<string, google.protobuf.Value> params = 4;
}

message SpInvokeRequest {
  nocloud.services_providers.ServicesProvider services_provider = 1;
  string method = 2;
  map<string, google.protobuf.Value> params = 3;
}

message ExpirationRecord{
  int64 expires = 1;
  string product = 2;
  string resource = 3;
  string addon = 4;
  int64 period = 5;
}

message GetExpirationRequest {
  nocloud.instances.Instance instance = 1;
  nocloud.services_providers.ServicesProvider services_provider = 2;
}

message GetExpirationResponse {
  repeated ExpirationRecord records = 1;
}

service DriverService {
  rpc TestServiceProviderConfig(
      nocloud.instance.driver.vanilla.TestServiceProviderConfigRequest)
      returns (nocloud.services_providers.TestResponse);
  rpc TestInstancesGroupConfig(
      nocloud.instances.TestInstancesGroupConfigRequest)
      returns (nocloud.instances.TestInstancesGroupConfigResponse);
  rpc GetType(nocloud.instance.driver.vanilla.GetTypeRequest)
      returns (nocloud.instance.driver.vanilla.GetTypeResponse);

  rpc Up(nocloud.instance.driver.vanilla.UpRequest)
      returns (nocloud.instance.driver.vanilla.UpResponse);
  rpc Down(nocloud.instance.driver.vanilla.DownRequest)
      returns (nocloud.instance.driver.vanilla.DownResponse);

  rpc Monitoring(MonitoringRequest) returns (MonitoringResponse);
  rpc SuspendMonitoring(MonitoringRequest) returns (MonitoringResponse);

  rpc Invoke(InvokeRequest) returns (nocloud.instances.InvokeResponse);
  rpc SpInvoke(SpInvokeRequest)
      returns (nocloud.services_providers.InvokeResponse);

  rpc SpPrep(nocloud.services_providers.PrepSP)
      returns (nocloud.services_providers.PrepSP);

  rpc GetExpiration(GetExpirationRequest)
      returns (GetExpirationResponse);
}