//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: drivers/instance/vanilla/driver.proto

package vanillaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	vanilla "github.com/slntopp/nocloud-proto/drivers/instance/vanilla"
	instances "github.com/slntopp/nocloud-proto/instances"
	services_providers "github.com/slntopp/nocloud-proto/services_providers"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DriverServiceName is the fully-qualified name of the DriverService service.
	DriverServiceName = "nocloud.instance.driver.vanilla.DriverService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DriverServiceTestServiceProviderConfigProcedure is the fully-qualified name of the
	// DriverService's TestServiceProviderConfig RPC.
	DriverServiceTestServiceProviderConfigProcedure = "/nocloud.instance.driver.vanilla.DriverService/TestServiceProviderConfig"
	// DriverServiceTestInstancesGroupConfigProcedure is the fully-qualified name of the DriverService's
	// TestInstancesGroupConfig RPC.
	DriverServiceTestInstancesGroupConfigProcedure = "/nocloud.instance.driver.vanilla.DriverService/TestInstancesGroupConfig"
	// DriverServiceGetTypeProcedure is the fully-qualified name of the DriverService's GetType RPC.
	DriverServiceGetTypeProcedure = "/nocloud.instance.driver.vanilla.DriverService/GetType"
	// DriverServiceUpProcedure is the fully-qualified name of the DriverService's Up RPC.
	DriverServiceUpProcedure = "/nocloud.instance.driver.vanilla.DriverService/Up"
	// DriverServiceDownProcedure is the fully-qualified name of the DriverService's Down RPC.
	DriverServiceDownProcedure = "/nocloud.instance.driver.vanilla.DriverService/Down"
	// DriverServiceMonitoringProcedure is the fully-qualified name of the DriverService's Monitoring
	// RPC.
	DriverServiceMonitoringProcedure = "/nocloud.instance.driver.vanilla.DriverService/Monitoring"
	// DriverServiceSuspendMonitoringProcedure is the fully-qualified name of the DriverService's
	// SuspendMonitoring RPC.
	DriverServiceSuspendMonitoringProcedure = "/nocloud.instance.driver.vanilla.DriverService/SuspendMonitoring"
	// DriverServiceInvokeProcedure is the fully-qualified name of the DriverService's Invoke RPC.
	DriverServiceInvokeProcedure = "/nocloud.instance.driver.vanilla.DriverService/Invoke"
	// DriverServiceSpInvokeProcedure is the fully-qualified name of the DriverService's SpInvoke RPC.
	DriverServiceSpInvokeProcedure = "/nocloud.instance.driver.vanilla.DriverService/SpInvoke"
	// DriverServiceSpPrepProcedure is the fully-qualified name of the DriverService's SpPrep RPC.
	DriverServiceSpPrepProcedure = "/nocloud.instance.driver.vanilla.DriverService/SpPrep"
	// DriverServiceGetExpirationProcedure is the fully-qualified name of the DriverService's
	// GetExpiration RPC.
	DriverServiceGetExpirationProcedure = "/nocloud.instance.driver.vanilla.DriverService/GetExpiration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	driverServiceServiceDescriptor                         = vanilla.File_drivers_instance_vanilla_driver_proto.Services().ByName("DriverService")
	driverServiceTestServiceProviderConfigMethodDescriptor = driverServiceServiceDescriptor.Methods().ByName("TestServiceProviderConfig")
	driverServiceTestInstancesGroupConfigMethodDescriptor  = driverServiceServiceDescriptor.Methods().ByName("TestInstancesGroupConfig")
	driverServiceGetTypeMethodDescriptor                   = driverServiceServiceDescriptor.Methods().ByName("GetType")
	driverServiceUpMethodDescriptor                        = driverServiceServiceDescriptor.Methods().ByName("Up")
	driverServiceDownMethodDescriptor                      = driverServiceServiceDescriptor.Methods().ByName("Down")
	driverServiceMonitoringMethodDescriptor                = driverServiceServiceDescriptor.Methods().ByName("Monitoring")
	driverServiceSuspendMonitoringMethodDescriptor         = driverServiceServiceDescriptor.Methods().ByName("SuspendMonitoring")
	driverServiceInvokeMethodDescriptor                    = driverServiceServiceDescriptor.Methods().ByName("Invoke")
	driverServiceSpInvokeMethodDescriptor                  = driverServiceServiceDescriptor.Methods().ByName("SpInvoke")
	driverServiceSpPrepMethodDescriptor                    = driverServiceServiceDescriptor.Methods().ByName("SpPrep")
	driverServiceGetExpirationMethodDescriptor             = driverServiceServiceDescriptor.Methods().ByName("GetExpiration")
)

// DriverServiceClient is a client for the nocloud.instance.driver.vanilla.DriverService service.
type DriverServiceClient interface {
	TestServiceProviderConfig(context.Context, *connect.Request[vanilla.TestServiceProviderConfigRequest]) (*connect.Response[services_providers.TestResponse], error)
	TestInstancesGroupConfig(context.Context, *connect.Request[instances.TestInstancesGroupConfigRequest]) (*connect.Response[instances.TestInstancesGroupConfigResponse], error)
	GetType(context.Context, *connect.Request[vanilla.GetTypeRequest]) (*connect.Response[vanilla.GetTypeResponse], error)
	Up(context.Context, *connect.Request[vanilla.UpRequest]) (*connect.Response[vanilla.UpResponse], error)
	Down(context.Context, *connect.Request[vanilla.DownRequest]) (*connect.Response[vanilla.DownResponse], error)
	Monitoring(context.Context, *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error)
	SuspendMonitoring(context.Context, *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error)
	Invoke(context.Context, *connect.Request[vanilla.InvokeRequest]) (*connect.Response[instances.InvokeResponse], error)
	SpInvoke(context.Context, *connect.Request[vanilla.SpInvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error)
	SpPrep(context.Context, *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error)
	GetExpiration(context.Context, *connect.Request[vanilla.GetExpirationRequest]) (*connect.Response[vanilla.GetExpirationResponse], error)
}

// NewDriverServiceClient constructs a client for the nocloud.instance.driver.vanilla.DriverService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDriverServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DriverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &driverServiceClient{
		testServiceProviderConfig: connect.NewClient[vanilla.TestServiceProviderConfigRequest, services_providers.TestResponse](
			httpClient,
			baseURL+DriverServiceTestServiceProviderConfigProcedure,
			connect.WithSchema(driverServiceTestServiceProviderConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		testInstancesGroupConfig: connect.NewClient[instances.TestInstancesGroupConfigRequest, instances.TestInstancesGroupConfigResponse](
			httpClient,
			baseURL+DriverServiceTestInstancesGroupConfigProcedure,
			connect.WithSchema(driverServiceTestInstancesGroupConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getType: connect.NewClient[vanilla.GetTypeRequest, vanilla.GetTypeResponse](
			httpClient,
			baseURL+DriverServiceGetTypeProcedure,
			connect.WithSchema(driverServiceGetTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		up: connect.NewClient[vanilla.UpRequest, vanilla.UpResponse](
			httpClient,
			baseURL+DriverServiceUpProcedure,
			connect.WithSchema(driverServiceUpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		down: connect.NewClient[vanilla.DownRequest, vanilla.DownResponse](
			httpClient,
			baseURL+DriverServiceDownProcedure,
			connect.WithSchema(driverServiceDownMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		monitoring: connect.NewClient[vanilla.MonitoringRequest, vanilla.MonitoringResponse](
			httpClient,
			baseURL+DriverServiceMonitoringProcedure,
			connect.WithSchema(driverServiceMonitoringMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		suspendMonitoring: connect.NewClient[vanilla.MonitoringRequest, vanilla.MonitoringResponse](
			httpClient,
			baseURL+DriverServiceSuspendMonitoringProcedure,
			connect.WithSchema(driverServiceSuspendMonitoringMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		invoke: connect.NewClient[vanilla.InvokeRequest, instances.InvokeResponse](
			httpClient,
			baseURL+DriverServiceInvokeProcedure,
			connect.WithSchema(driverServiceInvokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		spInvoke: connect.NewClient[vanilla.SpInvokeRequest, services_providers.InvokeResponse](
			httpClient,
			baseURL+DriverServiceSpInvokeProcedure,
			connect.WithSchema(driverServiceSpInvokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		spPrep: connect.NewClient[services_providers.PrepSP, services_providers.PrepSP](
			httpClient,
			baseURL+DriverServiceSpPrepProcedure,
			connect.WithSchema(driverServiceSpPrepMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExpiration: connect.NewClient[vanilla.GetExpirationRequest, vanilla.GetExpirationResponse](
			httpClient,
			baseURL+DriverServiceGetExpirationProcedure,
			connect.WithSchema(driverServiceGetExpirationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// driverServiceClient implements DriverServiceClient.
type driverServiceClient struct {
	testServiceProviderConfig *connect.Client[vanilla.TestServiceProviderConfigRequest, services_providers.TestResponse]
	testInstancesGroupConfig  *connect.Client[instances.TestInstancesGroupConfigRequest, instances.TestInstancesGroupConfigResponse]
	getType                   *connect.Client[vanilla.GetTypeRequest, vanilla.GetTypeResponse]
	up                        *connect.Client[vanilla.UpRequest, vanilla.UpResponse]
	down                      *connect.Client[vanilla.DownRequest, vanilla.DownResponse]
	monitoring                *connect.Client[vanilla.MonitoringRequest, vanilla.MonitoringResponse]
	suspendMonitoring         *connect.Client[vanilla.MonitoringRequest, vanilla.MonitoringResponse]
	invoke                    *connect.Client[vanilla.InvokeRequest, instances.InvokeResponse]
	spInvoke                  *connect.Client[vanilla.SpInvokeRequest, services_providers.InvokeResponse]
	spPrep                    *connect.Client[services_providers.PrepSP, services_providers.PrepSP]
	getExpiration             *connect.Client[vanilla.GetExpirationRequest, vanilla.GetExpirationResponse]
}

// TestServiceProviderConfig calls
// nocloud.instance.driver.vanilla.DriverService.TestServiceProviderConfig.
func (c *driverServiceClient) TestServiceProviderConfig(ctx context.Context, req *connect.Request[vanilla.TestServiceProviderConfigRequest]) (*connect.Response[services_providers.TestResponse], error) {
	return c.testServiceProviderConfig.CallUnary(ctx, req)
}

// TestInstancesGroupConfig calls
// nocloud.instance.driver.vanilla.DriverService.TestInstancesGroupConfig.
func (c *driverServiceClient) TestInstancesGroupConfig(ctx context.Context, req *connect.Request[instances.TestInstancesGroupConfigRequest]) (*connect.Response[instances.TestInstancesGroupConfigResponse], error) {
	return c.testInstancesGroupConfig.CallUnary(ctx, req)
}

// GetType calls nocloud.instance.driver.vanilla.DriverService.GetType.
func (c *driverServiceClient) GetType(ctx context.Context, req *connect.Request[vanilla.GetTypeRequest]) (*connect.Response[vanilla.GetTypeResponse], error) {
	return c.getType.CallUnary(ctx, req)
}

// Up calls nocloud.instance.driver.vanilla.DriverService.Up.
func (c *driverServiceClient) Up(ctx context.Context, req *connect.Request[vanilla.UpRequest]) (*connect.Response[vanilla.UpResponse], error) {
	return c.up.CallUnary(ctx, req)
}

// Down calls nocloud.instance.driver.vanilla.DriverService.Down.
func (c *driverServiceClient) Down(ctx context.Context, req *connect.Request[vanilla.DownRequest]) (*connect.Response[vanilla.DownResponse], error) {
	return c.down.CallUnary(ctx, req)
}

// Monitoring calls nocloud.instance.driver.vanilla.DriverService.Monitoring.
func (c *driverServiceClient) Monitoring(ctx context.Context, req *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error) {
	return c.monitoring.CallUnary(ctx, req)
}

// SuspendMonitoring calls nocloud.instance.driver.vanilla.DriverService.SuspendMonitoring.
func (c *driverServiceClient) SuspendMonitoring(ctx context.Context, req *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error) {
	return c.suspendMonitoring.CallUnary(ctx, req)
}

// Invoke calls nocloud.instance.driver.vanilla.DriverService.Invoke.
func (c *driverServiceClient) Invoke(ctx context.Context, req *connect.Request[vanilla.InvokeRequest]) (*connect.Response[instances.InvokeResponse], error) {
	return c.invoke.CallUnary(ctx, req)
}

// SpInvoke calls nocloud.instance.driver.vanilla.DriverService.SpInvoke.
func (c *driverServiceClient) SpInvoke(ctx context.Context, req *connect.Request[vanilla.SpInvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error) {
	return c.spInvoke.CallUnary(ctx, req)
}

// SpPrep calls nocloud.instance.driver.vanilla.DriverService.SpPrep.
func (c *driverServiceClient) SpPrep(ctx context.Context, req *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error) {
	return c.spPrep.CallUnary(ctx, req)
}

// GetExpiration calls nocloud.instance.driver.vanilla.DriverService.GetExpiration.
func (c *driverServiceClient) GetExpiration(ctx context.Context, req *connect.Request[vanilla.GetExpirationRequest]) (*connect.Response[vanilla.GetExpirationResponse], error) {
	return c.getExpiration.CallUnary(ctx, req)
}

// DriverServiceHandler is an implementation of the nocloud.instance.driver.vanilla.DriverService
// service.
type DriverServiceHandler interface {
	TestServiceProviderConfig(context.Context, *connect.Request[vanilla.TestServiceProviderConfigRequest]) (*connect.Response[services_providers.TestResponse], error)
	TestInstancesGroupConfig(context.Context, *connect.Request[instances.TestInstancesGroupConfigRequest]) (*connect.Response[instances.TestInstancesGroupConfigResponse], error)
	GetType(context.Context, *connect.Request[vanilla.GetTypeRequest]) (*connect.Response[vanilla.GetTypeResponse], error)
	Up(context.Context, *connect.Request[vanilla.UpRequest]) (*connect.Response[vanilla.UpResponse], error)
	Down(context.Context, *connect.Request[vanilla.DownRequest]) (*connect.Response[vanilla.DownResponse], error)
	Monitoring(context.Context, *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error)
	SuspendMonitoring(context.Context, *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error)
	Invoke(context.Context, *connect.Request[vanilla.InvokeRequest]) (*connect.Response[instances.InvokeResponse], error)
	SpInvoke(context.Context, *connect.Request[vanilla.SpInvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error)
	SpPrep(context.Context, *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error)
	GetExpiration(context.Context, *connect.Request[vanilla.GetExpirationRequest]) (*connect.Response[vanilla.GetExpirationResponse], error)
}

// NewDriverServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDriverServiceHandler(svc DriverServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	driverServiceTestServiceProviderConfigHandler := connect.NewUnaryHandler(
		DriverServiceTestServiceProviderConfigProcedure,
		svc.TestServiceProviderConfig,
		connect.WithSchema(driverServiceTestServiceProviderConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceTestInstancesGroupConfigHandler := connect.NewUnaryHandler(
		DriverServiceTestInstancesGroupConfigProcedure,
		svc.TestInstancesGroupConfig,
		connect.WithSchema(driverServiceTestInstancesGroupConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceGetTypeHandler := connect.NewUnaryHandler(
		DriverServiceGetTypeProcedure,
		svc.GetType,
		connect.WithSchema(driverServiceGetTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceUpHandler := connect.NewUnaryHandler(
		DriverServiceUpProcedure,
		svc.Up,
		connect.WithSchema(driverServiceUpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceDownHandler := connect.NewUnaryHandler(
		DriverServiceDownProcedure,
		svc.Down,
		connect.WithSchema(driverServiceDownMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceMonitoringHandler := connect.NewUnaryHandler(
		DriverServiceMonitoringProcedure,
		svc.Monitoring,
		connect.WithSchema(driverServiceMonitoringMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceSuspendMonitoringHandler := connect.NewUnaryHandler(
		DriverServiceSuspendMonitoringProcedure,
		svc.SuspendMonitoring,
		connect.WithSchema(driverServiceSuspendMonitoringMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceInvokeHandler := connect.NewUnaryHandler(
		DriverServiceInvokeProcedure,
		svc.Invoke,
		connect.WithSchema(driverServiceInvokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceSpInvokeHandler := connect.NewUnaryHandler(
		DriverServiceSpInvokeProcedure,
		svc.SpInvoke,
		connect.WithSchema(driverServiceSpInvokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceSpPrepHandler := connect.NewUnaryHandler(
		DriverServiceSpPrepProcedure,
		svc.SpPrep,
		connect.WithSchema(driverServiceSpPrepMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverServiceGetExpirationHandler := connect.NewUnaryHandler(
		DriverServiceGetExpirationProcedure,
		svc.GetExpiration,
		connect.WithSchema(driverServiceGetExpirationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.instance.driver.vanilla.DriverService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DriverServiceTestServiceProviderConfigProcedure:
			driverServiceTestServiceProviderConfigHandler.ServeHTTP(w, r)
		case DriverServiceTestInstancesGroupConfigProcedure:
			driverServiceTestInstancesGroupConfigHandler.ServeHTTP(w, r)
		case DriverServiceGetTypeProcedure:
			driverServiceGetTypeHandler.ServeHTTP(w, r)
		case DriverServiceUpProcedure:
			driverServiceUpHandler.ServeHTTP(w, r)
		case DriverServiceDownProcedure:
			driverServiceDownHandler.ServeHTTP(w, r)
		case DriverServiceMonitoringProcedure:
			driverServiceMonitoringHandler.ServeHTTP(w, r)
		case DriverServiceSuspendMonitoringProcedure:
			driverServiceSuspendMonitoringHandler.ServeHTTP(w, r)
		case DriverServiceInvokeProcedure:
			driverServiceInvokeHandler.ServeHTTP(w, r)
		case DriverServiceSpInvokeProcedure:
			driverServiceSpInvokeHandler.ServeHTTP(w, r)
		case DriverServiceSpPrepProcedure:
			driverServiceSpPrepHandler.ServeHTTP(w, r)
		case DriverServiceGetExpirationProcedure:
			driverServiceGetExpirationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDriverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDriverServiceHandler struct{}

func (UnimplementedDriverServiceHandler) TestServiceProviderConfig(context.Context, *connect.Request[vanilla.TestServiceProviderConfigRequest]) (*connect.Response[services_providers.TestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.TestServiceProviderConfig is not implemented"))
}

func (UnimplementedDriverServiceHandler) TestInstancesGroupConfig(context.Context, *connect.Request[instances.TestInstancesGroupConfigRequest]) (*connect.Response[instances.TestInstancesGroupConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.TestInstancesGroupConfig is not implemented"))
}

func (UnimplementedDriverServiceHandler) GetType(context.Context, *connect.Request[vanilla.GetTypeRequest]) (*connect.Response[vanilla.GetTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.GetType is not implemented"))
}

func (UnimplementedDriverServiceHandler) Up(context.Context, *connect.Request[vanilla.UpRequest]) (*connect.Response[vanilla.UpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.Up is not implemented"))
}

func (UnimplementedDriverServiceHandler) Down(context.Context, *connect.Request[vanilla.DownRequest]) (*connect.Response[vanilla.DownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.Down is not implemented"))
}

func (UnimplementedDriverServiceHandler) Monitoring(context.Context, *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.Monitoring is not implemented"))
}

func (UnimplementedDriverServiceHandler) SuspendMonitoring(context.Context, *connect.Request[vanilla.MonitoringRequest]) (*connect.Response[vanilla.MonitoringResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.SuspendMonitoring is not implemented"))
}

func (UnimplementedDriverServiceHandler) Invoke(context.Context, *connect.Request[vanilla.InvokeRequest]) (*connect.Response[instances.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.Invoke is not implemented"))
}

func (UnimplementedDriverServiceHandler) SpInvoke(context.Context, *connect.Request[vanilla.SpInvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.SpInvoke is not implemented"))
}

func (UnimplementedDriverServiceHandler) SpPrep(context.Context, *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.SpPrep is not implemented"))
}

func (UnimplementedDriverServiceHandler) GetExpiration(context.Context, *connect.Request[vanilla.GetExpirationRequest]) (*connect.Response[vanilla.GetExpirationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.instance.driver.vanilla.DriverService.GetExpiration is not implemented"))
}
