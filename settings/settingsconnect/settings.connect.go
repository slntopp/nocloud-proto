//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: settings/settings.proto

package settingsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	settings "github.com/slntopp/nocloud-proto/settings"
	structpb "google.golang.org/protobuf/types/known/structpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SettingsServiceName is the fully-qualified name of the SettingsService service.
	SettingsServiceName = "nocloud.settings.SettingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SettingsServiceGetProcedure is the fully-qualified name of the SettingsService's Get RPC.
	SettingsServiceGetProcedure = "/nocloud.settings.SettingsService/Get"
	// SettingsServicePutProcedure is the fully-qualified name of the SettingsService's Put RPC.
	SettingsServicePutProcedure = "/nocloud.settings.SettingsService/Put"
	// SettingsServiceSubProcedure is the fully-qualified name of the SettingsService's Sub RPC.
	SettingsServiceSubProcedure = "/nocloud.settings.SettingsService/Sub"
	// SettingsServiceKeysProcedure is the fully-qualified name of the SettingsService's Keys RPC.
	SettingsServiceKeysProcedure = "/nocloud.settings.SettingsService/Keys"
	// SettingsServiceDeleteProcedure is the fully-qualified name of the SettingsService's Delete RPC.
	SettingsServiceDeleteProcedure = "/nocloud.settings.SettingsService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	settingsServiceServiceDescriptor      = settings.File_settings_settings_proto.Services().ByName("SettingsService")
	settingsServiceGetMethodDescriptor    = settingsServiceServiceDescriptor.Methods().ByName("Get")
	settingsServicePutMethodDescriptor    = settingsServiceServiceDescriptor.Methods().ByName("Put")
	settingsServiceSubMethodDescriptor    = settingsServiceServiceDescriptor.Methods().ByName("Sub")
	settingsServiceKeysMethodDescriptor   = settingsServiceServiceDescriptor.Methods().ByName("Keys")
	settingsServiceDeleteMethodDescriptor = settingsServiceServiceDescriptor.Methods().ByName("Delete")
)

// SettingsServiceClient is a client for the nocloud.settings.SettingsService service.
type SettingsServiceClient interface {
	Get(context.Context, *connect.Request[settings.GetRequest]) (*connect.Response[structpb.Struct], error)
	Put(context.Context, *connect.Request[settings.PutRequest]) (*connect.Response[settings.PutResponse], error)
	Sub(context.Context, *connect.Request[settings.GetRequest]) (*connect.ServerStreamForClient[settings.KeyEvent], error)
	Keys(context.Context, *connect.Request[settings.KeysRequest]) (*connect.Response[settings.KeysResponse], error)
	Delete(context.Context, *connect.Request[settings.DeleteRequest]) (*connect.Response[settings.DeleteResponse], error)
}

// NewSettingsServiceClient constructs a client for the nocloud.settings.SettingsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &settingsServiceClient{
		get: connect.NewClient[settings.GetRequest, structpb.Struct](
			httpClient,
			baseURL+SettingsServiceGetProcedure,
			connect.WithSchema(settingsServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		put: connect.NewClient[settings.PutRequest, settings.PutResponse](
			httpClient,
			baseURL+SettingsServicePutProcedure,
			connect.WithSchema(settingsServicePutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sub: connect.NewClient[settings.GetRequest, settings.KeyEvent](
			httpClient,
			baseURL+SettingsServiceSubProcedure,
			connect.WithSchema(settingsServiceSubMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		keys: connect.NewClient[settings.KeysRequest, settings.KeysResponse](
			httpClient,
			baseURL+SettingsServiceKeysProcedure,
			connect.WithSchema(settingsServiceKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[settings.DeleteRequest, settings.DeleteResponse](
			httpClient,
			baseURL+SettingsServiceDeleteProcedure,
			connect.WithSchema(settingsServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// settingsServiceClient implements SettingsServiceClient.
type settingsServiceClient struct {
	get    *connect.Client[settings.GetRequest, structpb.Struct]
	put    *connect.Client[settings.PutRequest, settings.PutResponse]
	sub    *connect.Client[settings.GetRequest, settings.KeyEvent]
	keys   *connect.Client[settings.KeysRequest, settings.KeysResponse]
	delete *connect.Client[settings.DeleteRequest, settings.DeleteResponse]
}

// Get calls nocloud.settings.SettingsService.Get.
func (c *settingsServiceClient) Get(ctx context.Context, req *connect.Request[settings.GetRequest]) (*connect.Response[structpb.Struct], error) {
	return c.get.CallUnary(ctx, req)
}

// Put calls nocloud.settings.SettingsService.Put.
func (c *settingsServiceClient) Put(ctx context.Context, req *connect.Request[settings.PutRequest]) (*connect.Response[settings.PutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// Sub calls nocloud.settings.SettingsService.Sub.
func (c *settingsServiceClient) Sub(ctx context.Context, req *connect.Request[settings.GetRequest]) (*connect.ServerStreamForClient[settings.KeyEvent], error) {
	return c.sub.CallServerStream(ctx, req)
}

// Keys calls nocloud.settings.SettingsService.Keys.
func (c *settingsServiceClient) Keys(ctx context.Context, req *connect.Request[settings.KeysRequest]) (*connect.Response[settings.KeysResponse], error) {
	return c.keys.CallUnary(ctx, req)
}

// Delete calls nocloud.settings.SettingsService.Delete.
func (c *settingsServiceClient) Delete(ctx context.Context, req *connect.Request[settings.DeleteRequest]) (*connect.Response[settings.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// SettingsServiceHandler is an implementation of the nocloud.settings.SettingsService service.
type SettingsServiceHandler interface {
	Get(context.Context, *connect.Request[settings.GetRequest]) (*connect.Response[structpb.Struct], error)
	Put(context.Context, *connect.Request[settings.PutRequest]) (*connect.Response[settings.PutResponse], error)
	Sub(context.Context, *connect.Request[settings.GetRequest], *connect.ServerStream[settings.KeyEvent]) error
	Keys(context.Context, *connect.Request[settings.KeysRequest]) (*connect.Response[settings.KeysResponse], error)
	Delete(context.Context, *connect.Request[settings.DeleteRequest]) (*connect.Response[settings.DeleteResponse], error)
}

// NewSettingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingsServiceHandler(svc SettingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	settingsServiceGetHandler := connect.NewUnaryHandler(
		SettingsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(settingsServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	settingsServicePutHandler := connect.NewUnaryHandler(
		SettingsServicePutProcedure,
		svc.Put,
		connect.WithSchema(settingsServicePutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceSubHandler := connect.NewServerStreamHandler(
		SettingsServiceSubProcedure,
		svc.Sub,
		connect.WithSchema(settingsServiceSubMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceKeysHandler := connect.NewUnaryHandler(
		SettingsServiceKeysProcedure,
		svc.Keys,
		connect.WithSchema(settingsServiceKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceDeleteHandler := connect.NewUnaryHandler(
		SettingsServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(settingsServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.settings.SettingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SettingsServiceGetProcedure:
			settingsServiceGetHandler.ServeHTTP(w, r)
		case SettingsServicePutProcedure:
			settingsServicePutHandler.ServeHTTP(w, r)
		case SettingsServiceSubProcedure:
			settingsServiceSubHandler.ServeHTTP(w, r)
		case SettingsServiceKeysProcedure:
			settingsServiceKeysHandler.ServeHTTP(w, r)
		case SettingsServiceDeleteProcedure:
			settingsServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingsServiceHandler struct{}

func (UnimplementedSettingsServiceHandler) Get(context.Context, *connect.Request[settings.GetRequest]) (*connect.Response[structpb.Struct], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.settings.SettingsService.Get is not implemented"))
}

func (UnimplementedSettingsServiceHandler) Put(context.Context, *connect.Request[settings.PutRequest]) (*connect.Response[settings.PutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.settings.SettingsService.Put is not implemented"))
}

func (UnimplementedSettingsServiceHandler) Sub(context.Context, *connect.Request[settings.GetRequest], *connect.ServerStream[settings.KeyEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.settings.SettingsService.Sub is not implemented"))
}

func (UnimplementedSettingsServiceHandler) Keys(context.Context, *connect.Request[settings.KeysRequest]) (*connect.Response[settings.KeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.settings.SettingsService.Keys is not implemented"))
}

func (UnimplementedSettingsServiceHandler) Delete(context.Context, *connect.Request[settings.DeleteRequest]) (*connect.Response[settings.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.settings.SettingsService.Delete is not implemented"))
}
