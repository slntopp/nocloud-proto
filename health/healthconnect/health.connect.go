//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: health/health.proto

package healthconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	health "github.com/slntopp/nocloud-proto/health"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthServiceName is the fully-qualified name of the HealthService service.
	HealthServiceName = "nocloud.health.HealthService"
	// InternalProbeServiceName is the fully-qualified name of the InternalProbeService service.
	InternalProbeServiceName = "nocloud.health.InternalProbeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthServiceProbeProcedure is the fully-qualified name of the HealthService's Probe RPC.
	HealthServiceProbeProcedure = "/nocloud.health.HealthService/Probe"
	// InternalProbeServiceServiceProcedure is the fully-qualified name of the InternalProbeService's
	// Service RPC.
	InternalProbeServiceServiceProcedure = "/nocloud.health.InternalProbeService/Service"
	// InternalProbeServiceRoutineProcedure is the fully-qualified name of the InternalProbeService's
	// Routine RPC.
	InternalProbeServiceRoutineProcedure = "/nocloud.health.InternalProbeService/Routine"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	healthServiceServiceDescriptor              = health.File_health_health_proto.Services().ByName("HealthService")
	healthServiceProbeMethodDescriptor          = healthServiceServiceDescriptor.Methods().ByName("Probe")
	internalProbeServiceServiceDescriptor       = health.File_health_health_proto.Services().ByName("InternalProbeService")
	internalProbeServiceServiceMethodDescriptor = internalProbeServiceServiceDescriptor.Methods().ByName("Service")
	internalProbeServiceRoutineMethodDescriptor = internalProbeServiceServiceDescriptor.Methods().ByName("Routine")
)

// HealthServiceClient is a client for the nocloud.health.HealthService service.
type HealthServiceClient interface {
	Probe(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.ProbeResponse], error)
}

// NewHealthServiceClient constructs a client for the nocloud.health.HealthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthServiceClient{
		probe: connect.NewClient[health.ProbeRequest, health.ProbeResponse](
			httpClient,
			baseURL+HealthServiceProbeProcedure,
			connect.WithSchema(healthServiceProbeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthServiceClient implements HealthServiceClient.
type healthServiceClient struct {
	probe *connect.Client[health.ProbeRequest, health.ProbeResponse]
}

// Probe calls nocloud.health.HealthService.Probe.
func (c *healthServiceClient) Probe(ctx context.Context, req *connect.Request[health.ProbeRequest]) (*connect.Response[health.ProbeResponse], error) {
	return c.probe.CallUnary(ctx, req)
}

// HealthServiceHandler is an implementation of the nocloud.health.HealthService service.
type HealthServiceHandler interface {
	Probe(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.ProbeResponse], error)
}

// NewHealthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthServiceHandler(svc HealthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthServiceProbeHandler := connect.NewUnaryHandler(
		HealthServiceProbeProcedure,
		svc.Probe,
		connect.WithSchema(healthServiceProbeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.health.HealthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthServiceProbeProcedure:
			healthServiceProbeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthServiceHandler struct{}

func (UnimplementedHealthServiceHandler) Probe(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.ProbeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.health.HealthService.Probe is not implemented"))
}

// InternalProbeServiceClient is a client for the nocloud.health.InternalProbeService service.
type InternalProbeServiceClient interface {
	Service(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.ServingStatus], error)
	Routine(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.RoutinesStatus], error)
}

// NewInternalProbeServiceClient constructs a client for the nocloud.health.InternalProbeService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInternalProbeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InternalProbeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &internalProbeServiceClient{
		service: connect.NewClient[health.ProbeRequest, health.ServingStatus](
			httpClient,
			baseURL+InternalProbeServiceServiceProcedure,
			connect.WithSchema(internalProbeServiceServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		routine: connect.NewClient[health.ProbeRequest, health.RoutinesStatus](
			httpClient,
			baseURL+InternalProbeServiceRoutineProcedure,
			connect.WithSchema(internalProbeServiceRoutineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// internalProbeServiceClient implements InternalProbeServiceClient.
type internalProbeServiceClient struct {
	service *connect.Client[health.ProbeRequest, health.ServingStatus]
	routine *connect.Client[health.ProbeRequest, health.RoutinesStatus]
}

// Service calls nocloud.health.InternalProbeService.Service.
func (c *internalProbeServiceClient) Service(ctx context.Context, req *connect.Request[health.ProbeRequest]) (*connect.Response[health.ServingStatus], error) {
	return c.service.CallUnary(ctx, req)
}

// Routine calls nocloud.health.InternalProbeService.Routine.
func (c *internalProbeServiceClient) Routine(ctx context.Context, req *connect.Request[health.ProbeRequest]) (*connect.Response[health.RoutinesStatus], error) {
	return c.routine.CallUnary(ctx, req)
}

// InternalProbeServiceHandler is an implementation of the nocloud.health.InternalProbeService
// service.
type InternalProbeServiceHandler interface {
	Service(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.ServingStatus], error)
	Routine(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.RoutinesStatus], error)
}

// NewInternalProbeServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInternalProbeServiceHandler(svc InternalProbeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	internalProbeServiceServiceHandler := connect.NewUnaryHandler(
		InternalProbeServiceServiceProcedure,
		svc.Service,
		connect.WithSchema(internalProbeServiceServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	internalProbeServiceRoutineHandler := connect.NewUnaryHandler(
		InternalProbeServiceRoutineProcedure,
		svc.Routine,
		connect.WithSchema(internalProbeServiceRoutineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.health.InternalProbeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InternalProbeServiceServiceProcedure:
			internalProbeServiceServiceHandler.ServeHTTP(w, r)
		case InternalProbeServiceRoutineProcedure:
			internalProbeServiceRoutineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInternalProbeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInternalProbeServiceHandler struct{}

func (UnimplementedInternalProbeServiceHandler) Service(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.ServingStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.health.InternalProbeService.Service is not implemented"))
}

func (UnimplementedInternalProbeServiceHandler) Routine(context.Context, *connect.Request[health.ProbeRequest]) (*connect.Response[health.RoutinesStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.health.InternalProbeService.Routine is not implemented"))
}
