/*
Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.health;

import "google/api/annotations.proto";

message ProbeRequest {
  string probe_type = 1;
  string payload = 2;
}

enum Status {
  UNKNOWN = 0;
  SERVING = 1;  // Service is up and running
  OFFLINE = 2;  // Service is offline(down)
  RUNNING = 3;  // Routine is running
  STOPPED = 4;  // Routine is stopped
  INTERNAL = 5; // Internal error while making status
  HASERRS = 6;  // Check has errors
  NOEXIST = 7;  // Service has no Routines
}

message ProbeResponse {
  string response = 1;
  Status status = 2;
  repeated ServingStatus serving = 3;
  repeated RoutineStatus routines = 4;
}

message ServingStatus {
  string service = 1;
  Status status = 2;
  optional string error = 3;
}

message RoutineStatus {
  string routine = 1;
  ServingStatus status = 2;
  string last_execution = 3;
}
message RoutinesStatus { repeated RoutineStatus routines = 1; }

service HealthService {
  rpc Probe(nocloud.health.ProbeRequest)
      returns (nocloud.health.ProbeResponse) {
    option (google.api.http) = {
      post : "/health/probe"
      body : "*"
    };
  };
};

service InternalProbeService {
  rpc Service(nocloud.health.ProbeRequest)
      returns (nocloud.health.ServingStatus);
  rpc Routine(nocloud.health.ProbeRequest)
      returns (nocloud.health.RoutinesStatus);
};