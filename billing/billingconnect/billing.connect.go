//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: billing/billing.proto

package billingconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	billing "github.com/slntopp/nocloud-proto/billing"
	addons "github.com/slntopp/nocloud-proto/billing/addons"
	descriptions "github.com/slntopp/nocloud-proto/billing/descriptions"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecordsServiceName is the fully-qualified name of the RecordsService service.
	RecordsServiceName = "nocloud.billing.RecordsService"
	// BillingServiceName is the fully-qualified name of the BillingService service.
	BillingServiceName = "nocloud.billing.BillingService"
	// CurrencyServiceName is the fully-qualified name of the CurrencyService service.
	CurrencyServiceName = "nocloud.billing.CurrencyService"
	// AddonsServiceName is the fully-qualified name of the AddonsService service.
	AddonsServiceName = "nocloud.billing.AddonsService"
	// DescriptionsServiceName is the fully-qualified name of the DescriptionsService service.
	DescriptionsServiceName = "nocloud.billing.DescriptionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecordsServiceGetActiveProcedure is the fully-qualified name of the RecordsService's GetActive
	// RPC.
	RecordsServiceGetActiveProcedure = "/nocloud.billing.RecordsService/GetActive"
	// RecordsServiceCreateProcedure is the fully-qualified name of the RecordsService's Create RPC.
	RecordsServiceCreateProcedure = "/nocloud.billing.RecordsService/Create"
	// RecordsServiceUpdateProcedure is the fully-qualified name of the RecordsService's Update RPC.
	RecordsServiceUpdateProcedure = "/nocloud.billing.RecordsService/Update"
	// BillingServiceCreatePlanProcedure is the fully-qualified name of the BillingService's CreatePlan
	// RPC.
	BillingServiceCreatePlanProcedure = "/nocloud.billing.BillingService/CreatePlan"
	// BillingServiceUpdatePlanProcedure is the fully-qualified name of the BillingService's UpdatePlan
	// RPC.
	BillingServiceUpdatePlanProcedure = "/nocloud.billing.BillingService/UpdatePlan"
	// BillingServiceGetPlanProcedure is the fully-qualified name of the BillingService's GetPlan RPC.
	BillingServiceGetPlanProcedure = "/nocloud.billing.BillingService/GetPlan"
	// BillingServiceListPlansProcedure is the fully-qualified name of the BillingService's ListPlans
	// RPC.
	BillingServiceListPlansProcedure = "/nocloud.billing.BillingService/ListPlans"
	// BillingServiceListPlansInstancesProcedure is the fully-qualified name of the BillingService's
	// ListPlansInstances RPC.
	BillingServiceListPlansInstancesProcedure = "/nocloud.billing.BillingService/ListPlansInstances"
	// BillingServiceDeletePlanProcedure is the fully-qualified name of the BillingService's DeletePlan
	// RPC.
	BillingServiceDeletePlanProcedure = "/nocloud.billing.BillingService/DeletePlan"
	// BillingServiceCreateTransactionProcedure is the fully-qualified name of the BillingService's
	// CreateTransaction RPC.
	BillingServiceCreateTransactionProcedure = "/nocloud.billing.BillingService/CreateTransaction"
	// BillingServiceGetTransactionsProcedure is the fully-qualified name of the BillingService's
	// GetTransactions RPC.
	BillingServiceGetTransactionsProcedure = "/nocloud.billing.BillingService/GetTransactions"
	// BillingServiceGetTransactionsCountProcedure is the fully-qualified name of the BillingService's
	// GetTransactionsCount RPC.
	BillingServiceGetTransactionsCountProcedure = "/nocloud.billing.BillingService/GetTransactionsCount"
	// BillingServiceUpdateTransactionProcedure is the fully-qualified name of the BillingService's
	// UpdateTransaction RPC.
	BillingServiceUpdateTransactionProcedure = "/nocloud.billing.BillingService/UpdateTransaction"
	// BillingServiceGetRecordsProcedure is the fully-qualified name of the BillingService's GetRecords
	// RPC.
	BillingServiceGetRecordsProcedure = "/nocloud.billing.BillingService/GetRecords"
	// BillingServiceGetInstancesReportsProcedure is the fully-qualified name of the BillingService's
	// GetInstancesReports RPC.
	BillingServiceGetInstancesReportsProcedure = "/nocloud.billing.BillingService/GetInstancesReports"
	// BillingServiceGetInstancesReportsCountProcedure is the fully-qualified name of the
	// BillingService's GetInstancesReportsCount RPC.
	BillingServiceGetInstancesReportsCountProcedure = "/nocloud.billing.BillingService/GetInstancesReportsCount"
	// BillingServiceGetRecordsReportsProcedure is the fully-qualified name of the BillingService's
	// GetRecordsReports RPC.
	BillingServiceGetRecordsReportsProcedure = "/nocloud.billing.BillingService/GetRecordsReports"
	// BillingServiceGetRecordsReportsCountProcedure is the fully-qualified name of the BillingService's
	// GetRecordsReportsCount RPC.
	BillingServiceGetRecordsReportsCountProcedure = "/nocloud.billing.BillingService/GetRecordsReportsCount"
	// BillingServiceReprocessProcedure is the fully-qualified name of the BillingService's Reprocess
	// RPC.
	BillingServiceReprocessProcedure = "/nocloud.billing.BillingService/Reprocess"
	// BillingServiceCreateInvoiceProcedure is the fully-qualified name of the BillingService's
	// CreateInvoice RPC.
	BillingServiceCreateInvoiceProcedure = "/nocloud.billing.BillingService/CreateInvoice"
	// BillingServiceGetInvoiceProcedure is the fully-qualified name of the BillingService's GetInvoice
	// RPC.
	BillingServiceGetInvoiceProcedure = "/nocloud.billing.BillingService/GetInvoice"
	// BillingServiceGetInvoicesProcedure is the fully-qualified name of the BillingService's
	// GetInvoices RPC.
	BillingServiceGetInvoicesProcedure = "/nocloud.billing.BillingService/GetInvoices"
	// BillingServiceGetInvoicesCountProcedure is the fully-qualified name of the BillingService's
	// GetInvoicesCount RPC.
	BillingServiceGetInvoicesCountProcedure = "/nocloud.billing.BillingService/GetInvoicesCount"
	// BillingServiceUpdateInvoiceProcedure is the fully-qualified name of the BillingService's
	// UpdateInvoice RPC.
	BillingServiceUpdateInvoiceProcedure = "/nocloud.billing.BillingService/UpdateInvoice"
	// BillingServiceUpdateInvoiceStatusProcedure is the fully-qualified name of the BillingService's
	// UpdateInvoiceStatus RPC.
	BillingServiceUpdateInvoiceStatusProcedure = "/nocloud.billing.BillingService/UpdateInvoiceStatus"
	// CurrencyServiceCreateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// CreateCurrency RPC.
	CurrencyServiceCreateCurrencyProcedure = "/nocloud.billing.CurrencyService/CreateCurrency"
	// CurrencyServiceGetCurrenciesProcedure is the fully-qualified name of the CurrencyService's
	// GetCurrencies RPC.
	CurrencyServiceGetCurrenciesProcedure = "/nocloud.billing.CurrencyService/GetCurrencies"
	// CurrencyServiceGetExchangeRateProcedure is the fully-qualified name of the CurrencyService's
	// GetExchangeRate RPC.
	CurrencyServiceGetExchangeRateProcedure = "/nocloud.billing.CurrencyService/GetExchangeRate"
	// CurrencyServiceGetExchangeRatesProcedure is the fully-qualified name of the CurrencyService's
	// GetExchangeRates RPC.
	CurrencyServiceGetExchangeRatesProcedure = "/nocloud.billing.CurrencyService/GetExchangeRates"
	// CurrencyServiceCreateExchangeRateProcedure is the fully-qualified name of the CurrencyService's
	// CreateExchangeRate RPC.
	CurrencyServiceCreateExchangeRateProcedure = "/nocloud.billing.CurrencyService/CreateExchangeRate"
	// CurrencyServiceUpdateExchangeRateProcedure is the fully-qualified name of the CurrencyService's
	// UpdateExchangeRate RPC.
	CurrencyServiceUpdateExchangeRateProcedure = "/nocloud.billing.CurrencyService/UpdateExchangeRate"
	// CurrencyServiceDeleteExchangeRateProcedure is the fully-qualified name of the CurrencyService's
	// DeleteExchangeRate RPC.
	CurrencyServiceDeleteExchangeRateProcedure = "/nocloud.billing.CurrencyService/DeleteExchangeRate"
	// CurrencyServiceConvertProcedure is the fully-qualified name of the CurrencyService's Convert RPC.
	CurrencyServiceConvertProcedure = "/nocloud.billing.CurrencyService/Convert"
	// AddonsServiceCreateProcedure is the fully-qualified name of the AddonsService's Create RPC.
	AddonsServiceCreateProcedure = "/nocloud.billing.AddonsService/Create"
	// AddonsServiceCreateBulkProcedure is the fully-qualified name of the AddonsService's CreateBulk
	// RPC.
	AddonsServiceCreateBulkProcedure = "/nocloud.billing.AddonsService/CreateBulk"
	// AddonsServiceUpdateProcedure is the fully-qualified name of the AddonsService's Update RPC.
	AddonsServiceUpdateProcedure = "/nocloud.billing.AddonsService/Update"
	// AddonsServiceUpdateBulkProcedure is the fully-qualified name of the AddonsService's UpdateBulk
	// RPC.
	AddonsServiceUpdateBulkProcedure = "/nocloud.billing.AddonsService/UpdateBulk"
	// AddonsServiceGetProcedure is the fully-qualified name of the AddonsService's Get RPC.
	AddonsServiceGetProcedure = "/nocloud.billing.AddonsService/Get"
	// AddonsServiceListProcedure is the fully-qualified name of the AddonsService's List RPC.
	AddonsServiceListProcedure = "/nocloud.billing.AddonsService/List"
	// AddonsServiceCountProcedure is the fully-qualified name of the AddonsService's Count RPC.
	AddonsServiceCountProcedure = "/nocloud.billing.AddonsService/Count"
	// AddonsServiceDeleteProcedure is the fully-qualified name of the AddonsService's Delete RPC.
	AddonsServiceDeleteProcedure = "/nocloud.billing.AddonsService/Delete"
	// DescriptionsServiceCreateProcedure is the fully-qualified name of the DescriptionsService's
	// Create RPC.
	DescriptionsServiceCreateProcedure = "/nocloud.billing.DescriptionsService/Create"
	// DescriptionsServiceUpdateProcedure is the fully-qualified name of the DescriptionsService's
	// Update RPC.
	DescriptionsServiceUpdateProcedure = "/nocloud.billing.DescriptionsService/Update"
	// DescriptionsServiceGetProcedure is the fully-qualified name of the DescriptionsService's Get RPC.
	DescriptionsServiceGetProcedure = "/nocloud.billing.DescriptionsService/Get"
	// DescriptionsServiceListProcedure is the fully-qualified name of the DescriptionsService's List
	// RPC.
	DescriptionsServiceListProcedure = "/nocloud.billing.DescriptionsService/List"
	// DescriptionsServiceCountProcedure is the fully-qualified name of the DescriptionsService's Count
	// RPC.
	DescriptionsServiceCountProcedure = "/nocloud.billing.DescriptionsService/Count"
	// DescriptionsServiceDeleteProcedure is the fully-qualified name of the DescriptionsService's
	// Delete RPC.
	DescriptionsServiceDeleteProcedure = "/nocloud.billing.DescriptionsService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	recordsServiceServiceDescriptor                        = billing.File_billing_billing_proto.Services().ByName("RecordsService")
	recordsServiceGetActiveMethodDescriptor                = recordsServiceServiceDescriptor.Methods().ByName("GetActive")
	recordsServiceCreateMethodDescriptor                   = recordsServiceServiceDescriptor.Methods().ByName("Create")
	recordsServiceUpdateMethodDescriptor                   = recordsServiceServiceDescriptor.Methods().ByName("Update")
	billingServiceServiceDescriptor                        = billing.File_billing_billing_proto.Services().ByName("BillingService")
	billingServiceCreatePlanMethodDescriptor               = billingServiceServiceDescriptor.Methods().ByName("CreatePlan")
	billingServiceUpdatePlanMethodDescriptor               = billingServiceServiceDescriptor.Methods().ByName("UpdatePlan")
	billingServiceGetPlanMethodDescriptor                  = billingServiceServiceDescriptor.Methods().ByName("GetPlan")
	billingServiceListPlansMethodDescriptor                = billingServiceServiceDescriptor.Methods().ByName("ListPlans")
	billingServiceListPlansInstancesMethodDescriptor       = billingServiceServiceDescriptor.Methods().ByName("ListPlansInstances")
	billingServiceDeletePlanMethodDescriptor               = billingServiceServiceDescriptor.Methods().ByName("DeletePlan")
	billingServiceCreateTransactionMethodDescriptor        = billingServiceServiceDescriptor.Methods().ByName("CreateTransaction")
	billingServiceGetTransactionsMethodDescriptor          = billingServiceServiceDescriptor.Methods().ByName("GetTransactions")
	billingServiceGetTransactionsCountMethodDescriptor     = billingServiceServiceDescriptor.Methods().ByName("GetTransactionsCount")
	billingServiceUpdateTransactionMethodDescriptor        = billingServiceServiceDescriptor.Methods().ByName("UpdateTransaction")
	billingServiceGetRecordsMethodDescriptor               = billingServiceServiceDescriptor.Methods().ByName("GetRecords")
	billingServiceGetInstancesReportsMethodDescriptor      = billingServiceServiceDescriptor.Methods().ByName("GetInstancesReports")
	billingServiceGetInstancesReportsCountMethodDescriptor = billingServiceServiceDescriptor.Methods().ByName("GetInstancesReportsCount")
	billingServiceGetRecordsReportsMethodDescriptor        = billingServiceServiceDescriptor.Methods().ByName("GetRecordsReports")
	billingServiceGetRecordsReportsCountMethodDescriptor   = billingServiceServiceDescriptor.Methods().ByName("GetRecordsReportsCount")
	billingServiceReprocessMethodDescriptor                = billingServiceServiceDescriptor.Methods().ByName("Reprocess")
	billingServiceCreateInvoiceMethodDescriptor            = billingServiceServiceDescriptor.Methods().ByName("CreateInvoice")
	billingServiceGetInvoiceMethodDescriptor               = billingServiceServiceDescriptor.Methods().ByName("GetInvoice")
	billingServiceGetInvoicesMethodDescriptor              = billingServiceServiceDescriptor.Methods().ByName("GetInvoices")
	billingServiceGetInvoicesCountMethodDescriptor         = billingServiceServiceDescriptor.Methods().ByName("GetInvoicesCount")
	billingServiceUpdateInvoiceMethodDescriptor            = billingServiceServiceDescriptor.Methods().ByName("UpdateInvoice")
	billingServiceUpdateInvoiceStatusMethodDescriptor      = billingServiceServiceDescriptor.Methods().ByName("UpdateInvoiceStatus")
	currencyServiceServiceDescriptor                       = billing.File_billing_billing_proto.Services().ByName("CurrencyService")
	currencyServiceCreateCurrencyMethodDescriptor          = currencyServiceServiceDescriptor.Methods().ByName("CreateCurrency")
	currencyServiceGetCurrenciesMethodDescriptor           = currencyServiceServiceDescriptor.Methods().ByName("GetCurrencies")
	currencyServiceGetExchangeRateMethodDescriptor         = currencyServiceServiceDescriptor.Methods().ByName("GetExchangeRate")
	currencyServiceGetExchangeRatesMethodDescriptor        = currencyServiceServiceDescriptor.Methods().ByName("GetExchangeRates")
	currencyServiceCreateExchangeRateMethodDescriptor      = currencyServiceServiceDescriptor.Methods().ByName("CreateExchangeRate")
	currencyServiceUpdateExchangeRateMethodDescriptor      = currencyServiceServiceDescriptor.Methods().ByName("UpdateExchangeRate")
	currencyServiceDeleteExchangeRateMethodDescriptor      = currencyServiceServiceDescriptor.Methods().ByName("DeleteExchangeRate")
	currencyServiceConvertMethodDescriptor                 = currencyServiceServiceDescriptor.Methods().ByName("Convert")
	addonsServiceServiceDescriptor                         = billing.File_billing_billing_proto.Services().ByName("AddonsService")
	addonsServiceCreateMethodDescriptor                    = addonsServiceServiceDescriptor.Methods().ByName("Create")
	addonsServiceCreateBulkMethodDescriptor                = addonsServiceServiceDescriptor.Methods().ByName("CreateBulk")
	addonsServiceUpdateMethodDescriptor                    = addonsServiceServiceDescriptor.Methods().ByName("Update")
	addonsServiceUpdateBulkMethodDescriptor                = addonsServiceServiceDescriptor.Methods().ByName("UpdateBulk")
	addonsServiceGetMethodDescriptor                       = addonsServiceServiceDescriptor.Methods().ByName("Get")
	addonsServiceListMethodDescriptor                      = addonsServiceServiceDescriptor.Methods().ByName("List")
	addonsServiceCountMethodDescriptor                     = addonsServiceServiceDescriptor.Methods().ByName("Count")
	addonsServiceDeleteMethodDescriptor                    = addonsServiceServiceDescriptor.Methods().ByName("Delete")
	descriptionsServiceServiceDescriptor                   = billing.File_billing_billing_proto.Services().ByName("DescriptionsService")
	descriptionsServiceCreateMethodDescriptor              = descriptionsServiceServiceDescriptor.Methods().ByName("Create")
	descriptionsServiceUpdateMethodDescriptor              = descriptionsServiceServiceDescriptor.Methods().ByName("Update")
	descriptionsServiceGetMethodDescriptor                 = descriptionsServiceServiceDescriptor.Methods().ByName("Get")
	descriptionsServiceListMethodDescriptor                = descriptionsServiceServiceDescriptor.Methods().ByName("List")
	descriptionsServiceCountMethodDescriptor               = descriptionsServiceServiceDescriptor.Methods().ByName("Count")
	descriptionsServiceDeleteMethodDescriptor              = descriptionsServiceServiceDescriptor.Methods().ByName("Delete")
)

// RecordsServiceClient is a client for the nocloud.billing.RecordsService service.
type RecordsServiceClient interface {
	GetActive(context.Context, *connect.Request[billing.GetActiveRequest]) (*connect.Response[billing.Records], error)
	Create(context.Context, *connect.Request[billing.Records]) (*connect.Response[billing.Records], error)
	Update(context.Context, *connect.Request[billing.Records]) (*connect.Response[billing.Records], error)
}

// NewRecordsServiceClient constructs a client for the nocloud.billing.RecordsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecordsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecordsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recordsServiceClient{
		getActive: connect.NewClient[billing.GetActiveRequest, billing.Records](
			httpClient,
			baseURL+RecordsServiceGetActiveProcedure,
			connect.WithSchema(recordsServiceGetActiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[billing.Records, billing.Records](
			httpClient,
			baseURL+RecordsServiceCreateProcedure,
			connect.WithSchema(recordsServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[billing.Records, billing.Records](
			httpClient,
			baseURL+RecordsServiceUpdateProcedure,
			connect.WithSchema(recordsServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// recordsServiceClient implements RecordsServiceClient.
type recordsServiceClient struct {
	getActive *connect.Client[billing.GetActiveRequest, billing.Records]
	create    *connect.Client[billing.Records, billing.Records]
	update    *connect.Client[billing.Records, billing.Records]
}

// GetActive calls nocloud.billing.RecordsService.GetActive.
func (c *recordsServiceClient) GetActive(ctx context.Context, req *connect.Request[billing.GetActiveRequest]) (*connect.Response[billing.Records], error) {
	return c.getActive.CallUnary(ctx, req)
}

// Create calls nocloud.billing.RecordsService.Create.
func (c *recordsServiceClient) Create(ctx context.Context, req *connect.Request[billing.Records]) (*connect.Response[billing.Records], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls nocloud.billing.RecordsService.Update.
func (c *recordsServiceClient) Update(ctx context.Context, req *connect.Request[billing.Records]) (*connect.Response[billing.Records], error) {
	return c.update.CallUnary(ctx, req)
}

// RecordsServiceHandler is an implementation of the nocloud.billing.RecordsService service.
type RecordsServiceHandler interface {
	GetActive(context.Context, *connect.Request[billing.GetActiveRequest]) (*connect.Response[billing.Records], error)
	Create(context.Context, *connect.Request[billing.Records]) (*connect.Response[billing.Records], error)
	Update(context.Context, *connect.Request[billing.Records]) (*connect.Response[billing.Records], error)
}

// NewRecordsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecordsServiceHandler(svc RecordsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recordsServiceGetActiveHandler := connect.NewUnaryHandler(
		RecordsServiceGetActiveProcedure,
		svc.GetActive,
		connect.WithSchema(recordsServiceGetActiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recordsServiceCreateHandler := connect.NewUnaryHandler(
		RecordsServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(recordsServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recordsServiceUpdateHandler := connect.NewUnaryHandler(
		RecordsServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(recordsServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.billing.RecordsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecordsServiceGetActiveProcedure:
			recordsServiceGetActiveHandler.ServeHTTP(w, r)
		case RecordsServiceCreateProcedure:
			recordsServiceCreateHandler.ServeHTTP(w, r)
		case RecordsServiceUpdateProcedure:
			recordsServiceUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecordsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecordsServiceHandler struct{}

func (UnimplementedRecordsServiceHandler) GetActive(context.Context, *connect.Request[billing.GetActiveRequest]) (*connect.Response[billing.Records], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.RecordsService.GetActive is not implemented"))
}

func (UnimplementedRecordsServiceHandler) Create(context.Context, *connect.Request[billing.Records]) (*connect.Response[billing.Records], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.RecordsService.Create is not implemented"))
}

func (UnimplementedRecordsServiceHandler) Update(context.Context, *connect.Request[billing.Records]) (*connect.Response[billing.Records], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.RecordsService.Update is not implemented"))
}

// BillingServiceClient is a client for the nocloud.billing.BillingService service.
type BillingServiceClient interface {
	CreatePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	UpdatePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	GetPlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	ListPlans(context.Context, *connect.Request[billing.ListRequest]) (*connect.Response[billing.ListResponse], error)
	ListPlansInstances(context.Context, *connect.Request[billing.ListPlansInstancesRequest]) (*connect.Response[billing.ListPlansInstancesResponse], error)
	DeletePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	CreateTransaction(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.Transaction], error)
	GetTransactions(context.Context, *connect.Request[billing.GetTransactionsRequest]) (*connect.Response[billing.Transactions], error)
	GetTransactionsCount(context.Context, *connect.Request[billing.GetTransactionsCountRequest]) (*connect.Response[billing.GetTransactionsCountResponse], error)
	UpdateTransaction(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.UpdateTransactionResponse], error)
	GetRecords(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.Records], error)
	GetInstancesReports(context.Context, *connect.Request[billing.GetInstancesReportRequest]) (*connect.Response[billing.GetInstancesReportResponse], error)
	GetInstancesReportsCount(context.Context, *connect.Request[billing.GetInstancesReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error)
	GetRecordsReports(context.Context, *connect.Request[billing.GetRecordsReportsRequest]) (*connect.Response[billing.GetRecordsReportsResponse], error)
	GetRecordsReportsCount(context.Context, *connect.Request[billing.GetRecordsReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error)
	Reprocess(context.Context, *connect.Request[billing.ReprocessTransactionsRequest]) (*connect.Response[billing.Transactions], error)
	CreateInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error)
	GetInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error)
	GetInvoices(context.Context, *connect.Request[billing.GetInvoicesRequest]) (*connect.Response[billing.Invoices], error)
	GetInvoicesCount(context.Context, *connect.Request[billing.GetInvoicesCountRequest]) (*connect.Response[billing.GetInvoicesCountResponse], error)
	UpdateInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error)
	UpdateInvoiceStatus(context.Context, *connect.Request[billing.UpdateInvoiceStatusRequest]) (*connect.Response[billing.Invoice], error)
}

// NewBillingServiceClient constructs a client for the nocloud.billing.BillingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBillingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BillingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &billingServiceClient{
		createPlan: connect.NewClient[billing.Plan, billing.Plan](
			httpClient,
			baseURL+BillingServiceCreatePlanProcedure,
			connect.WithSchema(billingServiceCreatePlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePlan: connect.NewClient[billing.Plan, billing.Plan](
			httpClient,
			baseURL+BillingServiceUpdatePlanProcedure,
			connect.WithSchema(billingServiceUpdatePlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPlan: connect.NewClient[billing.Plan, billing.Plan](
			httpClient,
			baseURL+BillingServiceGetPlanProcedure,
			connect.WithSchema(billingServiceGetPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPlans: connect.NewClient[billing.ListRequest, billing.ListResponse](
			httpClient,
			baseURL+BillingServiceListPlansProcedure,
			connect.WithSchema(billingServiceListPlansMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPlansInstances: connect.NewClient[billing.ListPlansInstancesRequest, billing.ListPlansInstancesResponse](
			httpClient,
			baseURL+BillingServiceListPlansInstancesProcedure,
			connect.WithSchema(billingServiceListPlansInstancesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePlan: connect.NewClient[billing.Plan, billing.Plan](
			httpClient,
			baseURL+BillingServiceDeletePlanProcedure,
			connect.WithSchema(billingServiceDeletePlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTransaction: connect.NewClient[billing.Transaction, billing.Transaction](
			httpClient,
			baseURL+BillingServiceCreateTransactionProcedure,
			connect.WithSchema(billingServiceCreateTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTransactions: connect.NewClient[billing.GetTransactionsRequest, billing.Transactions](
			httpClient,
			baseURL+BillingServiceGetTransactionsProcedure,
			connect.WithSchema(billingServiceGetTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTransactionsCount: connect.NewClient[billing.GetTransactionsCountRequest, billing.GetTransactionsCountResponse](
			httpClient,
			baseURL+BillingServiceGetTransactionsCountProcedure,
			connect.WithSchema(billingServiceGetTransactionsCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTransaction: connect.NewClient[billing.Transaction, billing.UpdateTransactionResponse](
			httpClient,
			baseURL+BillingServiceUpdateTransactionProcedure,
			connect.WithSchema(billingServiceUpdateTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecords: connect.NewClient[billing.Transaction, billing.Records](
			httpClient,
			baseURL+BillingServiceGetRecordsProcedure,
			connect.WithSchema(billingServiceGetRecordsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getInstancesReports: connect.NewClient[billing.GetInstancesReportRequest, billing.GetInstancesReportResponse](
			httpClient,
			baseURL+BillingServiceGetInstancesReportsProcedure,
			connect.WithSchema(billingServiceGetInstancesReportsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getInstancesReportsCount: connect.NewClient[billing.GetInstancesReportsCountRequest, billing.GetReportsCountResponse](
			httpClient,
			baseURL+BillingServiceGetInstancesReportsCountProcedure,
			connect.WithSchema(billingServiceGetInstancesReportsCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecordsReports: connect.NewClient[billing.GetRecordsReportsRequest, billing.GetRecordsReportsResponse](
			httpClient,
			baseURL+BillingServiceGetRecordsReportsProcedure,
			connect.WithSchema(billingServiceGetRecordsReportsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecordsReportsCount: connect.NewClient[billing.GetRecordsReportsCountRequest, billing.GetReportsCountResponse](
			httpClient,
			baseURL+BillingServiceGetRecordsReportsCountProcedure,
			connect.WithSchema(billingServiceGetRecordsReportsCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reprocess: connect.NewClient[billing.ReprocessTransactionsRequest, billing.Transactions](
			httpClient,
			baseURL+BillingServiceReprocessProcedure,
			connect.WithSchema(billingServiceReprocessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createInvoice: connect.NewClient[billing.Invoice, billing.Invoice](
			httpClient,
			baseURL+BillingServiceCreateInvoiceProcedure,
			connect.WithSchema(billingServiceCreateInvoiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getInvoice: connect.NewClient[billing.Invoice, billing.Invoice](
			httpClient,
			baseURL+BillingServiceGetInvoiceProcedure,
			connect.WithSchema(billingServiceGetInvoiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getInvoices: connect.NewClient[billing.GetInvoicesRequest, billing.Invoices](
			httpClient,
			baseURL+BillingServiceGetInvoicesProcedure,
			connect.WithSchema(billingServiceGetInvoicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getInvoicesCount: connect.NewClient[billing.GetInvoicesCountRequest, billing.GetInvoicesCountResponse](
			httpClient,
			baseURL+BillingServiceGetInvoicesCountProcedure,
			connect.WithSchema(billingServiceGetInvoicesCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateInvoice: connect.NewClient[billing.Invoice, billing.Invoice](
			httpClient,
			baseURL+BillingServiceUpdateInvoiceProcedure,
			connect.WithSchema(billingServiceUpdateInvoiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateInvoiceStatus: connect.NewClient[billing.UpdateInvoiceStatusRequest, billing.Invoice](
			httpClient,
			baseURL+BillingServiceUpdateInvoiceStatusProcedure,
			connect.WithSchema(billingServiceUpdateInvoiceStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// billingServiceClient implements BillingServiceClient.
type billingServiceClient struct {
	createPlan               *connect.Client[billing.Plan, billing.Plan]
	updatePlan               *connect.Client[billing.Plan, billing.Plan]
	getPlan                  *connect.Client[billing.Plan, billing.Plan]
	listPlans                *connect.Client[billing.ListRequest, billing.ListResponse]
	listPlansInstances       *connect.Client[billing.ListPlansInstancesRequest, billing.ListPlansInstancesResponse]
	deletePlan               *connect.Client[billing.Plan, billing.Plan]
	createTransaction        *connect.Client[billing.Transaction, billing.Transaction]
	getTransactions          *connect.Client[billing.GetTransactionsRequest, billing.Transactions]
	getTransactionsCount     *connect.Client[billing.GetTransactionsCountRequest, billing.GetTransactionsCountResponse]
	updateTransaction        *connect.Client[billing.Transaction, billing.UpdateTransactionResponse]
	getRecords               *connect.Client[billing.Transaction, billing.Records]
	getInstancesReports      *connect.Client[billing.GetInstancesReportRequest, billing.GetInstancesReportResponse]
	getInstancesReportsCount *connect.Client[billing.GetInstancesReportsCountRequest, billing.GetReportsCountResponse]
	getRecordsReports        *connect.Client[billing.GetRecordsReportsRequest, billing.GetRecordsReportsResponse]
	getRecordsReportsCount   *connect.Client[billing.GetRecordsReportsCountRequest, billing.GetReportsCountResponse]
	reprocess                *connect.Client[billing.ReprocessTransactionsRequest, billing.Transactions]
	createInvoice            *connect.Client[billing.Invoice, billing.Invoice]
	getInvoice               *connect.Client[billing.Invoice, billing.Invoice]
	getInvoices              *connect.Client[billing.GetInvoicesRequest, billing.Invoices]
	getInvoicesCount         *connect.Client[billing.GetInvoicesCountRequest, billing.GetInvoicesCountResponse]
	updateInvoice            *connect.Client[billing.Invoice, billing.Invoice]
	updateInvoiceStatus      *connect.Client[billing.UpdateInvoiceStatusRequest, billing.Invoice]
}

// CreatePlan calls nocloud.billing.BillingService.CreatePlan.
func (c *billingServiceClient) CreatePlan(ctx context.Context, req *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return c.createPlan.CallUnary(ctx, req)
}

// UpdatePlan calls nocloud.billing.BillingService.UpdatePlan.
func (c *billingServiceClient) UpdatePlan(ctx context.Context, req *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return c.updatePlan.CallUnary(ctx, req)
}

// GetPlan calls nocloud.billing.BillingService.GetPlan.
func (c *billingServiceClient) GetPlan(ctx context.Context, req *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return c.getPlan.CallUnary(ctx, req)
}

// ListPlans calls nocloud.billing.BillingService.ListPlans.
func (c *billingServiceClient) ListPlans(ctx context.Context, req *connect.Request[billing.ListRequest]) (*connect.Response[billing.ListResponse], error) {
	return c.listPlans.CallUnary(ctx, req)
}

// ListPlansInstances calls nocloud.billing.BillingService.ListPlansInstances.
func (c *billingServiceClient) ListPlansInstances(ctx context.Context, req *connect.Request[billing.ListPlansInstancesRequest]) (*connect.Response[billing.ListPlansInstancesResponse], error) {
	return c.listPlansInstances.CallUnary(ctx, req)
}

// DeletePlan calls nocloud.billing.BillingService.DeletePlan.
func (c *billingServiceClient) DeletePlan(ctx context.Context, req *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return c.deletePlan.CallUnary(ctx, req)
}

// CreateTransaction calls nocloud.billing.BillingService.CreateTransaction.
func (c *billingServiceClient) CreateTransaction(ctx context.Context, req *connect.Request[billing.Transaction]) (*connect.Response[billing.Transaction], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// GetTransactions calls nocloud.billing.BillingService.GetTransactions.
func (c *billingServiceClient) GetTransactions(ctx context.Context, req *connect.Request[billing.GetTransactionsRequest]) (*connect.Response[billing.Transactions], error) {
	return c.getTransactions.CallUnary(ctx, req)
}

// GetTransactionsCount calls nocloud.billing.BillingService.GetTransactionsCount.
func (c *billingServiceClient) GetTransactionsCount(ctx context.Context, req *connect.Request[billing.GetTransactionsCountRequest]) (*connect.Response[billing.GetTransactionsCountResponse], error) {
	return c.getTransactionsCount.CallUnary(ctx, req)
}

// UpdateTransaction calls nocloud.billing.BillingService.UpdateTransaction.
func (c *billingServiceClient) UpdateTransaction(ctx context.Context, req *connect.Request[billing.Transaction]) (*connect.Response[billing.UpdateTransactionResponse], error) {
	return c.updateTransaction.CallUnary(ctx, req)
}

// GetRecords calls nocloud.billing.BillingService.GetRecords.
func (c *billingServiceClient) GetRecords(ctx context.Context, req *connect.Request[billing.Transaction]) (*connect.Response[billing.Records], error) {
	return c.getRecords.CallUnary(ctx, req)
}

// GetInstancesReports calls nocloud.billing.BillingService.GetInstancesReports.
func (c *billingServiceClient) GetInstancesReports(ctx context.Context, req *connect.Request[billing.GetInstancesReportRequest]) (*connect.Response[billing.GetInstancesReportResponse], error) {
	return c.getInstancesReports.CallUnary(ctx, req)
}

// GetInstancesReportsCount calls nocloud.billing.BillingService.GetInstancesReportsCount.
func (c *billingServiceClient) GetInstancesReportsCount(ctx context.Context, req *connect.Request[billing.GetInstancesReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error) {
	return c.getInstancesReportsCount.CallUnary(ctx, req)
}

// GetRecordsReports calls nocloud.billing.BillingService.GetRecordsReports.
func (c *billingServiceClient) GetRecordsReports(ctx context.Context, req *connect.Request[billing.GetRecordsReportsRequest]) (*connect.Response[billing.GetRecordsReportsResponse], error) {
	return c.getRecordsReports.CallUnary(ctx, req)
}

// GetRecordsReportsCount calls nocloud.billing.BillingService.GetRecordsReportsCount.
func (c *billingServiceClient) GetRecordsReportsCount(ctx context.Context, req *connect.Request[billing.GetRecordsReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error) {
	return c.getRecordsReportsCount.CallUnary(ctx, req)
}

// Reprocess calls nocloud.billing.BillingService.Reprocess.
func (c *billingServiceClient) Reprocess(ctx context.Context, req *connect.Request[billing.ReprocessTransactionsRequest]) (*connect.Response[billing.Transactions], error) {
	return c.reprocess.CallUnary(ctx, req)
}

// CreateInvoice calls nocloud.billing.BillingService.CreateInvoice.
func (c *billingServiceClient) CreateInvoice(ctx context.Context, req *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error) {
	return c.createInvoice.CallUnary(ctx, req)
}

// GetInvoice calls nocloud.billing.BillingService.GetInvoice.
func (c *billingServiceClient) GetInvoice(ctx context.Context, req *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error) {
	return c.getInvoice.CallUnary(ctx, req)
}

// GetInvoices calls nocloud.billing.BillingService.GetInvoices.
func (c *billingServiceClient) GetInvoices(ctx context.Context, req *connect.Request[billing.GetInvoicesRequest]) (*connect.Response[billing.Invoices], error) {
	return c.getInvoices.CallUnary(ctx, req)
}

// GetInvoicesCount calls nocloud.billing.BillingService.GetInvoicesCount.
func (c *billingServiceClient) GetInvoicesCount(ctx context.Context, req *connect.Request[billing.GetInvoicesCountRequest]) (*connect.Response[billing.GetInvoicesCountResponse], error) {
	return c.getInvoicesCount.CallUnary(ctx, req)
}

// UpdateInvoice calls nocloud.billing.BillingService.UpdateInvoice.
func (c *billingServiceClient) UpdateInvoice(ctx context.Context, req *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error) {
	return c.updateInvoice.CallUnary(ctx, req)
}

// UpdateInvoiceStatus calls nocloud.billing.BillingService.UpdateInvoiceStatus.
func (c *billingServiceClient) UpdateInvoiceStatus(ctx context.Context, req *connect.Request[billing.UpdateInvoiceStatusRequest]) (*connect.Response[billing.Invoice], error) {
	return c.updateInvoiceStatus.CallUnary(ctx, req)
}

// BillingServiceHandler is an implementation of the nocloud.billing.BillingService service.
type BillingServiceHandler interface {
	CreatePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	UpdatePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	GetPlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	ListPlans(context.Context, *connect.Request[billing.ListRequest]) (*connect.Response[billing.ListResponse], error)
	ListPlansInstances(context.Context, *connect.Request[billing.ListPlansInstancesRequest]) (*connect.Response[billing.ListPlansInstancesResponse], error)
	DeletePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error)
	CreateTransaction(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.Transaction], error)
	GetTransactions(context.Context, *connect.Request[billing.GetTransactionsRequest]) (*connect.Response[billing.Transactions], error)
	GetTransactionsCount(context.Context, *connect.Request[billing.GetTransactionsCountRequest]) (*connect.Response[billing.GetTransactionsCountResponse], error)
	UpdateTransaction(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.UpdateTransactionResponse], error)
	GetRecords(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.Records], error)
	GetInstancesReports(context.Context, *connect.Request[billing.GetInstancesReportRequest]) (*connect.Response[billing.GetInstancesReportResponse], error)
	GetInstancesReportsCount(context.Context, *connect.Request[billing.GetInstancesReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error)
	GetRecordsReports(context.Context, *connect.Request[billing.GetRecordsReportsRequest]) (*connect.Response[billing.GetRecordsReportsResponse], error)
	GetRecordsReportsCount(context.Context, *connect.Request[billing.GetRecordsReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error)
	Reprocess(context.Context, *connect.Request[billing.ReprocessTransactionsRequest]) (*connect.Response[billing.Transactions], error)
	CreateInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error)
	GetInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error)
	GetInvoices(context.Context, *connect.Request[billing.GetInvoicesRequest]) (*connect.Response[billing.Invoices], error)
	GetInvoicesCount(context.Context, *connect.Request[billing.GetInvoicesCountRequest]) (*connect.Response[billing.GetInvoicesCountResponse], error)
	UpdateInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error)
	UpdateInvoiceStatus(context.Context, *connect.Request[billing.UpdateInvoiceStatusRequest]) (*connect.Response[billing.Invoice], error)
}

// NewBillingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBillingServiceHandler(svc BillingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	billingServiceCreatePlanHandler := connect.NewUnaryHandler(
		BillingServiceCreatePlanProcedure,
		svc.CreatePlan,
		connect.WithSchema(billingServiceCreatePlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceUpdatePlanHandler := connect.NewUnaryHandler(
		BillingServiceUpdatePlanProcedure,
		svc.UpdatePlan,
		connect.WithSchema(billingServiceUpdatePlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetPlanHandler := connect.NewUnaryHandler(
		BillingServiceGetPlanProcedure,
		svc.GetPlan,
		connect.WithSchema(billingServiceGetPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceListPlansHandler := connect.NewUnaryHandler(
		BillingServiceListPlansProcedure,
		svc.ListPlans,
		connect.WithSchema(billingServiceListPlansMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceListPlansInstancesHandler := connect.NewUnaryHandler(
		BillingServiceListPlansInstancesProcedure,
		svc.ListPlansInstances,
		connect.WithSchema(billingServiceListPlansInstancesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceDeletePlanHandler := connect.NewUnaryHandler(
		BillingServiceDeletePlanProcedure,
		svc.DeletePlan,
		connect.WithSchema(billingServiceDeletePlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceCreateTransactionHandler := connect.NewUnaryHandler(
		BillingServiceCreateTransactionProcedure,
		svc.CreateTransaction,
		connect.WithSchema(billingServiceCreateTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetTransactionsHandler := connect.NewUnaryHandler(
		BillingServiceGetTransactionsProcedure,
		svc.GetTransactions,
		connect.WithSchema(billingServiceGetTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetTransactionsCountHandler := connect.NewUnaryHandler(
		BillingServiceGetTransactionsCountProcedure,
		svc.GetTransactionsCount,
		connect.WithSchema(billingServiceGetTransactionsCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceUpdateTransactionHandler := connect.NewUnaryHandler(
		BillingServiceUpdateTransactionProcedure,
		svc.UpdateTransaction,
		connect.WithSchema(billingServiceUpdateTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetRecordsHandler := connect.NewUnaryHandler(
		BillingServiceGetRecordsProcedure,
		svc.GetRecords,
		connect.WithSchema(billingServiceGetRecordsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetInstancesReportsHandler := connect.NewUnaryHandler(
		BillingServiceGetInstancesReportsProcedure,
		svc.GetInstancesReports,
		connect.WithSchema(billingServiceGetInstancesReportsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetInstancesReportsCountHandler := connect.NewUnaryHandler(
		BillingServiceGetInstancesReportsCountProcedure,
		svc.GetInstancesReportsCount,
		connect.WithSchema(billingServiceGetInstancesReportsCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetRecordsReportsHandler := connect.NewUnaryHandler(
		BillingServiceGetRecordsReportsProcedure,
		svc.GetRecordsReports,
		connect.WithSchema(billingServiceGetRecordsReportsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetRecordsReportsCountHandler := connect.NewUnaryHandler(
		BillingServiceGetRecordsReportsCountProcedure,
		svc.GetRecordsReportsCount,
		connect.WithSchema(billingServiceGetRecordsReportsCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceReprocessHandler := connect.NewUnaryHandler(
		BillingServiceReprocessProcedure,
		svc.Reprocess,
		connect.WithSchema(billingServiceReprocessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceCreateInvoiceHandler := connect.NewUnaryHandler(
		BillingServiceCreateInvoiceProcedure,
		svc.CreateInvoice,
		connect.WithSchema(billingServiceCreateInvoiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetInvoiceHandler := connect.NewUnaryHandler(
		BillingServiceGetInvoiceProcedure,
		svc.GetInvoice,
		connect.WithSchema(billingServiceGetInvoiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetInvoicesHandler := connect.NewUnaryHandler(
		BillingServiceGetInvoicesProcedure,
		svc.GetInvoices,
		connect.WithSchema(billingServiceGetInvoicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceGetInvoicesCountHandler := connect.NewUnaryHandler(
		BillingServiceGetInvoicesCountProcedure,
		svc.GetInvoicesCount,
		connect.WithSchema(billingServiceGetInvoicesCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceUpdateInvoiceHandler := connect.NewUnaryHandler(
		BillingServiceUpdateInvoiceProcedure,
		svc.UpdateInvoice,
		connect.WithSchema(billingServiceUpdateInvoiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	billingServiceUpdateInvoiceStatusHandler := connect.NewUnaryHandler(
		BillingServiceUpdateInvoiceStatusProcedure,
		svc.UpdateInvoiceStatus,
		connect.WithSchema(billingServiceUpdateInvoiceStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.billing.BillingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BillingServiceCreatePlanProcedure:
			billingServiceCreatePlanHandler.ServeHTTP(w, r)
		case BillingServiceUpdatePlanProcedure:
			billingServiceUpdatePlanHandler.ServeHTTP(w, r)
		case BillingServiceGetPlanProcedure:
			billingServiceGetPlanHandler.ServeHTTP(w, r)
		case BillingServiceListPlansProcedure:
			billingServiceListPlansHandler.ServeHTTP(w, r)
		case BillingServiceListPlansInstancesProcedure:
			billingServiceListPlansInstancesHandler.ServeHTTP(w, r)
		case BillingServiceDeletePlanProcedure:
			billingServiceDeletePlanHandler.ServeHTTP(w, r)
		case BillingServiceCreateTransactionProcedure:
			billingServiceCreateTransactionHandler.ServeHTTP(w, r)
		case BillingServiceGetTransactionsProcedure:
			billingServiceGetTransactionsHandler.ServeHTTP(w, r)
		case BillingServiceGetTransactionsCountProcedure:
			billingServiceGetTransactionsCountHandler.ServeHTTP(w, r)
		case BillingServiceUpdateTransactionProcedure:
			billingServiceUpdateTransactionHandler.ServeHTTP(w, r)
		case BillingServiceGetRecordsProcedure:
			billingServiceGetRecordsHandler.ServeHTTP(w, r)
		case BillingServiceGetInstancesReportsProcedure:
			billingServiceGetInstancesReportsHandler.ServeHTTP(w, r)
		case BillingServiceGetInstancesReportsCountProcedure:
			billingServiceGetInstancesReportsCountHandler.ServeHTTP(w, r)
		case BillingServiceGetRecordsReportsProcedure:
			billingServiceGetRecordsReportsHandler.ServeHTTP(w, r)
		case BillingServiceGetRecordsReportsCountProcedure:
			billingServiceGetRecordsReportsCountHandler.ServeHTTP(w, r)
		case BillingServiceReprocessProcedure:
			billingServiceReprocessHandler.ServeHTTP(w, r)
		case BillingServiceCreateInvoiceProcedure:
			billingServiceCreateInvoiceHandler.ServeHTTP(w, r)
		case BillingServiceGetInvoiceProcedure:
			billingServiceGetInvoiceHandler.ServeHTTP(w, r)
		case BillingServiceGetInvoicesProcedure:
			billingServiceGetInvoicesHandler.ServeHTTP(w, r)
		case BillingServiceGetInvoicesCountProcedure:
			billingServiceGetInvoicesCountHandler.ServeHTTP(w, r)
		case BillingServiceUpdateInvoiceProcedure:
			billingServiceUpdateInvoiceHandler.ServeHTTP(w, r)
		case BillingServiceUpdateInvoiceStatusProcedure:
			billingServiceUpdateInvoiceStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBillingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBillingServiceHandler struct{}

func (UnimplementedBillingServiceHandler) CreatePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.CreatePlan is not implemented"))
}

func (UnimplementedBillingServiceHandler) UpdatePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.UpdatePlan is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetPlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetPlan is not implemented"))
}

func (UnimplementedBillingServiceHandler) ListPlans(context.Context, *connect.Request[billing.ListRequest]) (*connect.Response[billing.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.ListPlans is not implemented"))
}

func (UnimplementedBillingServiceHandler) ListPlansInstances(context.Context, *connect.Request[billing.ListPlansInstancesRequest]) (*connect.Response[billing.ListPlansInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.ListPlansInstances is not implemented"))
}

func (UnimplementedBillingServiceHandler) DeletePlan(context.Context, *connect.Request[billing.Plan]) (*connect.Response[billing.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.DeletePlan is not implemented"))
}

func (UnimplementedBillingServiceHandler) CreateTransaction(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.Transaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.CreateTransaction is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetTransactions(context.Context, *connect.Request[billing.GetTransactionsRequest]) (*connect.Response[billing.Transactions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetTransactions is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetTransactionsCount(context.Context, *connect.Request[billing.GetTransactionsCountRequest]) (*connect.Response[billing.GetTransactionsCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetTransactionsCount is not implemented"))
}

func (UnimplementedBillingServiceHandler) UpdateTransaction(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.UpdateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.UpdateTransaction is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetRecords(context.Context, *connect.Request[billing.Transaction]) (*connect.Response[billing.Records], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetRecords is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetInstancesReports(context.Context, *connect.Request[billing.GetInstancesReportRequest]) (*connect.Response[billing.GetInstancesReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetInstancesReports is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetInstancesReportsCount(context.Context, *connect.Request[billing.GetInstancesReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetInstancesReportsCount is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetRecordsReports(context.Context, *connect.Request[billing.GetRecordsReportsRequest]) (*connect.Response[billing.GetRecordsReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetRecordsReports is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetRecordsReportsCount(context.Context, *connect.Request[billing.GetRecordsReportsCountRequest]) (*connect.Response[billing.GetReportsCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetRecordsReportsCount is not implemented"))
}

func (UnimplementedBillingServiceHandler) Reprocess(context.Context, *connect.Request[billing.ReprocessTransactionsRequest]) (*connect.Response[billing.Transactions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.Reprocess is not implemented"))
}

func (UnimplementedBillingServiceHandler) CreateInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.CreateInvoice is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetInvoice is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetInvoices(context.Context, *connect.Request[billing.GetInvoicesRequest]) (*connect.Response[billing.Invoices], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetInvoices is not implemented"))
}

func (UnimplementedBillingServiceHandler) GetInvoicesCount(context.Context, *connect.Request[billing.GetInvoicesCountRequest]) (*connect.Response[billing.GetInvoicesCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.GetInvoicesCount is not implemented"))
}

func (UnimplementedBillingServiceHandler) UpdateInvoice(context.Context, *connect.Request[billing.Invoice]) (*connect.Response[billing.Invoice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.UpdateInvoice is not implemented"))
}

func (UnimplementedBillingServiceHandler) UpdateInvoiceStatus(context.Context, *connect.Request[billing.UpdateInvoiceStatusRequest]) (*connect.Response[billing.Invoice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.BillingService.UpdateInvoiceStatus is not implemented"))
}

// CurrencyServiceClient is a client for the nocloud.billing.CurrencyService service.
type CurrencyServiceClient interface {
	CreateCurrency(context.Context, *connect.Request[billing.CreateCurrencyRequest]) (*connect.Response[billing.CreateCurrencyResponse], error)
	GetCurrencies(context.Context, *connect.Request[billing.GetCurrenciesRequest]) (*connect.Response[billing.GetCurrenciesResponse], error)
	GetExchangeRate(context.Context, *connect.Request[billing.GetExchangeRateRequest]) (*connect.Response[billing.GetExchangeRateResponse], error)
	GetExchangeRates(context.Context, *connect.Request[billing.GetExchangeRatesRequest]) (*connect.Response[billing.GetExchangeRatesResponse], error)
	CreateExchangeRate(context.Context, *connect.Request[billing.CreateExchangeRateRequest]) (*connect.Response[billing.CreateExchangeRateResponse], error)
	UpdateExchangeRate(context.Context, *connect.Request[billing.UpdateExchangeRateRequest]) (*connect.Response[billing.UpdateExchangeRateResponse], error)
	DeleteExchangeRate(context.Context, *connect.Request[billing.DeleteExchangeRateRequest]) (*connect.Response[billing.DeleteExchangeRateResponse], error)
	Convert(context.Context, *connect.Request[billing.ConversionRequest]) (*connect.Response[billing.ConversionResponse], error)
}

// NewCurrencyServiceClient constructs a client for the nocloud.billing.CurrencyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCurrencyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CurrencyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &currencyServiceClient{
		createCurrency: connect.NewClient[billing.CreateCurrencyRequest, billing.CreateCurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceCreateCurrencyProcedure,
			connect.WithSchema(currencyServiceCreateCurrencyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrencies: connect.NewClient[billing.GetCurrenciesRequest, billing.GetCurrenciesResponse](
			httpClient,
			baseURL+CurrencyServiceGetCurrenciesProcedure,
			connect.WithSchema(currencyServiceGetCurrenciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExchangeRate: connect.NewClient[billing.GetExchangeRateRequest, billing.GetExchangeRateResponse](
			httpClient,
			baseURL+CurrencyServiceGetExchangeRateProcedure,
			connect.WithSchema(currencyServiceGetExchangeRateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExchangeRates: connect.NewClient[billing.GetExchangeRatesRequest, billing.GetExchangeRatesResponse](
			httpClient,
			baseURL+CurrencyServiceGetExchangeRatesProcedure,
			connect.WithSchema(currencyServiceGetExchangeRatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createExchangeRate: connect.NewClient[billing.CreateExchangeRateRequest, billing.CreateExchangeRateResponse](
			httpClient,
			baseURL+CurrencyServiceCreateExchangeRateProcedure,
			connect.WithSchema(currencyServiceCreateExchangeRateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateExchangeRate: connect.NewClient[billing.UpdateExchangeRateRequest, billing.UpdateExchangeRateResponse](
			httpClient,
			baseURL+CurrencyServiceUpdateExchangeRateProcedure,
			connect.WithSchema(currencyServiceUpdateExchangeRateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteExchangeRate: connect.NewClient[billing.DeleteExchangeRateRequest, billing.DeleteExchangeRateResponse](
			httpClient,
			baseURL+CurrencyServiceDeleteExchangeRateProcedure,
			connect.WithSchema(currencyServiceDeleteExchangeRateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		convert: connect.NewClient[billing.ConversionRequest, billing.ConversionResponse](
			httpClient,
			baseURL+CurrencyServiceConvertProcedure,
			connect.WithSchema(currencyServiceConvertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// currencyServiceClient implements CurrencyServiceClient.
type currencyServiceClient struct {
	createCurrency     *connect.Client[billing.CreateCurrencyRequest, billing.CreateCurrencyResponse]
	getCurrencies      *connect.Client[billing.GetCurrenciesRequest, billing.GetCurrenciesResponse]
	getExchangeRate    *connect.Client[billing.GetExchangeRateRequest, billing.GetExchangeRateResponse]
	getExchangeRates   *connect.Client[billing.GetExchangeRatesRequest, billing.GetExchangeRatesResponse]
	createExchangeRate *connect.Client[billing.CreateExchangeRateRequest, billing.CreateExchangeRateResponse]
	updateExchangeRate *connect.Client[billing.UpdateExchangeRateRequest, billing.UpdateExchangeRateResponse]
	deleteExchangeRate *connect.Client[billing.DeleteExchangeRateRequest, billing.DeleteExchangeRateResponse]
	convert            *connect.Client[billing.ConversionRequest, billing.ConversionResponse]
}

// CreateCurrency calls nocloud.billing.CurrencyService.CreateCurrency.
func (c *currencyServiceClient) CreateCurrency(ctx context.Context, req *connect.Request[billing.CreateCurrencyRequest]) (*connect.Response[billing.CreateCurrencyResponse], error) {
	return c.createCurrency.CallUnary(ctx, req)
}

// GetCurrencies calls nocloud.billing.CurrencyService.GetCurrencies.
func (c *currencyServiceClient) GetCurrencies(ctx context.Context, req *connect.Request[billing.GetCurrenciesRequest]) (*connect.Response[billing.GetCurrenciesResponse], error) {
	return c.getCurrencies.CallUnary(ctx, req)
}

// GetExchangeRate calls nocloud.billing.CurrencyService.GetExchangeRate.
func (c *currencyServiceClient) GetExchangeRate(ctx context.Context, req *connect.Request[billing.GetExchangeRateRequest]) (*connect.Response[billing.GetExchangeRateResponse], error) {
	return c.getExchangeRate.CallUnary(ctx, req)
}

// GetExchangeRates calls nocloud.billing.CurrencyService.GetExchangeRates.
func (c *currencyServiceClient) GetExchangeRates(ctx context.Context, req *connect.Request[billing.GetExchangeRatesRequest]) (*connect.Response[billing.GetExchangeRatesResponse], error) {
	return c.getExchangeRates.CallUnary(ctx, req)
}

// CreateExchangeRate calls nocloud.billing.CurrencyService.CreateExchangeRate.
func (c *currencyServiceClient) CreateExchangeRate(ctx context.Context, req *connect.Request[billing.CreateExchangeRateRequest]) (*connect.Response[billing.CreateExchangeRateResponse], error) {
	return c.createExchangeRate.CallUnary(ctx, req)
}

// UpdateExchangeRate calls nocloud.billing.CurrencyService.UpdateExchangeRate.
func (c *currencyServiceClient) UpdateExchangeRate(ctx context.Context, req *connect.Request[billing.UpdateExchangeRateRequest]) (*connect.Response[billing.UpdateExchangeRateResponse], error) {
	return c.updateExchangeRate.CallUnary(ctx, req)
}

// DeleteExchangeRate calls nocloud.billing.CurrencyService.DeleteExchangeRate.
func (c *currencyServiceClient) DeleteExchangeRate(ctx context.Context, req *connect.Request[billing.DeleteExchangeRateRequest]) (*connect.Response[billing.DeleteExchangeRateResponse], error) {
	return c.deleteExchangeRate.CallUnary(ctx, req)
}

// Convert calls nocloud.billing.CurrencyService.Convert.
func (c *currencyServiceClient) Convert(ctx context.Context, req *connect.Request[billing.ConversionRequest]) (*connect.Response[billing.ConversionResponse], error) {
	return c.convert.CallUnary(ctx, req)
}

// CurrencyServiceHandler is an implementation of the nocloud.billing.CurrencyService service.
type CurrencyServiceHandler interface {
	CreateCurrency(context.Context, *connect.Request[billing.CreateCurrencyRequest]) (*connect.Response[billing.CreateCurrencyResponse], error)
	GetCurrencies(context.Context, *connect.Request[billing.GetCurrenciesRequest]) (*connect.Response[billing.GetCurrenciesResponse], error)
	GetExchangeRate(context.Context, *connect.Request[billing.GetExchangeRateRequest]) (*connect.Response[billing.GetExchangeRateResponse], error)
	GetExchangeRates(context.Context, *connect.Request[billing.GetExchangeRatesRequest]) (*connect.Response[billing.GetExchangeRatesResponse], error)
	CreateExchangeRate(context.Context, *connect.Request[billing.CreateExchangeRateRequest]) (*connect.Response[billing.CreateExchangeRateResponse], error)
	UpdateExchangeRate(context.Context, *connect.Request[billing.UpdateExchangeRateRequest]) (*connect.Response[billing.UpdateExchangeRateResponse], error)
	DeleteExchangeRate(context.Context, *connect.Request[billing.DeleteExchangeRateRequest]) (*connect.Response[billing.DeleteExchangeRateResponse], error)
	Convert(context.Context, *connect.Request[billing.ConversionRequest]) (*connect.Response[billing.ConversionResponse], error)
}

// NewCurrencyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCurrencyServiceHandler(svc CurrencyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	currencyServiceCreateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceCreateCurrencyProcedure,
		svc.CreateCurrency,
		connect.WithSchema(currencyServiceCreateCurrencyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceGetCurrenciesHandler := connect.NewUnaryHandler(
		CurrencyServiceGetCurrenciesProcedure,
		svc.GetCurrencies,
		connect.WithSchema(currencyServiceGetCurrenciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceGetExchangeRateHandler := connect.NewUnaryHandler(
		CurrencyServiceGetExchangeRateProcedure,
		svc.GetExchangeRate,
		connect.WithSchema(currencyServiceGetExchangeRateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceGetExchangeRatesHandler := connect.NewUnaryHandler(
		CurrencyServiceGetExchangeRatesProcedure,
		svc.GetExchangeRates,
		connect.WithSchema(currencyServiceGetExchangeRatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceCreateExchangeRateHandler := connect.NewUnaryHandler(
		CurrencyServiceCreateExchangeRateProcedure,
		svc.CreateExchangeRate,
		connect.WithSchema(currencyServiceCreateExchangeRateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceUpdateExchangeRateHandler := connect.NewUnaryHandler(
		CurrencyServiceUpdateExchangeRateProcedure,
		svc.UpdateExchangeRate,
		connect.WithSchema(currencyServiceUpdateExchangeRateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceDeleteExchangeRateHandler := connect.NewUnaryHandler(
		CurrencyServiceDeleteExchangeRateProcedure,
		svc.DeleteExchangeRate,
		connect.WithSchema(currencyServiceDeleteExchangeRateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceConvertHandler := connect.NewUnaryHandler(
		CurrencyServiceConvertProcedure,
		svc.Convert,
		connect.WithSchema(currencyServiceConvertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.billing.CurrencyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CurrencyServiceCreateCurrencyProcedure:
			currencyServiceCreateCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceGetCurrenciesProcedure:
			currencyServiceGetCurrenciesHandler.ServeHTTP(w, r)
		case CurrencyServiceGetExchangeRateProcedure:
			currencyServiceGetExchangeRateHandler.ServeHTTP(w, r)
		case CurrencyServiceGetExchangeRatesProcedure:
			currencyServiceGetExchangeRatesHandler.ServeHTTP(w, r)
		case CurrencyServiceCreateExchangeRateProcedure:
			currencyServiceCreateExchangeRateHandler.ServeHTTP(w, r)
		case CurrencyServiceUpdateExchangeRateProcedure:
			currencyServiceUpdateExchangeRateHandler.ServeHTTP(w, r)
		case CurrencyServiceDeleteExchangeRateProcedure:
			currencyServiceDeleteExchangeRateHandler.ServeHTTP(w, r)
		case CurrencyServiceConvertProcedure:
			currencyServiceConvertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCurrencyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCurrencyServiceHandler struct{}

func (UnimplementedCurrencyServiceHandler) CreateCurrency(context.Context, *connect.Request[billing.CreateCurrencyRequest]) (*connect.Response[billing.CreateCurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.CreateCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) GetCurrencies(context.Context, *connect.Request[billing.GetCurrenciesRequest]) (*connect.Response[billing.GetCurrenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.GetCurrencies is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) GetExchangeRate(context.Context, *connect.Request[billing.GetExchangeRateRequest]) (*connect.Response[billing.GetExchangeRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.GetExchangeRate is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) GetExchangeRates(context.Context, *connect.Request[billing.GetExchangeRatesRequest]) (*connect.Response[billing.GetExchangeRatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.GetExchangeRates is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) CreateExchangeRate(context.Context, *connect.Request[billing.CreateExchangeRateRequest]) (*connect.Response[billing.CreateExchangeRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.CreateExchangeRate is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) UpdateExchangeRate(context.Context, *connect.Request[billing.UpdateExchangeRateRequest]) (*connect.Response[billing.UpdateExchangeRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.UpdateExchangeRate is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) DeleteExchangeRate(context.Context, *connect.Request[billing.DeleteExchangeRateRequest]) (*connect.Response[billing.DeleteExchangeRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.DeleteExchangeRate is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) Convert(context.Context, *connect.Request[billing.ConversionRequest]) (*connect.Response[billing.ConversionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.CurrencyService.Convert is not implemented"))
}

// AddonsServiceClient is a client for the nocloud.billing.AddonsService service.
type AddonsServiceClient interface {
	Create(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
	CreateBulk(context.Context, *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error)
	Update(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
	UpdateBulk(context.Context, *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error)
	Get(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
	List(context.Context, *connect.Request[addons.ListAddonsRequest]) (*connect.Response[addons.ListAddonsResponse], error)
	Count(context.Context, *connect.Request[addons.CountAddonsRequest]) (*connect.Response[addons.CountAddonsResponse], error)
	Delete(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
}

// NewAddonsServiceClient constructs a client for the nocloud.billing.AddonsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddonsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddonsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &addonsServiceClient{
		create: connect.NewClient[addons.Addon, addons.Addon](
			httpClient,
			baseURL+AddonsServiceCreateProcedure,
			connect.WithSchema(addonsServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createBulk: connect.NewClient[addons.BulkAddons, addons.BulkAddons](
			httpClient,
			baseURL+AddonsServiceCreateBulkProcedure,
			connect.WithSchema(addonsServiceCreateBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[addons.Addon, addons.Addon](
			httpClient,
			baseURL+AddonsServiceUpdateProcedure,
			connect.WithSchema(addonsServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBulk: connect.NewClient[addons.BulkAddons, addons.BulkAddons](
			httpClient,
			baseURL+AddonsServiceUpdateBulkProcedure,
			connect.WithSchema(addonsServiceUpdateBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[addons.Addon, addons.Addon](
			httpClient,
			baseURL+AddonsServiceGetProcedure,
			connect.WithSchema(addonsServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[addons.ListAddonsRequest, addons.ListAddonsResponse](
			httpClient,
			baseURL+AddonsServiceListProcedure,
			connect.WithSchema(addonsServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		count: connect.NewClient[addons.CountAddonsRequest, addons.CountAddonsResponse](
			httpClient,
			baseURL+AddonsServiceCountProcedure,
			connect.WithSchema(addonsServiceCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[addons.Addon, addons.Addon](
			httpClient,
			baseURL+AddonsServiceDeleteProcedure,
			connect.WithSchema(addonsServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// addonsServiceClient implements AddonsServiceClient.
type addonsServiceClient struct {
	create     *connect.Client[addons.Addon, addons.Addon]
	createBulk *connect.Client[addons.BulkAddons, addons.BulkAddons]
	update     *connect.Client[addons.Addon, addons.Addon]
	updateBulk *connect.Client[addons.BulkAddons, addons.BulkAddons]
	get        *connect.Client[addons.Addon, addons.Addon]
	list       *connect.Client[addons.ListAddonsRequest, addons.ListAddonsResponse]
	count      *connect.Client[addons.CountAddonsRequest, addons.CountAddonsResponse]
	delete     *connect.Client[addons.Addon, addons.Addon]
}

// Create calls nocloud.billing.AddonsService.Create.
func (c *addonsServiceClient) Create(ctx context.Context, req *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return c.create.CallUnary(ctx, req)
}

// CreateBulk calls nocloud.billing.AddonsService.CreateBulk.
func (c *addonsServiceClient) CreateBulk(ctx context.Context, req *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error) {
	return c.createBulk.CallUnary(ctx, req)
}

// Update calls nocloud.billing.AddonsService.Update.
func (c *addonsServiceClient) Update(ctx context.Context, req *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return c.update.CallUnary(ctx, req)
}

// UpdateBulk calls nocloud.billing.AddonsService.UpdateBulk.
func (c *addonsServiceClient) UpdateBulk(ctx context.Context, req *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error) {
	return c.updateBulk.CallUnary(ctx, req)
}

// Get calls nocloud.billing.AddonsService.Get.
func (c *addonsServiceClient) Get(ctx context.Context, req *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls nocloud.billing.AddonsService.List.
func (c *addonsServiceClient) List(ctx context.Context, req *connect.Request[addons.ListAddonsRequest]) (*connect.Response[addons.ListAddonsResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Count calls nocloud.billing.AddonsService.Count.
func (c *addonsServiceClient) Count(ctx context.Context, req *connect.Request[addons.CountAddonsRequest]) (*connect.Response[addons.CountAddonsResponse], error) {
	return c.count.CallUnary(ctx, req)
}

// Delete calls nocloud.billing.AddonsService.Delete.
func (c *addonsServiceClient) Delete(ctx context.Context, req *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return c.delete.CallUnary(ctx, req)
}

// AddonsServiceHandler is an implementation of the nocloud.billing.AddonsService service.
type AddonsServiceHandler interface {
	Create(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
	CreateBulk(context.Context, *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error)
	Update(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
	UpdateBulk(context.Context, *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error)
	Get(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
	List(context.Context, *connect.Request[addons.ListAddonsRequest]) (*connect.Response[addons.ListAddonsResponse], error)
	Count(context.Context, *connect.Request[addons.CountAddonsRequest]) (*connect.Response[addons.CountAddonsResponse], error)
	Delete(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error)
}

// NewAddonsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddonsServiceHandler(svc AddonsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addonsServiceCreateHandler := connect.NewUnaryHandler(
		AddonsServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(addonsServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceCreateBulkHandler := connect.NewUnaryHandler(
		AddonsServiceCreateBulkProcedure,
		svc.CreateBulk,
		connect.WithSchema(addonsServiceCreateBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceUpdateHandler := connect.NewUnaryHandler(
		AddonsServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(addonsServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceUpdateBulkHandler := connect.NewUnaryHandler(
		AddonsServiceUpdateBulkProcedure,
		svc.UpdateBulk,
		connect.WithSchema(addonsServiceUpdateBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceGetHandler := connect.NewUnaryHandler(
		AddonsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(addonsServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceListHandler := connect.NewUnaryHandler(
		AddonsServiceListProcedure,
		svc.List,
		connect.WithSchema(addonsServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceCountHandler := connect.NewUnaryHandler(
		AddonsServiceCountProcedure,
		svc.Count,
		connect.WithSchema(addonsServiceCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	addonsServiceDeleteHandler := connect.NewUnaryHandler(
		AddonsServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(addonsServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.billing.AddonsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddonsServiceCreateProcedure:
			addonsServiceCreateHandler.ServeHTTP(w, r)
		case AddonsServiceCreateBulkProcedure:
			addonsServiceCreateBulkHandler.ServeHTTP(w, r)
		case AddonsServiceUpdateProcedure:
			addonsServiceUpdateHandler.ServeHTTP(w, r)
		case AddonsServiceUpdateBulkProcedure:
			addonsServiceUpdateBulkHandler.ServeHTTP(w, r)
		case AddonsServiceGetProcedure:
			addonsServiceGetHandler.ServeHTTP(w, r)
		case AddonsServiceListProcedure:
			addonsServiceListHandler.ServeHTTP(w, r)
		case AddonsServiceCountProcedure:
			addonsServiceCountHandler.ServeHTTP(w, r)
		case AddonsServiceDeleteProcedure:
			addonsServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddonsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAddonsServiceHandler struct{}

func (UnimplementedAddonsServiceHandler) Create(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.Create is not implemented"))
}

func (UnimplementedAddonsServiceHandler) CreateBulk(context.Context, *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.CreateBulk is not implemented"))
}

func (UnimplementedAddonsServiceHandler) Update(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.Update is not implemented"))
}

func (UnimplementedAddonsServiceHandler) UpdateBulk(context.Context, *connect.Request[addons.BulkAddons]) (*connect.Response[addons.BulkAddons], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.UpdateBulk is not implemented"))
}

func (UnimplementedAddonsServiceHandler) Get(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.Get is not implemented"))
}

func (UnimplementedAddonsServiceHandler) List(context.Context, *connect.Request[addons.ListAddonsRequest]) (*connect.Response[addons.ListAddonsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.List is not implemented"))
}

func (UnimplementedAddonsServiceHandler) Count(context.Context, *connect.Request[addons.CountAddonsRequest]) (*connect.Response[addons.CountAddonsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.Count is not implemented"))
}

func (UnimplementedAddonsServiceHandler) Delete(context.Context, *connect.Request[addons.Addon]) (*connect.Response[addons.Addon], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.AddonsService.Delete is not implemented"))
}

// DescriptionsServiceClient is a client for the nocloud.billing.DescriptionsService service.
type DescriptionsServiceClient interface {
	Create(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
	Update(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
	Get(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
	List(context.Context, *connect.Request[descriptions.ListDescriptionsRequest]) (*connect.Response[descriptions.ListDescriptionsResponse], error)
	Count(context.Context, *connect.Request[descriptions.CountDescriptionsRequest]) (*connect.Response[descriptions.CountDescriptionsResponse], error)
	Delete(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
}

// NewDescriptionsServiceClient constructs a client for the nocloud.billing.DescriptionsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDescriptionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DescriptionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &descriptionsServiceClient{
		create: connect.NewClient[descriptions.Description, descriptions.Description](
			httpClient,
			baseURL+DescriptionsServiceCreateProcedure,
			connect.WithSchema(descriptionsServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[descriptions.Description, descriptions.Description](
			httpClient,
			baseURL+DescriptionsServiceUpdateProcedure,
			connect.WithSchema(descriptionsServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[descriptions.Description, descriptions.Description](
			httpClient,
			baseURL+DescriptionsServiceGetProcedure,
			connect.WithSchema(descriptionsServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[descriptions.ListDescriptionsRequest, descriptions.ListDescriptionsResponse](
			httpClient,
			baseURL+DescriptionsServiceListProcedure,
			connect.WithSchema(descriptionsServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		count: connect.NewClient[descriptions.CountDescriptionsRequest, descriptions.CountDescriptionsResponse](
			httpClient,
			baseURL+DescriptionsServiceCountProcedure,
			connect.WithSchema(descriptionsServiceCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[descriptions.Description, descriptions.Description](
			httpClient,
			baseURL+DescriptionsServiceDeleteProcedure,
			connect.WithSchema(descriptionsServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// descriptionsServiceClient implements DescriptionsServiceClient.
type descriptionsServiceClient struct {
	create *connect.Client[descriptions.Description, descriptions.Description]
	update *connect.Client[descriptions.Description, descriptions.Description]
	get    *connect.Client[descriptions.Description, descriptions.Description]
	list   *connect.Client[descriptions.ListDescriptionsRequest, descriptions.ListDescriptionsResponse]
	count  *connect.Client[descriptions.CountDescriptionsRequest, descriptions.CountDescriptionsResponse]
	delete *connect.Client[descriptions.Description, descriptions.Description]
}

// Create calls nocloud.billing.DescriptionsService.Create.
func (c *descriptionsServiceClient) Create(ctx context.Context, req *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls nocloud.billing.DescriptionsService.Update.
func (c *descriptionsServiceClient) Update(ctx context.Context, req *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls nocloud.billing.DescriptionsService.Get.
func (c *descriptionsServiceClient) Get(ctx context.Context, req *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls nocloud.billing.DescriptionsService.List.
func (c *descriptionsServiceClient) List(ctx context.Context, req *connect.Request[descriptions.ListDescriptionsRequest]) (*connect.Response[descriptions.ListDescriptionsResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Count calls nocloud.billing.DescriptionsService.Count.
func (c *descriptionsServiceClient) Count(ctx context.Context, req *connect.Request[descriptions.CountDescriptionsRequest]) (*connect.Response[descriptions.CountDescriptionsResponse], error) {
	return c.count.CallUnary(ctx, req)
}

// Delete calls nocloud.billing.DescriptionsService.Delete.
func (c *descriptionsServiceClient) Delete(ctx context.Context, req *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return c.delete.CallUnary(ctx, req)
}

// DescriptionsServiceHandler is an implementation of the nocloud.billing.DescriptionsService
// service.
type DescriptionsServiceHandler interface {
	Create(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
	Update(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
	Get(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
	List(context.Context, *connect.Request[descriptions.ListDescriptionsRequest]) (*connect.Response[descriptions.ListDescriptionsResponse], error)
	Count(context.Context, *connect.Request[descriptions.CountDescriptionsRequest]) (*connect.Response[descriptions.CountDescriptionsResponse], error)
	Delete(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error)
}

// NewDescriptionsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDescriptionsServiceHandler(svc DescriptionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	descriptionsServiceCreateHandler := connect.NewUnaryHandler(
		DescriptionsServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(descriptionsServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	descriptionsServiceUpdateHandler := connect.NewUnaryHandler(
		DescriptionsServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(descriptionsServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	descriptionsServiceGetHandler := connect.NewUnaryHandler(
		DescriptionsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(descriptionsServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	descriptionsServiceListHandler := connect.NewUnaryHandler(
		DescriptionsServiceListProcedure,
		svc.List,
		connect.WithSchema(descriptionsServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	descriptionsServiceCountHandler := connect.NewUnaryHandler(
		DescriptionsServiceCountProcedure,
		svc.Count,
		connect.WithSchema(descriptionsServiceCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	descriptionsServiceDeleteHandler := connect.NewUnaryHandler(
		DescriptionsServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(descriptionsServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.billing.DescriptionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DescriptionsServiceCreateProcedure:
			descriptionsServiceCreateHandler.ServeHTTP(w, r)
		case DescriptionsServiceUpdateProcedure:
			descriptionsServiceUpdateHandler.ServeHTTP(w, r)
		case DescriptionsServiceGetProcedure:
			descriptionsServiceGetHandler.ServeHTTP(w, r)
		case DescriptionsServiceListProcedure:
			descriptionsServiceListHandler.ServeHTTP(w, r)
		case DescriptionsServiceCountProcedure:
			descriptionsServiceCountHandler.ServeHTTP(w, r)
		case DescriptionsServiceDeleteProcedure:
			descriptionsServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDescriptionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDescriptionsServiceHandler struct{}

func (UnimplementedDescriptionsServiceHandler) Create(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.DescriptionsService.Create is not implemented"))
}

func (UnimplementedDescriptionsServiceHandler) Update(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.DescriptionsService.Update is not implemented"))
}

func (UnimplementedDescriptionsServiceHandler) Get(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.DescriptionsService.Get is not implemented"))
}

func (UnimplementedDescriptionsServiceHandler) List(context.Context, *connect.Request[descriptions.ListDescriptionsRequest]) (*connect.Response[descriptions.ListDescriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.DescriptionsService.List is not implemented"))
}

func (UnimplementedDescriptionsServiceHandler) Count(context.Context, *connect.Request[descriptions.CountDescriptionsRequest]) (*connect.Response[descriptions.CountDescriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.DescriptionsService.Count is not implemented"))
}

func (UnimplementedDescriptionsServiceHandler) Delete(context.Context, *connect.Request[descriptions.Description]) (*connect.Response[descriptions.Description], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.billing.DescriptionsService.Delete is not implemented"))
}
