//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: billing/billing.proto

package billing

import (
	context "context"
	addons "github.com/slntopp/nocloud-proto/billing/addons"
	descriptions "github.com/slntopp/nocloud-proto/billing/descriptions"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordsService_GetActive_FullMethodName = "/nocloud.billing.RecordsService/GetActive"
	RecordsService_Create_FullMethodName    = "/nocloud.billing.RecordsService/Create"
	RecordsService_Update_FullMethodName    = "/nocloud.billing.RecordsService/Update"
)

// RecordsServiceClient is the client API for RecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordsServiceClient interface {
	GetActive(ctx context.Context, in *GetActiveRequest, opts ...grpc.CallOption) (*Records, error)
	Create(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error)
	Update(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error)
}

type recordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordsServiceClient(cc grpc.ClientConnInterface) RecordsServiceClient {
	return &recordsServiceClient{cc}
}

func (c *recordsServiceClient) GetActive(ctx context.Context, in *GetActiveRequest, opts ...grpc.CallOption) (*Records, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Records)
	err := c.cc.Invoke(ctx, RecordsService_GetActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordsServiceClient) Create(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Records)
	err := c.cc.Invoke(ctx, RecordsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordsServiceClient) Update(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Records)
	err := c.cc.Invoke(ctx, RecordsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordsServiceServer is the server API for RecordsService service.
// All implementations must embed UnimplementedRecordsServiceServer
// for forward compatibility.
type RecordsServiceServer interface {
	GetActive(context.Context, *GetActiveRequest) (*Records, error)
	Create(context.Context, *Records) (*Records, error)
	Update(context.Context, *Records) (*Records, error)
	mustEmbedUnimplementedRecordsServiceServer()
}

// UnimplementedRecordsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordsServiceServer struct{}

func (UnimplementedRecordsServiceServer) GetActive(context.Context, *GetActiveRequest) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActive not implemented")
}
func (UnimplementedRecordsServiceServer) Create(context.Context, *Records) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRecordsServiceServer) Update(context.Context, *Records) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRecordsServiceServer) mustEmbedUnimplementedRecordsServiceServer() {}
func (UnimplementedRecordsServiceServer) testEmbeddedByValue()                        {}

// UnsafeRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordsServiceServer will
// result in compilation errors.
type UnsafeRecordsServiceServer interface {
	mustEmbedUnimplementedRecordsServiceServer()
}

func RegisterRecordsServiceServer(s grpc.ServiceRegistrar, srv RecordsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordsService_ServiceDesc, srv)
}

func _RecordsService_GetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServiceServer).GetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordsService_GetActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServiceServer).GetActive(ctx, req.(*GetActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServiceServer).Create(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServiceServer).Update(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordsService_ServiceDesc is the grpc.ServiceDesc for RecordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.billing.RecordsService",
	HandlerType: (*RecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActive",
			Handler:    _RecordsService_GetActive_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RecordsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RecordsService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing.proto",
}

const (
	BillingService_CreatePlan_FullMethodName                        = "/nocloud.billing.BillingService/CreatePlan"
	BillingService_UpdatePlan_FullMethodName                        = "/nocloud.billing.BillingService/UpdatePlan"
	BillingService_GetPlan_FullMethodName                           = "/nocloud.billing.BillingService/GetPlan"
	BillingService_ListPlans_FullMethodName                         = "/nocloud.billing.BillingService/ListPlans"
	BillingService_ListPlansInstances_FullMethodName                = "/nocloud.billing.BillingService/ListPlansInstances"
	BillingService_PlansUnique_FullMethodName                       = "/nocloud.billing.BillingService/PlansUnique"
	BillingService_DeletePlan_FullMethodName                        = "/nocloud.billing.BillingService/DeletePlan"
	BillingService_CreateTransaction_FullMethodName                 = "/nocloud.billing.BillingService/CreateTransaction"
	BillingService_GetTransactions_FullMethodName                   = "/nocloud.billing.BillingService/GetTransactions"
	BillingService_GetTransactionsCount_FullMethodName              = "/nocloud.billing.BillingService/GetTransactionsCount"
	BillingService_UpdateTransaction_FullMethodName                 = "/nocloud.billing.BillingService/UpdateTransaction"
	BillingService_GetRecords_FullMethodName                        = "/nocloud.billing.BillingService/GetRecords"
	BillingService_GetInstancesReports_FullMethodName               = "/nocloud.billing.BillingService/GetInstancesReports"
	BillingService_GetInstancesReportsCount_FullMethodName          = "/nocloud.billing.BillingService/GetInstancesReportsCount"
	BillingService_GetRecordsReports_FullMethodName                 = "/nocloud.billing.BillingService/GetRecordsReports"
	BillingService_GetRecordsReportsCount_FullMethodName            = "/nocloud.billing.BillingService/GetRecordsReportsCount"
	BillingService_Reprocess_FullMethodName                         = "/nocloud.billing.BillingService/Reprocess"
	BillingService_CreateInvoice_FullMethodName                     = "/nocloud.billing.BillingService/CreateInvoice"
	BillingService_GetInvoice_FullMethodName                        = "/nocloud.billing.BillingService/GetInvoice"
	BillingService_GetInvoices_FullMethodName                       = "/nocloud.billing.BillingService/GetInvoices"
	BillingService_GetInvoicesCount_FullMethodName                  = "/nocloud.billing.BillingService/GetInvoicesCount"
	BillingService_UpdateInvoice_FullMethodName                     = "/nocloud.billing.BillingService/UpdateInvoice"
	BillingService_Pay_FullMethodName                               = "/nocloud.billing.BillingService/Pay"
	BillingService_UpdateInvoiceStatus_FullMethodName               = "/nocloud.billing.BillingService/UpdateInvoiceStatus"
	BillingService_GetInvoiceSettingsTemplateExample_FullMethodName = "/nocloud.billing.BillingService/GetInvoiceSettingsTemplateExample"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	CreatePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error)
	UpdatePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error)
	GetPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error)
	ListPlans(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListPlansInstances(ctx context.Context, in *ListPlansInstancesRequest, opts ...grpc.CallOption) (*ListPlansInstancesResponse, error)
	PlansUnique(ctx context.Context, in *PlansUniqueRequest, opts ...grpc.CallOption) (*PlansUniqueResponse, error)
	DeletePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error)
	CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*Transactions, error)
	GetTransactionsCount(ctx context.Context, in *GetTransactionsCountRequest, opts ...grpc.CallOption) (*GetTransactionsCountResponse, error)
	UpdateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	GetRecords(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Records, error)
	GetInstancesReports(ctx context.Context, in *GetInstancesReportRequest, opts ...grpc.CallOption) (*GetInstancesReportResponse, error)
	GetInstancesReportsCount(ctx context.Context, in *GetInstancesReportsCountRequest, opts ...grpc.CallOption) (*GetReportsCountResponse, error)
	GetRecordsReports(ctx context.Context, in *GetRecordsReportsRequest, opts ...grpc.CallOption) (*GetRecordsReportsResponse, error)
	GetRecordsReportsCount(ctx context.Context, in *GetRecordsReportsCountRequest, opts ...grpc.CallOption) (*GetReportsCountResponse, error)
	Reprocess(ctx context.Context, in *ReprocessTransactionsRequest, opts ...grpc.CallOption) (*Transactions, error)
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error)
	GetInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error)
	GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*Invoices, error)
	GetInvoicesCount(ctx context.Context, in *GetInvoicesCountRequest, opts ...grpc.CallOption) (*GetInvoicesCountResponse, error)
	UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error)
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error)
	UpdateInvoiceStatus(ctx context.Context, in *UpdateInvoiceStatusRequest, opts ...grpc.CallOption) (*Invoice, error)
	GetInvoiceSettingsTemplateExample(ctx context.Context, in *GetInvoiceSettingsTemplateExampleRequest, opts ...grpc.CallOption) (*GetInvoiceSettingsTemplateExampleResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) CreatePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, BillingService_CreatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdatePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, BillingService_UpdatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, BillingService_GetPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPlans(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, BillingService_ListPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPlansInstances(ctx context.Context, in *ListPlansInstancesRequest, opts ...grpc.CallOption) (*ListPlansInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlansInstancesResponse)
	err := c.cc.Invoke(ctx, BillingService_ListPlansInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) PlansUnique(ctx context.Context, in *PlansUniqueRequest, opts ...grpc.CallOption) (*PlansUniqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlansUniqueResponse)
	err := c.cc.Invoke(ctx, BillingService_PlansUnique_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeletePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, BillingService_DeletePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, BillingService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*Transactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactions)
	err := c.cc.Invoke(ctx, BillingService_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetTransactionsCount(ctx context.Context, in *GetTransactionsCountRequest, opts ...grpc.CallOption) (*GetTransactionsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsCountResponse)
	err := c.cc.Invoke(ctx, BillingService_GetTransactionsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransactionResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetRecords(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Records, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Records)
	err := c.cc.Invoke(ctx, BillingService_GetRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInstancesReports(ctx context.Context, in *GetInstancesReportRequest, opts ...grpc.CallOption) (*GetInstancesReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInstancesReportResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInstancesReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInstancesReportsCount(ctx context.Context, in *GetInstancesReportsCountRequest, opts ...grpc.CallOption) (*GetReportsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportsCountResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInstancesReportsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetRecordsReports(ctx context.Context, in *GetRecordsReportsRequest, opts ...grpc.CallOption) (*GetRecordsReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordsReportsResponse)
	err := c.cc.Invoke(ctx, BillingService_GetRecordsReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetRecordsReportsCount(ctx context.Context, in *GetRecordsReportsCountRequest, opts ...grpc.CallOption) (*GetReportsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportsCountResponse)
	err := c.cc.Invoke(ctx, BillingService_GetRecordsReportsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) Reprocess(ctx context.Context, in *ReprocessTransactionsRequest, opts ...grpc.CallOption) (*Transactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactions)
	err := c.cc.Invoke(ctx, BillingService_Reprocess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, BillingService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, BillingService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*Invoices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoices)
	err := c.cc.Invoke(ctx, BillingService_GetInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicesCount(ctx context.Context, in *GetInvoicesCountRequest, opts ...grpc.CallOption) (*GetInvoicesCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoicesCountResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInvoicesCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, BillingService_UpdateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayResponse)
	err := c.cc.Invoke(ctx, BillingService_Pay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateInvoiceStatus(ctx context.Context, in *UpdateInvoiceStatusRequest, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, BillingService_UpdateInvoiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoiceSettingsTemplateExample(ctx context.Context, in *GetInvoiceSettingsTemplateExampleRequest, opts ...grpc.CallOption) (*GetInvoiceSettingsTemplateExampleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceSettingsTemplateExampleResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInvoiceSettingsTemplateExample_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility.
type BillingServiceServer interface {
	CreatePlan(context.Context, *Plan) (*Plan, error)
	UpdatePlan(context.Context, *Plan) (*Plan, error)
	GetPlan(context.Context, *Plan) (*Plan, error)
	ListPlans(context.Context, *ListRequest) (*ListResponse, error)
	ListPlansInstances(context.Context, *ListPlansInstancesRequest) (*ListPlansInstancesResponse, error)
	PlansUnique(context.Context, *PlansUniqueRequest) (*PlansUniqueResponse, error)
	DeletePlan(context.Context, *Plan) (*Plan, error)
	CreateTransaction(context.Context, *Transaction) (*Transaction, error)
	GetTransactions(context.Context, *GetTransactionsRequest) (*Transactions, error)
	GetTransactionsCount(context.Context, *GetTransactionsCountRequest) (*GetTransactionsCountResponse, error)
	UpdateTransaction(context.Context, *Transaction) (*UpdateTransactionResponse, error)
	GetRecords(context.Context, *Transaction) (*Records, error)
	GetInstancesReports(context.Context, *GetInstancesReportRequest) (*GetInstancesReportResponse, error)
	GetInstancesReportsCount(context.Context, *GetInstancesReportsCountRequest) (*GetReportsCountResponse, error)
	GetRecordsReports(context.Context, *GetRecordsReportsRequest) (*GetRecordsReportsResponse, error)
	GetRecordsReportsCount(context.Context, *GetRecordsReportsCountRequest) (*GetReportsCountResponse, error)
	Reprocess(context.Context, *ReprocessTransactionsRequest) (*Transactions, error)
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*Invoice, error)
	GetInvoice(context.Context, *Invoice) (*Invoice, error)
	GetInvoices(context.Context, *GetInvoicesRequest) (*Invoices, error)
	GetInvoicesCount(context.Context, *GetInvoicesCountRequest) (*GetInvoicesCountResponse, error)
	UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*Invoice, error)
	Pay(context.Context, *PayRequest) (*PayResponse, error)
	UpdateInvoiceStatus(context.Context, *UpdateInvoiceStatusRequest) (*Invoice, error)
	GetInvoiceSettingsTemplateExample(context.Context, *GetInvoiceSettingsTemplateExampleRequest) (*GetInvoiceSettingsTemplateExampleResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBillingServiceServer struct{}

func (UnimplementedBillingServiceServer) CreatePlan(context.Context, *Plan) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedBillingServiceServer) UpdatePlan(context.Context, *Plan) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedBillingServiceServer) GetPlan(context.Context, *Plan) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedBillingServiceServer) ListPlans(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedBillingServiceServer) ListPlansInstances(context.Context, *ListPlansInstancesRequest) (*ListPlansInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlansInstances not implemented")
}
func (UnimplementedBillingServiceServer) PlansUnique(context.Context, *PlansUniqueRequest) (*PlansUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlansUnique not implemented")
}
func (UnimplementedBillingServiceServer) DeletePlan(context.Context, *Plan) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (UnimplementedBillingServiceServer) CreateTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedBillingServiceServer) GetTransactions(context.Context, *GetTransactionsRequest) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedBillingServiceServer) GetTransactionsCount(context.Context, *GetTransactionsCountRequest) (*GetTransactionsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsCount not implemented")
}
func (UnimplementedBillingServiceServer) UpdateTransaction(context.Context, *Transaction) (*UpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedBillingServiceServer) GetRecords(context.Context, *Transaction) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedBillingServiceServer) GetInstancesReports(context.Context, *GetInstancesReportRequest) (*GetInstancesReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstancesReports not implemented")
}
func (UnimplementedBillingServiceServer) GetInstancesReportsCount(context.Context, *GetInstancesReportsCountRequest) (*GetReportsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstancesReportsCount not implemented")
}
func (UnimplementedBillingServiceServer) GetRecordsReports(context.Context, *GetRecordsReportsRequest) (*GetRecordsReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordsReports not implemented")
}
func (UnimplementedBillingServiceServer) GetRecordsReportsCount(context.Context, *GetRecordsReportsCountRequest) (*GetReportsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordsReportsCount not implemented")
}
func (UnimplementedBillingServiceServer) Reprocess(context.Context, *ReprocessTransactionsRequest) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reprocess not implemented")
}
func (UnimplementedBillingServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoice(context.Context, *Invoice) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoices(context.Context, *GetInvoicesRequest) (*Invoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoices not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicesCount(context.Context, *GetInvoicesCountRequest) (*GetInvoicesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicesCount not implemented")
}
func (UnimplementedBillingServiceServer) UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) Pay(context.Context, *PayRequest) (*PayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedBillingServiceServer) UpdateInvoiceStatus(context.Context, *UpdateInvoiceStatusRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoiceStatus not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoiceSettingsTemplateExample(context.Context, *GetInvoiceSettingsTemplateExampleRequest) (*GetInvoiceSettingsTemplateExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceSettingsTemplateExample not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}
func (UnimplementedBillingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBillingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreatePlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdatePlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPlans(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPlansInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPlansInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListPlansInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPlansInstances(ctx, req.(*ListPlansInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_PlansUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlansUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).PlansUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_PlansUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).PlansUnique(ctx, req.(*PlansUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeletePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeletePlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetTransactionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetTransactionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetTransactionsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetTransactionsCount(ctx, req.(*GetTransactionsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetRecords(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInstancesReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInstancesReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInstancesReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInstancesReports(ctx, req.(*GetInstancesReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInstancesReportsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesReportsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInstancesReportsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInstancesReportsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInstancesReportsCount(ctx, req.(*GetInstancesReportsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetRecordsReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetRecordsReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetRecordsReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetRecordsReports(ctx, req.(*GetRecordsReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetRecordsReportsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsReportsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetRecordsReportsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetRecordsReportsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetRecordsReportsCount(ctx, req.(*GetRecordsReportsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_Reprocess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReprocessTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).Reprocess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_Reprocess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).Reprocess(ctx, req.(*ReprocessTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoices(ctx, req.(*GetInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoicesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicesCount(ctx, req.(*GetInvoicesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateInvoiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateInvoiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateInvoiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateInvoiceStatus(ctx, req.(*UpdateInvoiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoiceSettingsTemplateExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceSettingsTemplateExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoiceSettingsTemplateExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoiceSettingsTemplateExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoiceSettingsTemplateExample(ctx, req.(*GetInvoiceSettingsTemplateExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.billing.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _BillingService_CreatePlan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _BillingService_UpdatePlan_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _BillingService_GetPlan_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _BillingService_ListPlans_Handler,
		},
		{
			MethodName: "ListPlansInstances",
			Handler:    _BillingService_ListPlansInstances_Handler,
		},
		{
			MethodName: "PlansUnique",
			Handler:    _BillingService_PlansUnique_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _BillingService_DeletePlan_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _BillingService_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _BillingService_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransactionsCount",
			Handler:    _BillingService_GetTransactionsCount_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _BillingService_UpdateTransaction_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _BillingService_GetRecords_Handler,
		},
		{
			MethodName: "GetInstancesReports",
			Handler:    _BillingService_GetInstancesReports_Handler,
		},
		{
			MethodName: "GetInstancesReportsCount",
			Handler:    _BillingService_GetInstancesReportsCount_Handler,
		},
		{
			MethodName: "GetRecordsReports",
			Handler:    _BillingService_GetRecordsReports_Handler,
		},
		{
			MethodName: "GetRecordsReportsCount",
			Handler:    _BillingService_GetRecordsReportsCount_Handler,
		},
		{
			MethodName: "Reprocess",
			Handler:    _BillingService_Reprocess_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _BillingService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _BillingService_GetInvoice_Handler,
		},
		{
			MethodName: "GetInvoices",
			Handler:    _BillingService_GetInvoices_Handler,
		},
		{
			MethodName: "GetInvoicesCount",
			Handler:    _BillingService_GetInvoicesCount_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _BillingService_UpdateInvoice_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _BillingService_Pay_Handler,
		},
		{
			MethodName: "UpdateInvoiceStatus",
			Handler:    _BillingService_UpdateInvoiceStatus_Handler,
		},
		{
			MethodName: "GetInvoiceSettingsTemplateExample",
			Handler:    _BillingService_GetInvoiceSettingsTemplateExample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing.proto",
}

const (
	CurrencyService_CreateCurrency_FullMethodName     = "/nocloud.billing.CurrencyService/CreateCurrency"
	CurrencyService_GetCurrencies_FullMethodName      = "/nocloud.billing.CurrencyService/GetCurrencies"
	CurrencyService_GetExchangeRate_FullMethodName    = "/nocloud.billing.CurrencyService/GetExchangeRate"
	CurrencyService_GetExchangeRates_FullMethodName   = "/nocloud.billing.CurrencyService/GetExchangeRates"
	CurrencyService_CreateExchangeRate_FullMethodName = "/nocloud.billing.CurrencyService/CreateExchangeRate"
	CurrencyService_UpdateExchangeRate_FullMethodName = "/nocloud.billing.CurrencyService/UpdateExchangeRate"
	CurrencyService_DeleteExchangeRate_FullMethodName = "/nocloud.billing.CurrencyService/DeleteExchangeRate"
	CurrencyService_Convert_FullMethodName            = "/nocloud.billing.CurrencyService/Convert"
)

// CurrencyServiceClient is the client API for CurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyServiceClient interface {
	CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CreateCurrencyResponse, error)
	GetCurrencies(ctx context.Context, in *GetCurrenciesRequest, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
	GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error)
	GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error)
	CreateExchangeRate(ctx context.Context, in *CreateExchangeRateRequest, opts ...grpc.CallOption) (*CreateExchangeRateResponse, error)
	UpdateExchangeRate(ctx context.Context, in *UpdateExchangeRateRequest, opts ...grpc.CallOption) (*UpdateExchangeRateResponse, error)
	DeleteExchangeRate(ctx context.Context, in *DeleteExchangeRateRequest, opts ...grpc.CallOption) (*DeleteExchangeRateResponse, error)
	Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error)
}

type currencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyServiceClient(cc grpc.ClientConnInterface) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CreateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCurrencyResponse)
	err := c.cc.Invoke(ctx, CurrencyService_CreateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetCurrencies(ctx context.Context, in *GetCurrenciesRequest, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExchangeRateResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExchangeRatesResponse)
	err := c.cc.Invoke(ctx, CurrencyService_GetExchangeRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) CreateExchangeRate(ctx context.Context, in *CreateExchangeRateRequest, opts ...grpc.CallOption) (*CreateExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExchangeRateResponse)
	err := c.cc.Invoke(ctx, CurrencyService_CreateExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) UpdateExchangeRate(ctx context.Context, in *UpdateExchangeRateRequest, opts ...grpc.CallOption) (*UpdateExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExchangeRateResponse)
	err := c.cc.Invoke(ctx, CurrencyService_UpdateExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) DeleteExchangeRate(ctx context.Context, in *DeleteExchangeRateRequest, opts ...grpc.CallOption) (*DeleteExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExchangeRateResponse)
	err := c.cc.Invoke(ctx, CurrencyService_DeleteExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) Convert(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConversionResponse)
	err := c.cc.Invoke(ctx, CurrencyService_Convert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServiceServer is the server API for CurrencyService service.
// All implementations must embed UnimplementedCurrencyServiceServer
// for forward compatibility.
type CurrencyServiceServer interface {
	CreateCurrency(context.Context, *CreateCurrencyRequest) (*CreateCurrencyResponse, error)
	GetCurrencies(context.Context, *GetCurrenciesRequest) (*GetCurrenciesResponse, error)
	GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error)
	GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error)
	CreateExchangeRate(context.Context, *CreateExchangeRateRequest) (*CreateExchangeRateResponse, error)
	UpdateExchangeRate(context.Context, *UpdateExchangeRateRequest) (*UpdateExchangeRateResponse, error)
	DeleteExchangeRate(context.Context, *DeleteExchangeRateRequest) (*DeleteExchangeRateResponse, error)
	Convert(context.Context, *ConversionRequest) (*ConversionResponse, error)
	mustEmbedUnimplementedCurrencyServiceServer()
}

// UnimplementedCurrencyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCurrencyServiceServer struct{}

func (UnimplementedCurrencyServiceServer) CreateCurrency(context.Context, *CreateCurrencyRequest) (*CreateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) GetCurrencies(context.Context, *GetCurrenciesRequest) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedCurrencyServiceServer) GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (UnimplementedCurrencyServiceServer) GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRates not implemented")
}
func (UnimplementedCurrencyServiceServer) CreateExchangeRate(context.Context, *CreateExchangeRateRequest) (*CreateExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangeRate not implemented")
}
func (UnimplementedCurrencyServiceServer) UpdateExchangeRate(context.Context, *UpdateExchangeRateRequest) (*UpdateExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchangeRate not implemented")
}
func (UnimplementedCurrencyServiceServer) DeleteExchangeRate(context.Context, *DeleteExchangeRateRequest) (*DeleteExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchangeRate not implemented")
}
func (UnimplementedCurrencyServiceServer) Convert(context.Context, *ConversionRequest) (*ConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {}
func (UnimplementedCurrencyServiceServer) testEmbeddedByValue()                         {}

// UnsafeCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServiceServer will
// result in compilation errors.
type UnsafeCurrencyServiceServer interface {
	mustEmbedUnimplementedCurrencyServiceServer()
}

func RegisterCurrencyServiceServer(s grpc.ServiceRegistrar, srv CurrencyServiceServer) {
	// If the following call pancis, it indicates UnimplementedCurrencyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CurrencyService_ServiceDesc, srv)
}

func _CurrencyService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_CreateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).CreateCurrency(ctx, req.(*CreateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetCurrencies(ctx, req.(*GetCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetExchangeRate(ctx, req.(*GetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_GetExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetExchangeRates(ctx, req.(*GetExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_CreateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).CreateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_CreateExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).CreateExchangeRate(ctx, req.(*CreateExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_UpdateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).UpdateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_UpdateExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).UpdateExchangeRate(ctx, req.(*UpdateExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_DeleteExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).DeleteExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_DeleteExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).DeleteExchangeRate(ctx, req.(*DeleteExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyService_Convert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).Convert(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyService_ServiceDesc is the grpc.ServiceDesc for CurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.billing.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurrency",
			Handler:    _CurrencyService_CreateCurrency_Handler,
		},
		{
			MethodName: "GetCurrencies",
			Handler:    _CurrencyService_GetCurrencies_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _CurrencyService_GetExchangeRate_Handler,
		},
		{
			MethodName: "GetExchangeRates",
			Handler:    _CurrencyService_GetExchangeRates_Handler,
		},
		{
			MethodName: "CreateExchangeRate",
			Handler:    _CurrencyService_CreateExchangeRate_Handler,
		},
		{
			MethodName: "UpdateExchangeRate",
			Handler:    _CurrencyService_UpdateExchangeRate_Handler,
		},
		{
			MethodName: "DeleteExchangeRate",
			Handler:    _CurrencyService_DeleteExchangeRate_Handler,
		},
		{
			MethodName: "Convert",
			Handler:    _CurrencyService_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing.proto",
}

const (
	AddonsService_Create_FullMethodName     = "/nocloud.billing.AddonsService/Create"
	AddonsService_CreateBulk_FullMethodName = "/nocloud.billing.AddonsService/CreateBulk"
	AddonsService_Update_FullMethodName     = "/nocloud.billing.AddonsService/Update"
	AddonsService_UpdateBulk_FullMethodName = "/nocloud.billing.AddonsService/UpdateBulk"
	AddonsService_Get_FullMethodName        = "/nocloud.billing.AddonsService/Get"
	AddonsService_List_FullMethodName       = "/nocloud.billing.AddonsService/List"
	AddonsService_Count_FullMethodName      = "/nocloud.billing.AddonsService/Count"
	AddonsService_Delete_FullMethodName     = "/nocloud.billing.AddonsService/Delete"
)

// AddonsServiceClient is the client API for AddonsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddonsServiceClient interface {
	Create(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error)
	CreateBulk(ctx context.Context, in *addons.BulkAddons, opts ...grpc.CallOption) (*addons.BulkAddons, error)
	Update(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error)
	UpdateBulk(ctx context.Context, in *addons.BulkAddons, opts ...grpc.CallOption) (*addons.BulkAddons, error)
	Get(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error)
	List(ctx context.Context, in *addons.ListAddonsRequest, opts ...grpc.CallOption) (*addons.ListAddonsResponse, error)
	Count(ctx context.Context, in *addons.CountAddonsRequest, opts ...grpc.CallOption) (*addons.CountAddonsResponse, error)
	Delete(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error)
}

type addonsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddonsServiceClient(cc grpc.ClientConnInterface) AddonsServiceClient {
	return &addonsServiceClient{cc}
}

func (c *addonsServiceClient) Create(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.Addon)
	err := c.cc.Invoke(ctx, AddonsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) CreateBulk(ctx context.Context, in *addons.BulkAddons, opts ...grpc.CallOption) (*addons.BulkAddons, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.BulkAddons)
	err := c.cc.Invoke(ctx, AddonsService_CreateBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) Update(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.Addon)
	err := c.cc.Invoke(ctx, AddonsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) UpdateBulk(ctx context.Context, in *addons.BulkAddons, opts ...grpc.CallOption) (*addons.BulkAddons, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.BulkAddons)
	err := c.cc.Invoke(ctx, AddonsService_UpdateBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) Get(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.Addon)
	err := c.cc.Invoke(ctx, AddonsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) List(ctx context.Context, in *addons.ListAddonsRequest, opts ...grpc.CallOption) (*addons.ListAddonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.ListAddonsResponse)
	err := c.cc.Invoke(ctx, AddonsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) Count(ctx context.Context, in *addons.CountAddonsRequest, opts ...grpc.CallOption) (*addons.CountAddonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.CountAddonsResponse)
	err := c.cc.Invoke(ctx, AddonsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) Delete(ctx context.Context, in *addons.Addon, opts ...grpc.CallOption) (*addons.Addon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(addons.Addon)
	err := c.cc.Invoke(ctx, AddonsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddonsServiceServer is the server API for AddonsService service.
// All implementations must embed UnimplementedAddonsServiceServer
// for forward compatibility.
type AddonsServiceServer interface {
	Create(context.Context, *addons.Addon) (*addons.Addon, error)
	CreateBulk(context.Context, *addons.BulkAddons) (*addons.BulkAddons, error)
	Update(context.Context, *addons.Addon) (*addons.Addon, error)
	UpdateBulk(context.Context, *addons.BulkAddons) (*addons.BulkAddons, error)
	Get(context.Context, *addons.Addon) (*addons.Addon, error)
	List(context.Context, *addons.ListAddonsRequest) (*addons.ListAddonsResponse, error)
	Count(context.Context, *addons.CountAddonsRequest) (*addons.CountAddonsResponse, error)
	Delete(context.Context, *addons.Addon) (*addons.Addon, error)
	mustEmbedUnimplementedAddonsServiceServer()
}

// UnimplementedAddonsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddonsServiceServer struct{}

func (UnimplementedAddonsServiceServer) Create(context.Context, *addons.Addon) (*addons.Addon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAddonsServiceServer) CreateBulk(context.Context, *addons.BulkAddons) (*addons.BulkAddons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulk not implemented")
}
func (UnimplementedAddonsServiceServer) Update(context.Context, *addons.Addon) (*addons.Addon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAddonsServiceServer) UpdateBulk(context.Context, *addons.BulkAddons) (*addons.BulkAddons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBulk not implemented")
}
func (UnimplementedAddonsServiceServer) Get(context.Context, *addons.Addon) (*addons.Addon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAddonsServiceServer) List(context.Context, *addons.ListAddonsRequest) (*addons.ListAddonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAddonsServiceServer) Count(context.Context, *addons.CountAddonsRequest) (*addons.CountAddonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedAddonsServiceServer) Delete(context.Context, *addons.Addon) (*addons.Addon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAddonsServiceServer) mustEmbedUnimplementedAddonsServiceServer() {}
func (UnimplementedAddonsServiceServer) testEmbeddedByValue()                       {}

// UnsafeAddonsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddonsServiceServer will
// result in compilation errors.
type UnsafeAddonsServiceServer interface {
	mustEmbedUnimplementedAddonsServiceServer()
}

func RegisterAddonsServiceServer(s grpc.ServiceRegistrar, srv AddonsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddonsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddonsService_ServiceDesc, srv)
}

func _AddonsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.Addon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).Create(ctx, req.(*addons.Addon))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_CreateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.BulkAddons)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).CreateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_CreateBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).CreateBulk(ctx, req.(*addons.BulkAddons))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.Addon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).Update(ctx, req.(*addons.Addon))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_UpdateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.BulkAddons)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).UpdateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_UpdateBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).UpdateBulk(ctx, req.(*addons.BulkAddons))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.Addon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).Get(ctx, req.(*addons.Addon))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.ListAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).List(ctx, req.(*addons.ListAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.CountAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).Count(ctx, req.(*addons.CountAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(addons.Addon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddonsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).Delete(ctx, req.(*addons.Addon))
	}
	return interceptor(ctx, in, info, handler)
}

// AddonsService_ServiceDesc is the grpc.ServiceDesc for AddonsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddonsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.billing.AddonsService",
	HandlerType: (*AddonsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AddonsService_Create_Handler,
		},
		{
			MethodName: "CreateBulk",
			Handler:    _AddonsService_CreateBulk_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AddonsService_Update_Handler,
		},
		{
			MethodName: "UpdateBulk",
			Handler:    _AddonsService_UpdateBulk_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AddonsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AddonsService_List_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _AddonsService_Count_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AddonsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing.proto",
}

const (
	DescriptionsService_Create_FullMethodName = "/nocloud.billing.DescriptionsService/Create"
	DescriptionsService_Update_FullMethodName = "/nocloud.billing.DescriptionsService/Update"
	DescriptionsService_Get_FullMethodName    = "/nocloud.billing.DescriptionsService/Get"
	DescriptionsService_List_FullMethodName   = "/nocloud.billing.DescriptionsService/List"
	DescriptionsService_Count_FullMethodName  = "/nocloud.billing.DescriptionsService/Count"
	DescriptionsService_Delete_FullMethodName = "/nocloud.billing.DescriptionsService/Delete"
)

// DescriptionsServiceClient is the client API for DescriptionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DescriptionsServiceClient interface {
	Create(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error)
	Update(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error)
	Get(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error)
	List(ctx context.Context, in *descriptions.ListDescriptionsRequest, opts ...grpc.CallOption) (*descriptions.ListDescriptionsResponse, error)
	Count(ctx context.Context, in *descriptions.CountDescriptionsRequest, opts ...grpc.CallOption) (*descriptions.CountDescriptionsResponse, error)
	Delete(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error)
}

type descriptionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDescriptionsServiceClient(cc grpc.ClientConnInterface) DescriptionsServiceClient {
	return &descriptionsServiceClient{cc}
}

func (c *descriptionsServiceClient) Create(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(descriptions.Description)
	err := c.cc.Invoke(ctx, DescriptionsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptionsServiceClient) Update(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(descriptions.Description)
	err := c.cc.Invoke(ctx, DescriptionsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptionsServiceClient) Get(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(descriptions.Description)
	err := c.cc.Invoke(ctx, DescriptionsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptionsServiceClient) List(ctx context.Context, in *descriptions.ListDescriptionsRequest, opts ...grpc.CallOption) (*descriptions.ListDescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(descriptions.ListDescriptionsResponse)
	err := c.cc.Invoke(ctx, DescriptionsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptionsServiceClient) Count(ctx context.Context, in *descriptions.CountDescriptionsRequest, opts ...grpc.CallOption) (*descriptions.CountDescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(descriptions.CountDescriptionsResponse)
	err := c.cc.Invoke(ctx, DescriptionsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptionsServiceClient) Delete(ctx context.Context, in *descriptions.Description, opts ...grpc.CallOption) (*descriptions.Description, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(descriptions.Description)
	err := c.cc.Invoke(ctx, DescriptionsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DescriptionsServiceServer is the server API for DescriptionsService service.
// All implementations must embed UnimplementedDescriptionsServiceServer
// for forward compatibility.
type DescriptionsServiceServer interface {
	Create(context.Context, *descriptions.Description) (*descriptions.Description, error)
	Update(context.Context, *descriptions.Description) (*descriptions.Description, error)
	Get(context.Context, *descriptions.Description) (*descriptions.Description, error)
	List(context.Context, *descriptions.ListDescriptionsRequest) (*descriptions.ListDescriptionsResponse, error)
	Count(context.Context, *descriptions.CountDescriptionsRequest) (*descriptions.CountDescriptionsResponse, error)
	Delete(context.Context, *descriptions.Description) (*descriptions.Description, error)
	mustEmbedUnimplementedDescriptionsServiceServer()
}

// UnimplementedDescriptionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDescriptionsServiceServer struct{}

func (UnimplementedDescriptionsServiceServer) Create(context.Context, *descriptions.Description) (*descriptions.Description, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDescriptionsServiceServer) Update(context.Context, *descriptions.Description) (*descriptions.Description, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDescriptionsServiceServer) Get(context.Context, *descriptions.Description) (*descriptions.Description, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDescriptionsServiceServer) List(context.Context, *descriptions.ListDescriptionsRequest) (*descriptions.ListDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDescriptionsServiceServer) Count(context.Context, *descriptions.CountDescriptionsRequest) (*descriptions.CountDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedDescriptionsServiceServer) Delete(context.Context, *descriptions.Description) (*descriptions.Description, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDescriptionsServiceServer) mustEmbedUnimplementedDescriptionsServiceServer() {}
func (UnimplementedDescriptionsServiceServer) testEmbeddedByValue()                             {}

// UnsafeDescriptionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DescriptionsServiceServer will
// result in compilation errors.
type UnsafeDescriptionsServiceServer interface {
	mustEmbedUnimplementedDescriptionsServiceServer()
}

func RegisterDescriptionsServiceServer(s grpc.ServiceRegistrar, srv DescriptionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDescriptionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DescriptionsService_ServiceDesc, srv)
}

func _DescriptionsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(descriptions.Description)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DescriptionsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionsServiceServer).Create(ctx, req.(*descriptions.Description))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptionsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(descriptions.Description)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DescriptionsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionsServiceServer).Update(ctx, req.(*descriptions.Description))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptionsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(descriptions.Description)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DescriptionsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionsServiceServer).Get(ctx, req.(*descriptions.Description))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptionsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(descriptions.ListDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DescriptionsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionsServiceServer).List(ctx, req.(*descriptions.ListDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptionsService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(descriptions.CountDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionsServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DescriptionsService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionsServiceServer).Count(ctx, req.(*descriptions.CountDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptionsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(descriptions.Description)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DescriptionsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionsServiceServer).Delete(ctx, req.(*descriptions.Description))
	}
	return interceptor(ctx, in, info, handler)
}

// DescriptionsService_ServiceDesc is the grpc.ServiceDesc for DescriptionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DescriptionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.billing.DescriptionsService",
	HandlerType: (*DescriptionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DescriptionsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DescriptionsService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DescriptionsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DescriptionsService_List_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _DescriptionsService_Count_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DescriptionsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing.proto",
}
