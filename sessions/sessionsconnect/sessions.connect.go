// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sessions/sessions.proto

package sessionsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sessions "github.com/slntopp/nocloud-proto/sessions"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionsServiceName is the fully-qualified name of the SessionsService service.
	SessionsServiceName = "nocloud.sessions.SessionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionsServiceGetProcedure is the fully-qualified name of the SessionsService's Get RPC.
	SessionsServiceGetProcedure = "/nocloud.sessions.SessionsService/Get"
	// SessionsServiceRevokeProcedure is the fully-qualified name of the SessionsService's Revoke RPC.
	SessionsServiceRevokeProcedure = "/nocloud.sessions.SessionsService/Revoke"
	// SessionsServiceGetActivityProcedure is the fully-qualified name of the SessionsService's
	// GetActivity RPC.
	SessionsServiceGetActivityProcedure = "/nocloud.sessions.SessionsService/GetActivity"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sessionsServiceServiceDescriptor           = sessions.File_sessions_sessions_proto.Services().ByName("SessionsService")
	sessionsServiceGetMethodDescriptor         = sessionsServiceServiceDescriptor.Methods().ByName("Get")
	sessionsServiceRevokeMethodDescriptor      = sessionsServiceServiceDescriptor.Methods().ByName("Revoke")
	sessionsServiceGetActivityMethodDescriptor = sessionsServiceServiceDescriptor.Methods().ByName("GetActivity")
)

// SessionsServiceClient is a client for the nocloud.sessions.SessionsService service.
type SessionsServiceClient interface {
	Get(context.Context, *connect.Request[sessions.GetSessions]) (*connect.Response[sessions.Sessions], error)
	Revoke(context.Context, *connect.Request[sessions.Session]) (*connect.Response[sessions.DeleteResponse], error)
	GetActivity(context.Context, *connect.Request[sessions.GetActivityRequest]) (*connect.Response[sessions.Activity], error)
}

// NewSessionsServiceClient constructs a client for the nocloud.sessions.SessionsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionsServiceClient{
		get: connect.NewClient[sessions.GetSessions, sessions.Sessions](
			httpClient,
			baseURL+SessionsServiceGetProcedure,
			connect.WithSchema(sessionsServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revoke: connect.NewClient[sessions.Session, sessions.DeleteResponse](
			httpClient,
			baseURL+SessionsServiceRevokeProcedure,
			connect.WithSchema(sessionsServiceRevokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActivity: connect.NewClient[sessions.GetActivityRequest, sessions.Activity](
			httpClient,
			baseURL+SessionsServiceGetActivityProcedure,
			connect.WithSchema(sessionsServiceGetActivityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionsServiceClient implements SessionsServiceClient.
type sessionsServiceClient struct {
	get         *connect.Client[sessions.GetSessions, sessions.Sessions]
	revoke      *connect.Client[sessions.Session, sessions.DeleteResponse]
	getActivity *connect.Client[sessions.GetActivityRequest, sessions.Activity]
}

// Get calls nocloud.sessions.SessionsService.Get.
func (c *sessionsServiceClient) Get(ctx context.Context, req *connect.Request[sessions.GetSessions]) (*connect.Response[sessions.Sessions], error) {
	return c.get.CallUnary(ctx, req)
}

// Revoke calls nocloud.sessions.SessionsService.Revoke.
func (c *sessionsServiceClient) Revoke(ctx context.Context, req *connect.Request[sessions.Session]) (*connect.Response[sessions.DeleteResponse], error) {
	return c.revoke.CallUnary(ctx, req)
}

// GetActivity calls nocloud.sessions.SessionsService.GetActivity.
func (c *sessionsServiceClient) GetActivity(ctx context.Context, req *connect.Request[sessions.GetActivityRequest]) (*connect.Response[sessions.Activity], error) {
	return c.getActivity.CallUnary(ctx, req)
}

// SessionsServiceHandler is an implementation of the nocloud.sessions.SessionsService service.
type SessionsServiceHandler interface {
	Get(context.Context, *connect.Request[sessions.GetSessions]) (*connect.Response[sessions.Sessions], error)
	Revoke(context.Context, *connect.Request[sessions.Session]) (*connect.Response[sessions.DeleteResponse], error)
	GetActivity(context.Context, *connect.Request[sessions.GetActivityRequest]) (*connect.Response[sessions.Activity], error)
}

// NewSessionsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionsServiceHandler(svc SessionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionsServiceGetHandler := connect.NewUnaryHandler(
		SessionsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(sessionsServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionsServiceRevokeHandler := connect.NewUnaryHandler(
		SessionsServiceRevokeProcedure,
		svc.Revoke,
		connect.WithSchema(sessionsServiceRevokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionsServiceGetActivityHandler := connect.NewUnaryHandler(
		SessionsServiceGetActivityProcedure,
		svc.GetActivity,
		connect.WithSchema(sessionsServiceGetActivityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.sessions.SessionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionsServiceGetProcedure:
			sessionsServiceGetHandler.ServeHTTP(w, r)
		case SessionsServiceRevokeProcedure:
			sessionsServiceRevokeHandler.ServeHTTP(w, r)
		case SessionsServiceGetActivityProcedure:
			sessionsServiceGetActivityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionsServiceHandler struct{}

func (UnimplementedSessionsServiceHandler) Get(context.Context, *connect.Request[sessions.GetSessions]) (*connect.Response[sessions.Sessions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.sessions.SessionsService.Get is not implemented"))
}

func (UnimplementedSessionsServiceHandler) Revoke(context.Context, *connect.Request[sessions.Session]) (*connect.Response[sessions.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.sessions.SessionsService.Revoke is not implemented"))
}

func (UnimplementedSessionsServiceHandler) GetActivity(context.Context, *connect.Request[sessions.GetActivityRequest]) (*connect.Response[sessions.Activity], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.sessions.SessionsService.GetActivity is not implemented"))
}
