//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: events_logging/events_logging.proto

package events_loggingconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	events_logging "github.com/slntopp/nocloud-proto/events_logging"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventsLoggingServiceName is the fully-qualified name of the EventsLoggingService service.
	EventsLoggingServiceName = "nocloud.events_logging.EventsLoggingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventsLoggingServiceGetEventsProcedure is the fully-qualified name of the EventsLoggingService's
	// GetEvents RPC.
	EventsLoggingServiceGetEventsProcedure = "/nocloud.events_logging.EventsLoggingService/GetEvents"
	// EventsLoggingServiceGetCountProcedure is the fully-qualified name of the EventsLoggingService's
	// GetCount RPC.
	EventsLoggingServiceGetCountProcedure = "/nocloud.events_logging.EventsLoggingService/GetCount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventsLoggingServiceServiceDescriptor         = events_logging.File_events_logging_events_logging_proto.Services().ByName("EventsLoggingService")
	eventsLoggingServiceGetEventsMethodDescriptor = eventsLoggingServiceServiceDescriptor.Methods().ByName("GetEvents")
	eventsLoggingServiceGetCountMethodDescriptor  = eventsLoggingServiceServiceDescriptor.Methods().ByName("GetCount")
)

// EventsLoggingServiceClient is a client for the nocloud.events_logging.EventsLoggingService
// service.
type EventsLoggingServiceClient interface {
	GetEvents(context.Context, *connect.Request[events_logging.GetEventsRequest]) (*connect.Response[events_logging.Events], error)
	GetCount(context.Context, *connect.Request[events_logging.GetEventsCountRequest]) (*connect.Response[events_logging.GetEventsCountResponse], error)
}

// NewEventsLoggingServiceClient constructs a client for the
// nocloud.events_logging.EventsLoggingService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventsLoggingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventsLoggingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventsLoggingServiceClient{
		getEvents: connect.NewClient[events_logging.GetEventsRequest, events_logging.Events](
			httpClient,
			baseURL+EventsLoggingServiceGetEventsProcedure,
			connect.WithSchema(eventsLoggingServiceGetEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCount: connect.NewClient[events_logging.GetEventsCountRequest, events_logging.GetEventsCountResponse](
			httpClient,
			baseURL+EventsLoggingServiceGetCountProcedure,
			connect.WithSchema(eventsLoggingServiceGetCountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventsLoggingServiceClient implements EventsLoggingServiceClient.
type eventsLoggingServiceClient struct {
	getEvents *connect.Client[events_logging.GetEventsRequest, events_logging.Events]
	getCount  *connect.Client[events_logging.GetEventsCountRequest, events_logging.GetEventsCountResponse]
}

// GetEvents calls nocloud.events_logging.EventsLoggingService.GetEvents.
func (c *eventsLoggingServiceClient) GetEvents(ctx context.Context, req *connect.Request[events_logging.GetEventsRequest]) (*connect.Response[events_logging.Events], error) {
	return c.getEvents.CallUnary(ctx, req)
}

// GetCount calls nocloud.events_logging.EventsLoggingService.GetCount.
func (c *eventsLoggingServiceClient) GetCount(ctx context.Context, req *connect.Request[events_logging.GetEventsCountRequest]) (*connect.Response[events_logging.GetEventsCountResponse], error) {
	return c.getCount.CallUnary(ctx, req)
}

// EventsLoggingServiceHandler is an implementation of the
// nocloud.events_logging.EventsLoggingService service.
type EventsLoggingServiceHandler interface {
	GetEvents(context.Context, *connect.Request[events_logging.GetEventsRequest]) (*connect.Response[events_logging.Events], error)
	GetCount(context.Context, *connect.Request[events_logging.GetEventsCountRequest]) (*connect.Response[events_logging.GetEventsCountResponse], error)
}

// NewEventsLoggingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventsLoggingServiceHandler(svc EventsLoggingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventsLoggingServiceGetEventsHandler := connect.NewUnaryHandler(
		EventsLoggingServiceGetEventsProcedure,
		svc.GetEvents,
		connect.WithSchema(eventsLoggingServiceGetEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventsLoggingServiceGetCountHandler := connect.NewUnaryHandler(
		EventsLoggingServiceGetCountProcedure,
		svc.GetCount,
		connect.WithSchema(eventsLoggingServiceGetCountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.events_logging.EventsLoggingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventsLoggingServiceGetEventsProcedure:
			eventsLoggingServiceGetEventsHandler.ServeHTTP(w, r)
		case EventsLoggingServiceGetCountProcedure:
			eventsLoggingServiceGetCountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventsLoggingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventsLoggingServiceHandler struct{}

func (UnimplementedEventsLoggingServiceHandler) GetEvents(context.Context, *connect.Request[events_logging.GetEventsRequest]) (*connect.Response[events_logging.Events], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.events_logging.EventsLoggingService.GetEvents is not implemented"))
}

func (UnimplementedEventsLoggingServiceHandler) GetCount(context.Context, *connect.Request[events_logging.GetEventsCountRequest]) (*connect.Response[events_logging.GetEventsCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.events_logging.EventsLoggingService.GetCount is not implemented"))
}
