//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services_providers/services_providers.proto

package services_providers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServicesProvidersService_Test_FullMethodName           = "/nocloud.services_providers.ServicesProvidersService/Test"
	ServicesProvidersService_Create_FullMethodName         = "/nocloud.services_providers.ServicesProvidersService/Create"
	ServicesProvidersService_Delete_FullMethodName         = "/nocloud.services_providers.ServicesProvidersService/Delete"
	ServicesProvidersService_Update_FullMethodName         = "/nocloud.services_providers.ServicesProvidersService/Update"
	ServicesProvidersService_Get_FullMethodName            = "/nocloud.services_providers.ServicesProvidersService/Get"
	ServicesProvidersService_List_FullMethodName           = "/nocloud.services_providers.ServicesProvidersService/List"
	ServicesProvidersService_Invoke_FullMethodName         = "/nocloud.services_providers.ServicesProvidersService/Invoke"
	ServicesProvidersService_Prep_FullMethodName           = "/nocloud.services_providers.ServicesProvidersService/Prep"
	ServicesProvidersService_ListExtentions_FullMethodName = "/nocloud.services_providers.ServicesProvidersService/ListExtentions"
	ServicesProvidersService_BindPlan_FullMethodName       = "/nocloud.services_providers.ServicesProvidersService/BindPlan"
	ServicesProvidersService_UnbindPlan_FullMethodName     = "/nocloud.services_providers.ServicesProvidersService/UnbindPlan"
)

// ServicesProvidersServiceClient is the client API for ServicesProvidersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProvidersServiceClient interface {
	Test(ctx context.Context, in *ServicesProvider, opts ...grpc.CallOption) (*TestResponse, error)
	Create(ctx context.Context, in *ServicesProvider, opts ...grpc.CallOption) (*ServicesProvider, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *ServicesProvider, opts ...grpc.CallOption) (*ServicesProvider, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ServicesProvider, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
	Prep(ctx context.Context, in *PrepSP, opts ...grpc.CallOption) (*PrepSP, error)
	ListExtentions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListExtentionsResponse, error)
	BindPlan(ctx context.Context, in *BindPlanRequest, opts ...grpc.CallOption) (*BindPlanResponse, error)
	UnbindPlan(ctx context.Context, in *UnbindPlanRequest, opts ...grpc.CallOption) (*UnbindPlanResponse, error)
}

type servicesProvidersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProvidersServiceClient(cc grpc.ClientConnInterface) ServicesProvidersServiceClient {
	return &servicesProvidersServiceClient{cc}
}

func (c *servicesProvidersServiceClient) Test(ctx context.Context, in *ServicesProvider, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) Create(ctx context.Context, in *ServicesProvider, opts ...grpc.CallOption) (*ServicesProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServicesProvider)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) Update(ctx context.Context, in *ServicesProvider, opts ...grpc.CallOption) (*ServicesProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServicesProvider)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ServicesProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServicesProvider)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvokeResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Invoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) Prep(ctx context.Context, in *PrepSP, opts ...grpc.CallOption) (*PrepSP, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepSP)
	err := c.cc.Invoke(ctx, ServicesProvidersService_Prep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) ListExtentions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListExtentionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExtentionsResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_ListExtentions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) BindPlan(ctx context.Context, in *BindPlanRequest, opts ...grpc.CallOption) (*BindPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindPlanResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_BindPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersServiceClient) UnbindPlan(ctx context.Context, in *UnbindPlanRequest, opts ...grpc.CallOption) (*UnbindPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindPlanResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersService_UnbindPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesProvidersServiceServer is the server API for ServicesProvidersService service.
// All implementations must embed UnimplementedServicesProvidersServiceServer
// for forward compatibility.
type ServicesProvidersServiceServer interface {
	Test(context.Context, *ServicesProvider) (*TestResponse, error)
	Create(context.Context, *ServicesProvider) (*ServicesProvider, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *ServicesProvider) (*ServicesProvider, error)
	Get(context.Context, *GetRequest) (*ServicesProvider, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error)
	Prep(context.Context, *PrepSP) (*PrepSP, error)
	ListExtentions(context.Context, *ListRequest) (*ListExtentionsResponse, error)
	BindPlan(context.Context, *BindPlanRequest) (*BindPlanResponse, error)
	UnbindPlan(context.Context, *UnbindPlanRequest) (*UnbindPlanResponse, error)
	mustEmbedUnimplementedServicesProvidersServiceServer()
}

// UnimplementedServicesProvidersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicesProvidersServiceServer struct{}

func (UnimplementedServicesProvidersServiceServer) Test(context.Context, *ServicesProvider) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedServicesProvidersServiceServer) Create(context.Context, *ServicesProvider) (*ServicesProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServicesProvidersServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServicesProvidersServiceServer) Update(context.Context, *ServicesProvider) (*ServicesProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServicesProvidersServiceServer) Get(context.Context, *GetRequest) (*ServicesProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServicesProvidersServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServicesProvidersServiceServer) Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedServicesProvidersServiceServer) Prep(context.Context, *PrepSP) (*PrepSP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prep not implemented")
}
func (UnimplementedServicesProvidersServiceServer) ListExtentions(context.Context, *ListRequest) (*ListExtentionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtentions not implemented")
}
func (UnimplementedServicesProvidersServiceServer) BindPlan(context.Context, *BindPlanRequest) (*BindPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPlan not implemented")
}
func (UnimplementedServicesProvidersServiceServer) UnbindPlan(context.Context, *UnbindPlanRequest) (*UnbindPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindPlan not implemented")
}
func (UnimplementedServicesProvidersServiceServer) mustEmbedUnimplementedServicesProvidersServiceServer() {
}
func (UnimplementedServicesProvidersServiceServer) testEmbeddedByValue() {}

// UnsafeServicesProvidersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProvidersServiceServer will
// result in compilation errors.
type UnsafeServicesProvidersServiceServer interface {
	mustEmbedUnimplementedServicesProvidersServiceServer()
}

func RegisterServicesProvidersServiceServer(s grpc.ServiceRegistrar, srv ServicesProvidersServiceServer) {
	// If the following call pancis, it indicates UnimplementedServicesProvidersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicesProvidersService_ServiceDesc, srv)
}

func _ServicesProvidersService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Test(ctx, req.(*ServicesProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Create(ctx, req.(*ServicesProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Update(ctx, req.(*ServicesProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_Prep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepSP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).Prep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_Prep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).Prep(ctx, req.(*PrepSP))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_ListExtentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).ListExtentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_ListExtentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).ListExtentions(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_BindPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).BindPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_BindPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).BindPlan(ctx, req.(*BindPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersService_UnbindPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersServiceServer).UnbindPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersService_UnbindPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersServiceServer).UnbindPlan(ctx, req.(*UnbindPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesProvidersService_ServiceDesc is the grpc.ServiceDesc for ServicesProvidersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProvidersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.services_providers.ServicesProvidersService",
	HandlerType: (*ServicesProvidersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _ServicesProvidersService_Test_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ServicesProvidersService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServicesProvidersService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServicesProvidersService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServicesProvidersService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ServicesProvidersService_List_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _ServicesProvidersService_Invoke_Handler,
		},
		{
			MethodName: "Prep",
			Handler:    _ServicesProvidersService_Prep_Handler,
		},
		{
			MethodName: "ListExtentions",
			Handler:    _ServicesProvidersService_ListExtentions_Handler,
		},
		{
			MethodName: "BindPlan",
			Handler:    _ServicesProvidersService_BindPlan_Handler,
		},
		{
			MethodName: "UnbindPlan",
			Handler:    _ServicesProvidersService_UnbindPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_providers/services_providers.proto",
}

const (
	ServicesProvidersExtentionsService_GetType_FullMethodName    = "/nocloud.services_providers.ServicesProvidersExtentionsService/GetType"
	ServicesProvidersExtentionsService_Test_FullMethodName       = "/nocloud.services_providers.ServicesProvidersExtentionsService/Test"
	ServicesProvidersExtentionsService_Register_FullMethodName   = "/nocloud.services_providers.ServicesProvidersExtentionsService/Register"
	ServicesProvidersExtentionsService_Update_FullMethodName     = "/nocloud.services_providers.ServicesProvidersExtentionsService/Update"
	ServicesProvidersExtentionsService_Unregister_FullMethodName = "/nocloud.services_providers.ServicesProvidersExtentionsService/Unregister"
)

// ServicesProvidersExtentionsServiceClient is the client API for ServicesProvidersExtentionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProvidersExtentionsServiceClient interface {
	GetType(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetTypeResponse, error)
	Test(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error)
	Register(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error)
	Update(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error)
	Unregister(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error)
}

type servicesProvidersExtentionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProvidersExtentionsServiceClient(cc grpc.ClientConnInterface) ServicesProvidersExtentionsServiceClient {
	return &servicesProvidersExtentionsServiceClient{cc}
}

func (c *servicesProvidersExtentionsServiceClient) GetType(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTypeResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersExtentionsService_GetType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersExtentionsServiceClient) Test(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersExtentionsService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersExtentionsServiceClient) Register(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersExtentionsService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersExtentionsServiceClient) Update(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersExtentionsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProvidersExtentionsServiceClient) Unregister(ctx context.Context, in *ServicesProvidersExtentionData, opts ...grpc.CallOption) (*GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, ServicesProvidersExtentionsService_Unregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesProvidersExtentionsServiceServer is the server API for ServicesProvidersExtentionsService service.
// All implementations must embed UnimplementedServicesProvidersExtentionsServiceServer
// for forward compatibility.
type ServicesProvidersExtentionsServiceServer interface {
	GetType(context.Context, *GetTypeRequest) (*GetTypeResponse, error)
	Test(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error)
	Register(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error)
	Update(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error)
	Unregister(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error)
	mustEmbedUnimplementedServicesProvidersExtentionsServiceServer()
}

// UnimplementedServicesProvidersExtentionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicesProvidersExtentionsServiceServer struct{}

func (UnimplementedServicesProvidersExtentionsServiceServer) GetType(context.Context, *GetTypeRequest) (*GetTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetType not implemented")
}
func (UnimplementedServicesProvidersExtentionsServiceServer) Test(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedServicesProvidersExtentionsServiceServer) Register(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServicesProvidersExtentionsServiceServer) Update(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServicesProvidersExtentionsServiceServer) Unregister(context.Context, *ServicesProvidersExtentionData) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedServicesProvidersExtentionsServiceServer) mustEmbedUnimplementedServicesProvidersExtentionsServiceServer() {
}
func (UnimplementedServicesProvidersExtentionsServiceServer) testEmbeddedByValue() {}

// UnsafeServicesProvidersExtentionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProvidersExtentionsServiceServer will
// result in compilation errors.
type UnsafeServicesProvidersExtentionsServiceServer interface {
	mustEmbedUnimplementedServicesProvidersExtentionsServiceServer()
}

func RegisterServicesProvidersExtentionsServiceServer(s grpc.ServiceRegistrar, srv ServicesProvidersExtentionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedServicesProvidersExtentionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicesProvidersExtentionsService_ServiceDesc, srv)
}

func _ServicesProvidersExtentionsService_GetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersExtentionsServiceServer).GetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersExtentionsService_GetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersExtentionsServiceServer).GetType(ctx, req.(*GetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersExtentionsService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvidersExtentionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersExtentionsServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersExtentionsService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersExtentionsServiceServer).Test(ctx, req.(*ServicesProvidersExtentionData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersExtentionsService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvidersExtentionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersExtentionsServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersExtentionsService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersExtentionsServiceServer).Register(ctx, req.(*ServicesProvidersExtentionData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersExtentionsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvidersExtentionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersExtentionsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersExtentionsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersExtentionsServiceServer).Update(ctx, req.(*ServicesProvidersExtentionData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProvidersExtentionsService_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesProvidersExtentionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProvidersExtentionsServiceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesProvidersExtentionsService_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProvidersExtentionsServiceServer).Unregister(ctx, req.(*ServicesProvidersExtentionData))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesProvidersExtentionsService_ServiceDesc is the grpc.ServiceDesc for ServicesProvidersExtentionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProvidersExtentionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.services_providers.ServicesProvidersExtentionsService",
	HandlerType: (*ServicesProvidersExtentionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetType",
			Handler:    _ServicesProvidersExtentionsService_GetType_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _ServicesProvidersExtentionsService_Test_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ServicesProvidersExtentionsService_Register_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServicesProvidersExtentionsService_Update_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _ServicesProvidersExtentionsService_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_providers/services_providers.proto",
}

const (
	ShowcasesService_Create_FullMethodName = "/nocloud.services_providers.ShowcasesService/Create"
	ShowcasesService_Delete_FullMethodName = "/nocloud.services_providers.ShowcasesService/Delete"
	ShowcasesService_Update_FullMethodName = "/nocloud.services_providers.ShowcasesService/Update"
	ShowcasesService_Get_FullMethodName    = "/nocloud.services_providers.ShowcasesService/Get"
	ShowcasesService_List_FullMethodName   = "/nocloud.services_providers.ShowcasesService/List"
)

// ShowcasesServiceClient is the client API for ShowcasesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowcasesServiceClient interface {
	Create(ctx context.Context, in *Showcase, opts ...grpc.CallOption) (*Showcase, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *Showcase, opts ...grpc.CallOption) (*Showcase, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Showcase, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Showcases, error)
}

type showcasesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowcasesServiceClient(cc grpc.ClientConnInterface) ShowcasesServiceClient {
	return &showcasesServiceClient{cc}
}

func (c *showcasesServiceClient) Create(ctx context.Context, in *Showcase, opts ...grpc.CallOption) (*Showcase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Showcase)
	err := c.cc.Invoke(ctx, ShowcasesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcasesServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ShowcasesService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcasesServiceClient) Update(ctx context.Context, in *Showcase, opts ...grpc.CallOption) (*Showcase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Showcase)
	err := c.cc.Invoke(ctx, ShowcasesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcasesServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Showcase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Showcase)
	err := c.cc.Invoke(ctx, ShowcasesService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showcasesServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Showcases, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Showcases)
	err := c.cc.Invoke(ctx, ShowcasesService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowcasesServiceServer is the server API for ShowcasesService service.
// All implementations must embed UnimplementedShowcasesServiceServer
// for forward compatibility.
type ShowcasesServiceServer interface {
	Create(context.Context, *Showcase) (*Showcase, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *Showcase) (*Showcase, error)
	Get(context.Context, *GetRequest) (*Showcase, error)
	List(context.Context, *ListRequest) (*Showcases, error)
	mustEmbedUnimplementedShowcasesServiceServer()
}

// UnimplementedShowcasesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShowcasesServiceServer struct{}

func (UnimplementedShowcasesServiceServer) Create(context.Context, *Showcase) (*Showcase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedShowcasesServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedShowcasesServiceServer) Update(context.Context, *Showcase) (*Showcase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedShowcasesServiceServer) Get(context.Context, *GetRequest) (*Showcase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShowcasesServiceServer) List(context.Context, *ListRequest) (*Showcases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedShowcasesServiceServer) mustEmbedUnimplementedShowcasesServiceServer() {}
func (UnimplementedShowcasesServiceServer) testEmbeddedByValue()                          {}

// UnsafeShowcasesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowcasesServiceServer will
// result in compilation errors.
type UnsafeShowcasesServiceServer interface {
	mustEmbedUnimplementedShowcasesServiceServer()
}

func RegisterShowcasesServiceServer(s grpc.ServiceRegistrar, srv ShowcasesServiceServer) {
	// If the following call pancis, it indicates UnimplementedShowcasesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShowcasesService_ServiceDesc, srv)
}

func _ShowcasesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcasesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcasesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcasesServiceServer).Create(ctx, req.(*Showcase))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcasesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcasesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcasesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcasesServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcasesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcasesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcasesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcasesServiceServer).Update(ctx, req.(*Showcase))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcasesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcasesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcasesService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcasesServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowcasesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowcasesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowcasesService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowcasesServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowcasesService_ServiceDesc is the grpc.ServiceDesc for ShowcasesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowcasesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.services_providers.ShowcasesService",
	HandlerType: (*ShowcasesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ShowcasesService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShowcasesService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShowcasesService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ShowcasesService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ShowcasesService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_providers/services_providers.proto",
}
