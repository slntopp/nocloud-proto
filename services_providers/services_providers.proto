/*
Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.services_providers;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "states/states.proto";
import "access/access.proto";
import "billing/billing.proto";


message Var {map<string, google.protobuf.Value> value = 1;}

message ProxyConf {optional string socket = 1;}

message LocationConf {
  float x = 1;
  float y = 2;
  string id = 3;
  string title = 4;
  map<string, google.protobuf.Value> extra = 5;
  string type = 6;
}

message ServicesProvider {
  string uuid = 1;
  string type = 2;
  string title = 3;
  map<string, google.protobuf.Value> secrets = 4; // json
  map<string, Var> vars = 5;
  map<string, google.protobuf.Struct> extentions = 6;
  nocloud.states.State state = 7;
  map<string, google.protobuf.Value> public_data = 8;
  bool public = 9; // If set to true, the provider will be visible to all users

  optional ProxyConf proxy = 10;
  repeated LocationConf locations = 11;
  optional nocloud.access.Access access = 12;
  map<string, google.protobuf.Value> meta = 13;
}

message TestResponse {
  bool result = 1;
  string error = 2;
}

message GetRequest {string uuid = 1;}

message ListRequest {bool anonymously = 1;}

message ListResponse {repeated ServicesProvider pool = 1;}

message DeleteRequest {string uuid = 1;}
message DeleteResponse {
  bool result = 1;
  repeated string services = 2;
}

message ListExtentionsResponse {repeated string types = 1;}

message BindPlanRequest {
  string uuid = 1;
  repeated string plans = 2;
}

message BindPlanResponse {}

message UnbindPlanRequest {
  string uuid = 1;
  repeated string plans = 2;
}

message UnbindPlanResponse {}

message InvokeRequest {
  string uuid = 1;
  string method = 2;
  map<string, google.protobuf.Value> params = 3;
}

message InvokeResponse {
  bool result = 1;
  map<string, google.protobuf.Value> meta = 2;
}

message PrepSP {
  nocloud.services_providers.ServicesProvider sp = 1; // SP Base config
  map<string, google.protobuf.Value> extra =
      2; // Extra Params not related to SP or method or alike
}

service ServicesProvidersService {
  rpc Test(nocloud.services_providers.ServicesProvider)
      returns (nocloud.services_providers.TestResponse) {
    option (google.api.http) = {
      post : "/sp"
      body : "*"
    };
  };
  rpc Create(nocloud.services_providers.ServicesProvider)
      returns (nocloud.services_providers.ServicesProvider) {
    option (google.api.http) = {
      put : "/sp"
      body : "*"
    };
  };
  rpc Delete(nocloud.services_providers.DeleteRequest)
      returns (nocloud.services_providers.DeleteResponse) {
    option (google.api.http) = {
      delete : "/sp/{uuid}"
    };
  };
  rpc Update(nocloud.services_providers.ServicesProvider)
      returns (nocloud.services_providers.ServicesProvider) {
    option (google.api.http) = {
      patch : "/sp/{uuid}"
      body : "*"
    };
  };

  rpc Get(nocloud.services_providers.GetRequest)
      returns (nocloud.services_providers.ServicesProvider) {
    option (google.api.http) = {
      get : "/sp/{uuid}"
    };
  };
  rpc List(nocloud.services_providers.ListRequest)
      returns (nocloud.services_providers.ListResponse) {
    option (google.api.http) = {
      get : "/sp"
    };
  };

  rpc Invoke(nocloud.services_providers.InvokeRequest)
      returns (nocloud.services_providers.InvokeResponse) {
    option (google.api.http) = {
      post : "/sp/{uuid}/invoke"
      body : "*"
    };
  };

  rpc Prep(nocloud.services_providers.PrepSP)
      returns (nocloud.services_providers.PrepSP) {
    option (google.api.http) = {
      post : "/sp-prep"
      body : "*"
    };
  };

  rpc ListExtentions(nocloud.services_providers.ListRequest)
      returns (nocloud.services_providers.ListExtentionsResponse) {
    option (google.api.http) = {
      get : "/sp-ext"
    };
  }

  rpc BindPlan(nocloud.services_providers.BindPlanRequest)
      returns (nocloud.services_providers.BindPlanResponse) {
    option (google.api.http) = {
      post : "/sp/{uuid}/bind_plan"
      body : '*'
    };
  };

  rpc UnbindPlan(nocloud.services_providers.UnbindPlanRequest)
      returns (nocloud.services_providers.UnbindPlanResponse) {
    option (google.api.http) = {
      post : "/sp/{uuid}/unbind_plan"
      body : '*'
    };
  };
};

message GetTypeRequest {}
message GetTypeResponse {string type = 1;}

message ServicesProvidersExtentionData {
  string uuid = 1;
  google.protobuf.Struct data = 2;
}

message GenericResponse {
  bool result = 1;
  string error = 2;
}

service ServicesProvidersExtentionsService {
  rpc GetType(GetTypeRequest) returns (GetTypeResponse);
  rpc Test(ServicesProvidersExtentionData) returns (GenericResponse);
  rpc Register(ServicesProvidersExtentionData) returns (GenericResponse);
  rpc Update(ServicesProvidersExtentionData) returns (GenericResponse);
  rpc Unregister(ServicesProvidersExtentionData) returns (GenericResponse);
}

message Showcase {
  string uuid = 1;
  string title = 2;
  string icon = 3;
  repeated billing.Plan plans = 4;
  repeated ServicesProvider services_providers = 5;
  repeated LocationConf locations = 6;
  google.protobuf.Value promo = 7;
}

message Showcases {
  repeated Showcase showcases = 1;
}

service ShowcasesService {
  rpc Create(nocloud.services_providers.Showcase)
      returns (nocloud.services_providers.Showcase) {
    option (google.api.http) = {
      post : "/showcases"
      body : "*"
    };
  };

  rpc Delete(nocloud.services_providers.DeleteRequest)
      returns (nocloud.services_providers.DeleteResponse) {
    option (google.api.http) = {
      delete : "/showcases/{uuid}"
    };
  };

  rpc Update(nocloud.services_providers.Showcase)
      returns (nocloud.services_providers.Showcase) {
    option (google.api.http) = {
      patch : "/showcases/{uuid}"
      body : "*"
    };
  };

  rpc Get(nocloud.services_providers.GetRequest)
      returns (nocloud.services_providers.Showcase) {
    option (google.api.http) = {
      get : "/showcases/{uuid}"
    };
  };

  rpc List(nocloud.services_providers.ListRequest)
      returns (nocloud.services_providers.Showcases) {
    option (google.api.http) = {
      get : "/showcases"
    };
  };
}

message ObjectPublicData {
  string uuid = 1;
  map<string, google.protobuf.Value> data = 2;
}