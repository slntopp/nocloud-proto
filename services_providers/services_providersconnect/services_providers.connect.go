//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services_providers/services_providers.proto

package services_providersconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	services_providers "github.com/slntopp/nocloud-proto/services_providers"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServicesProvidersServiceName is the fully-qualified name of the ServicesProvidersService service.
	ServicesProvidersServiceName = "nocloud.services_providers.ServicesProvidersService"
	// ServicesProvidersExtentionsServiceName is the fully-qualified name of the
	// ServicesProvidersExtentionsService service.
	ServicesProvidersExtentionsServiceName = "nocloud.services_providers.ServicesProvidersExtentionsService"
	// ShowcasesServiceName is the fully-qualified name of the ShowcasesService service.
	ShowcasesServiceName = "nocloud.services_providers.ShowcasesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServicesProvidersServiceTestProcedure is the fully-qualified name of the
	// ServicesProvidersService's Test RPC.
	ServicesProvidersServiceTestProcedure = "/nocloud.services_providers.ServicesProvidersService/Test"
	// ServicesProvidersServiceCreateProcedure is the fully-qualified name of the
	// ServicesProvidersService's Create RPC.
	ServicesProvidersServiceCreateProcedure = "/nocloud.services_providers.ServicesProvidersService/Create"
	// ServicesProvidersServiceDeleteProcedure is the fully-qualified name of the
	// ServicesProvidersService's Delete RPC.
	ServicesProvidersServiceDeleteProcedure = "/nocloud.services_providers.ServicesProvidersService/Delete"
	// ServicesProvidersServiceUpdateProcedure is the fully-qualified name of the
	// ServicesProvidersService's Update RPC.
	ServicesProvidersServiceUpdateProcedure = "/nocloud.services_providers.ServicesProvidersService/Update"
	// ServicesProvidersServiceGetProcedure is the fully-qualified name of the
	// ServicesProvidersService's Get RPC.
	ServicesProvidersServiceGetProcedure = "/nocloud.services_providers.ServicesProvidersService/Get"
	// ServicesProvidersServiceListProcedure is the fully-qualified name of the
	// ServicesProvidersService's List RPC.
	ServicesProvidersServiceListProcedure = "/nocloud.services_providers.ServicesProvidersService/List"
	// ServicesProvidersServiceInvokeProcedure is the fully-qualified name of the
	// ServicesProvidersService's Invoke RPC.
	ServicesProvidersServiceInvokeProcedure = "/nocloud.services_providers.ServicesProvidersService/Invoke"
	// ServicesProvidersServicePrepProcedure is the fully-qualified name of the
	// ServicesProvidersService's Prep RPC.
	ServicesProvidersServicePrepProcedure = "/nocloud.services_providers.ServicesProvidersService/Prep"
	// ServicesProvidersServiceListExtentionsProcedure is the fully-qualified name of the
	// ServicesProvidersService's ListExtentions RPC.
	ServicesProvidersServiceListExtentionsProcedure = "/nocloud.services_providers.ServicesProvidersService/ListExtentions"
	// ServicesProvidersServiceBindPlanProcedure is the fully-qualified name of the
	// ServicesProvidersService's BindPlan RPC.
	ServicesProvidersServiceBindPlanProcedure = "/nocloud.services_providers.ServicesProvidersService/BindPlan"
	// ServicesProvidersServiceUnbindPlanProcedure is the fully-qualified name of the
	// ServicesProvidersService's UnbindPlan RPC.
	ServicesProvidersServiceUnbindPlanProcedure = "/nocloud.services_providers.ServicesProvidersService/UnbindPlan"
	// ServicesProvidersExtentionsServiceGetTypeProcedure is the fully-qualified name of the
	// ServicesProvidersExtentionsService's GetType RPC.
	ServicesProvidersExtentionsServiceGetTypeProcedure = "/nocloud.services_providers.ServicesProvidersExtentionsService/GetType"
	// ServicesProvidersExtentionsServiceTestProcedure is the fully-qualified name of the
	// ServicesProvidersExtentionsService's Test RPC.
	ServicesProvidersExtentionsServiceTestProcedure = "/nocloud.services_providers.ServicesProvidersExtentionsService/Test"
	// ServicesProvidersExtentionsServiceRegisterProcedure is the fully-qualified name of the
	// ServicesProvidersExtentionsService's Register RPC.
	ServicesProvidersExtentionsServiceRegisterProcedure = "/nocloud.services_providers.ServicesProvidersExtentionsService/Register"
	// ServicesProvidersExtentionsServiceUpdateProcedure is the fully-qualified name of the
	// ServicesProvidersExtentionsService's Update RPC.
	ServicesProvidersExtentionsServiceUpdateProcedure = "/nocloud.services_providers.ServicesProvidersExtentionsService/Update"
	// ServicesProvidersExtentionsServiceUnregisterProcedure is the fully-qualified name of the
	// ServicesProvidersExtentionsService's Unregister RPC.
	ServicesProvidersExtentionsServiceUnregisterProcedure = "/nocloud.services_providers.ServicesProvidersExtentionsService/Unregister"
	// ShowcasesServiceCreateProcedure is the fully-qualified name of the ShowcasesService's Create RPC.
	ShowcasesServiceCreateProcedure = "/nocloud.services_providers.ShowcasesService/Create"
	// ShowcasesServiceDeleteProcedure is the fully-qualified name of the ShowcasesService's Delete RPC.
	ShowcasesServiceDeleteProcedure = "/nocloud.services_providers.ShowcasesService/Delete"
	// ShowcasesServiceUpdateProcedure is the fully-qualified name of the ShowcasesService's Update RPC.
	ShowcasesServiceUpdateProcedure = "/nocloud.services_providers.ShowcasesService/Update"
	// ShowcasesServiceGetProcedure is the fully-qualified name of the ShowcasesService's Get RPC.
	ShowcasesServiceGetProcedure = "/nocloud.services_providers.ShowcasesService/Get"
	// ShowcasesServiceListProcedure is the fully-qualified name of the ShowcasesService's List RPC.
	ShowcasesServiceListProcedure = "/nocloud.services_providers.ShowcasesService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	servicesProvidersServiceServiceDescriptor                    = services_providers.File_services_providers_services_providers_proto.Services().ByName("ServicesProvidersService")
	servicesProvidersServiceTestMethodDescriptor                 = servicesProvidersServiceServiceDescriptor.Methods().ByName("Test")
	servicesProvidersServiceCreateMethodDescriptor               = servicesProvidersServiceServiceDescriptor.Methods().ByName("Create")
	servicesProvidersServiceDeleteMethodDescriptor               = servicesProvidersServiceServiceDescriptor.Methods().ByName("Delete")
	servicesProvidersServiceUpdateMethodDescriptor               = servicesProvidersServiceServiceDescriptor.Methods().ByName("Update")
	servicesProvidersServiceGetMethodDescriptor                  = servicesProvidersServiceServiceDescriptor.Methods().ByName("Get")
	servicesProvidersServiceListMethodDescriptor                 = servicesProvidersServiceServiceDescriptor.Methods().ByName("List")
	servicesProvidersServiceInvokeMethodDescriptor               = servicesProvidersServiceServiceDescriptor.Methods().ByName("Invoke")
	servicesProvidersServicePrepMethodDescriptor                 = servicesProvidersServiceServiceDescriptor.Methods().ByName("Prep")
	servicesProvidersServiceListExtentionsMethodDescriptor       = servicesProvidersServiceServiceDescriptor.Methods().ByName("ListExtentions")
	servicesProvidersServiceBindPlanMethodDescriptor             = servicesProvidersServiceServiceDescriptor.Methods().ByName("BindPlan")
	servicesProvidersServiceUnbindPlanMethodDescriptor           = servicesProvidersServiceServiceDescriptor.Methods().ByName("UnbindPlan")
	servicesProvidersExtentionsServiceServiceDescriptor          = services_providers.File_services_providers_services_providers_proto.Services().ByName("ServicesProvidersExtentionsService")
	servicesProvidersExtentionsServiceGetTypeMethodDescriptor    = servicesProvidersExtentionsServiceServiceDescriptor.Methods().ByName("GetType")
	servicesProvidersExtentionsServiceTestMethodDescriptor       = servicesProvidersExtentionsServiceServiceDescriptor.Methods().ByName("Test")
	servicesProvidersExtentionsServiceRegisterMethodDescriptor   = servicesProvidersExtentionsServiceServiceDescriptor.Methods().ByName("Register")
	servicesProvidersExtentionsServiceUpdateMethodDescriptor     = servicesProvidersExtentionsServiceServiceDescriptor.Methods().ByName("Update")
	servicesProvidersExtentionsServiceUnregisterMethodDescriptor = servicesProvidersExtentionsServiceServiceDescriptor.Methods().ByName("Unregister")
	showcasesServiceServiceDescriptor                            = services_providers.File_services_providers_services_providers_proto.Services().ByName("ShowcasesService")
	showcasesServiceCreateMethodDescriptor                       = showcasesServiceServiceDescriptor.Methods().ByName("Create")
	showcasesServiceDeleteMethodDescriptor                       = showcasesServiceServiceDescriptor.Methods().ByName("Delete")
	showcasesServiceUpdateMethodDescriptor                       = showcasesServiceServiceDescriptor.Methods().ByName("Update")
	showcasesServiceGetMethodDescriptor                          = showcasesServiceServiceDescriptor.Methods().ByName("Get")
	showcasesServiceListMethodDescriptor                         = showcasesServiceServiceDescriptor.Methods().ByName("List")
)

// ServicesProvidersServiceClient is a client for the
// nocloud.services_providers.ServicesProvidersService service.
type ServicesProvidersServiceClient interface {
	Test(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.TestResponse], error)
	Create(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error)
	Delete(context.Context, *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error)
	Update(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error)
	Get(context.Context, *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.ServicesProvider], error)
	List(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListResponse], error)
	Invoke(context.Context, *connect.Request[services_providers.InvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error)
	Prep(context.Context, *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error)
	ListExtentions(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListExtentionsResponse], error)
	BindPlan(context.Context, *connect.Request[services_providers.BindPlanRequest]) (*connect.Response[services_providers.BindPlanResponse], error)
	UnbindPlan(context.Context, *connect.Request[services_providers.UnbindPlanRequest]) (*connect.Response[services_providers.UnbindPlanResponse], error)
}

// NewServicesProvidersServiceClient constructs a client for the
// nocloud.services_providers.ServicesProvidersService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServicesProvidersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServicesProvidersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &servicesProvidersServiceClient{
		test: connect.NewClient[services_providers.ServicesProvider, services_providers.TestResponse](
			httpClient,
			baseURL+ServicesProvidersServiceTestProcedure,
			connect.WithSchema(servicesProvidersServiceTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[services_providers.ServicesProvider, services_providers.ServicesProvider](
			httpClient,
			baseURL+ServicesProvidersServiceCreateProcedure,
			connect.WithSchema(servicesProvidersServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[services_providers.DeleteRequest, services_providers.DeleteResponse](
			httpClient,
			baseURL+ServicesProvidersServiceDeleteProcedure,
			connect.WithSchema(servicesProvidersServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[services_providers.ServicesProvider, services_providers.ServicesProvider](
			httpClient,
			baseURL+ServicesProvidersServiceUpdateProcedure,
			connect.WithSchema(servicesProvidersServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[services_providers.GetRequest, services_providers.ServicesProvider](
			httpClient,
			baseURL+ServicesProvidersServiceGetProcedure,
			connect.WithSchema(servicesProvidersServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[services_providers.ListRequest, services_providers.ListResponse](
			httpClient,
			baseURL+ServicesProvidersServiceListProcedure,
			connect.WithSchema(servicesProvidersServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		invoke: connect.NewClient[services_providers.InvokeRequest, services_providers.InvokeResponse](
			httpClient,
			baseURL+ServicesProvidersServiceInvokeProcedure,
			connect.WithSchema(servicesProvidersServiceInvokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		prep: connect.NewClient[services_providers.PrepSP, services_providers.PrepSP](
			httpClient,
			baseURL+ServicesProvidersServicePrepProcedure,
			connect.WithSchema(servicesProvidersServicePrepMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listExtentions: connect.NewClient[services_providers.ListRequest, services_providers.ListExtentionsResponse](
			httpClient,
			baseURL+ServicesProvidersServiceListExtentionsProcedure,
			connect.WithSchema(servicesProvidersServiceListExtentionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bindPlan: connect.NewClient[services_providers.BindPlanRequest, services_providers.BindPlanResponse](
			httpClient,
			baseURL+ServicesProvidersServiceBindPlanProcedure,
			connect.WithSchema(servicesProvidersServiceBindPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unbindPlan: connect.NewClient[services_providers.UnbindPlanRequest, services_providers.UnbindPlanResponse](
			httpClient,
			baseURL+ServicesProvidersServiceUnbindPlanProcedure,
			connect.WithSchema(servicesProvidersServiceUnbindPlanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// servicesProvidersServiceClient implements ServicesProvidersServiceClient.
type servicesProvidersServiceClient struct {
	test           *connect.Client[services_providers.ServicesProvider, services_providers.TestResponse]
	create         *connect.Client[services_providers.ServicesProvider, services_providers.ServicesProvider]
	delete         *connect.Client[services_providers.DeleteRequest, services_providers.DeleteResponse]
	update         *connect.Client[services_providers.ServicesProvider, services_providers.ServicesProvider]
	get            *connect.Client[services_providers.GetRequest, services_providers.ServicesProvider]
	list           *connect.Client[services_providers.ListRequest, services_providers.ListResponse]
	invoke         *connect.Client[services_providers.InvokeRequest, services_providers.InvokeResponse]
	prep           *connect.Client[services_providers.PrepSP, services_providers.PrepSP]
	listExtentions *connect.Client[services_providers.ListRequest, services_providers.ListExtentionsResponse]
	bindPlan       *connect.Client[services_providers.BindPlanRequest, services_providers.BindPlanResponse]
	unbindPlan     *connect.Client[services_providers.UnbindPlanRequest, services_providers.UnbindPlanResponse]
}

// Test calls nocloud.services_providers.ServicesProvidersService.Test.
func (c *servicesProvidersServiceClient) Test(ctx context.Context, req *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.TestResponse], error) {
	return c.test.CallUnary(ctx, req)
}

// Create calls nocloud.services_providers.ServicesProvidersService.Create.
func (c *servicesProvidersServiceClient) Create(ctx context.Context, req *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls nocloud.services_providers.ServicesProvidersService.Delete.
func (c *servicesProvidersServiceClient) Delete(ctx context.Context, req *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Update calls nocloud.services_providers.ServicesProvidersService.Update.
func (c *servicesProvidersServiceClient) Update(ctx context.Context, req *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls nocloud.services_providers.ServicesProvidersService.Get.
func (c *servicesProvidersServiceClient) Get(ctx context.Context, req *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.ServicesProvider], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls nocloud.services_providers.ServicesProvidersService.List.
func (c *servicesProvidersServiceClient) List(ctx context.Context, req *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Invoke calls nocloud.services_providers.ServicesProvidersService.Invoke.
func (c *servicesProvidersServiceClient) Invoke(ctx context.Context, req *connect.Request[services_providers.InvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error) {
	return c.invoke.CallUnary(ctx, req)
}

// Prep calls nocloud.services_providers.ServicesProvidersService.Prep.
func (c *servicesProvidersServiceClient) Prep(ctx context.Context, req *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error) {
	return c.prep.CallUnary(ctx, req)
}

// ListExtentions calls nocloud.services_providers.ServicesProvidersService.ListExtentions.
func (c *servicesProvidersServiceClient) ListExtentions(ctx context.Context, req *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListExtentionsResponse], error) {
	return c.listExtentions.CallUnary(ctx, req)
}

// BindPlan calls nocloud.services_providers.ServicesProvidersService.BindPlan.
func (c *servicesProvidersServiceClient) BindPlan(ctx context.Context, req *connect.Request[services_providers.BindPlanRequest]) (*connect.Response[services_providers.BindPlanResponse], error) {
	return c.bindPlan.CallUnary(ctx, req)
}

// UnbindPlan calls nocloud.services_providers.ServicesProvidersService.UnbindPlan.
func (c *servicesProvidersServiceClient) UnbindPlan(ctx context.Context, req *connect.Request[services_providers.UnbindPlanRequest]) (*connect.Response[services_providers.UnbindPlanResponse], error) {
	return c.unbindPlan.CallUnary(ctx, req)
}

// ServicesProvidersServiceHandler is an implementation of the
// nocloud.services_providers.ServicesProvidersService service.
type ServicesProvidersServiceHandler interface {
	Test(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.TestResponse], error)
	Create(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error)
	Delete(context.Context, *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error)
	Update(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error)
	Get(context.Context, *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.ServicesProvider], error)
	List(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListResponse], error)
	Invoke(context.Context, *connect.Request[services_providers.InvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error)
	Prep(context.Context, *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error)
	ListExtentions(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListExtentionsResponse], error)
	BindPlan(context.Context, *connect.Request[services_providers.BindPlanRequest]) (*connect.Response[services_providers.BindPlanResponse], error)
	UnbindPlan(context.Context, *connect.Request[services_providers.UnbindPlanRequest]) (*connect.Response[services_providers.UnbindPlanResponse], error)
}

// NewServicesProvidersServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServicesProvidersServiceHandler(svc ServicesProvidersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	servicesProvidersServiceTestHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceTestProcedure,
		svc.Test,
		connect.WithSchema(servicesProvidersServiceTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceCreateHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(servicesProvidersServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceDeleteHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(servicesProvidersServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceUpdateHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(servicesProvidersServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceGetHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceGetProcedure,
		svc.Get,
		connect.WithSchema(servicesProvidersServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceListHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceListProcedure,
		svc.List,
		connect.WithSchema(servicesProvidersServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceInvokeHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceInvokeProcedure,
		svc.Invoke,
		connect.WithSchema(servicesProvidersServiceInvokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServicePrepHandler := connect.NewUnaryHandler(
		ServicesProvidersServicePrepProcedure,
		svc.Prep,
		connect.WithSchema(servicesProvidersServicePrepMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceListExtentionsHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceListExtentionsProcedure,
		svc.ListExtentions,
		connect.WithSchema(servicesProvidersServiceListExtentionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceBindPlanHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceBindPlanProcedure,
		svc.BindPlan,
		connect.WithSchema(servicesProvidersServiceBindPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersServiceUnbindPlanHandler := connect.NewUnaryHandler(
		ServicesProvidersServiceUnbindPlanProcedure,
		svc.UnbindPlan,
		connect.WithSchema(servicesProvidersServiceUnbindPlanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.services_providers.ServicesProvidersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServicesProvidersServiceTestProcedure:
			servicesProvidersServiceTestHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceCreateProcedure:
			servicesProvidersServiceCreateHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceDeleteProcedure:
			servicesProvidersServiceDeleteHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceUpdateProcedure:
			servicesProvidersServiceUpdateHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceGetProcedure:
			servicesProvidersServiceGetHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceListProcedure:
			servicesProvidersServiceListHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceInvokeProcedure:
			servicesProvidersServiceInvokeHandler.ServeHTTP(w, r)
		case ServicesProvidersServicePrepProcedure:
			servicesProvidersServicePrepHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceListExtentionsProcedure:
			servicesProvidersServiceListExtentionsHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceBindPlanProcedure:
			servicesProvidersServiceBindPlanHandler.ServeHTTP(w, r)
		case ServicesProvidersServiceUnbindPlanProcedure:
			servicesProvidersServiceUnbindPlanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServicesProvidersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServicesProvidersServiceHandler struct{}

func (UnimplementedServicesProvidersServiceHandler) Test(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.TestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Test is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) Create(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Create is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) Delete(context.Context, *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Delete is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) Update(context.Context, *connect.Request[services_providers.ServicesProvider]) (*connect.Response[services_providers.ServicesProvider], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Update is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) Get(context.Context, *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.ServicesProvider], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Get is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) List(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.List is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) Invoke(context.Context, *connect.Request[services_providers.InvokeRequest]) (*connect.Response[services_providers.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Invoke is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) Prep(context.Context, *connect.Request[services_providers.PrepSP]) (*connect.Response[services_providers.PrepSP], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.Prep is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) ListExtentions(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.ListExtentionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.ListExtentions is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) BindPlan(context.Context, *connect.Request[services_providers.BindPlanRequest]) (*connect.Response[services_providers.BindPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.BindPlan is not implemented"))
}

func (UnimplementedServicesProvidersServiceHandler) UnbindPlan(context.Context, *connect.Request[services_providers.UnbindPlanRequest]) (*connect.Response[services_providers.UnbindPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersService.UnbindPlan is not implemented"))
}

// ServicesProvidersExtentionsServiceClient is a client for the
// nocloud.services_providers.ServicesProvidersExtentionsService service.
type ServicesProvidersExtentionsServiceClient interface {
	GetType(context.Context, *connect.Request[services_providers.GetTypeRequest]) (*connect.Response[services_providers.GetTypeResponse], error)
	Test(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
	Register(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
	Update(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
	Unregister(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
}

// NewServicesProvidersExtentionsServiceClient constructs a client for the
// nocloud.services_providers.ServicesProvidersExtentionsService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServicesProvidersExtentionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServicesProvidersExtentionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &servicesProvidersExtentionsServiceClient{
		getType: connect.NewClient[services_providers.GetTypeRequest, services_providers.GetTypeResponse](
			httpClient,
			baseURL+ServicesProvidersExtentionsServiceGetTypeProcedure,
			connect.WithSchema(servicesProvidersExtentionsServiceGetTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		test: connect.NewClient[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse](
			httpClient,
			baseURL+ServicesProvidersExtentionsServiceTestProcedure,
			connect.WithSchema(servicesProvidersExtentionsServiceTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse](
			httpClient,
			baseURL+ServicesProvidersExtentionsServiceRegisterProcedure,
			connect.WithSchema(servicesProvidersExtentionsServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse](
			httpClient,
			baseURL+ServicesProvidersExtentionsServiceUpdateProcedure,
			connect.WithSchema(servicesProvidersExtentionsServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unregister: connect.NewClient[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse](
			httpClient,
			baseURL+ServicesProvidersExtentionsServiceUnregisterProcedure,
			connect.WithSchema(servicesProvidersExtentionsServiceUnregisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// servicesProvidersExtentionsServiceClient implements ServicesProvidersExtentionsServiceClient.
type servicesProvidersExtentionsServiceClient struct {
	getType    *connect.Client[services_providers.GetTypeRequest, services_providers.GetTypeResponse]
	test       *connect.Client[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse]
	register   *connect.Client[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse]
	update     *connect.Client[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse]
	unregister *connect.Client[services_providers.ServicesProvidersExtentionData, services_providers.GenericResponse]
}

// GetType calls nocloud.services_providers.ServicesProvidersExtentionsService.GetType.
func (c *servicesProvidersExtentionsServiceClient) GetType(ctx context.Context, req *connect.Request[services_providers.GetTypeRequest]) (*connect.Response[services_providers.GetTypeResponse], error) {
	return c.getType.CallUnary(ctx, req)
}

// Test calls nocloud.services_providers.ServicesProvidersExtentionsService.Test.
func (c *servicesProvidersExtentionsServiceClient) Test(ctx context.Context, req *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return c.test.CallUnary(ctx, req)
}

// Register calls nocloud.services_providers.ServicesProvidersExtentionsService.Register.
func (c *servicesProvidersExtentionsServiceClient) Register(ctx context.Context, req *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Update calls nocloud.services_providers.ServicesProvidersExtentionsService.Update.
func (c *servicesProvidersExtentionsServiceClient) Update(ctx context.Context, req *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Unregister calls nocloud.services_providers.ServicesProvidersExtentionsService.Unregister.
func (c *servicesProvidersExtentionsServiceClient) Unregister(ctx context.Context, req *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return c.unregister.CallUnary(ctx, req)
}

// ServicesProvidersExtentionsServiceHandler is an implementation of the
// nocloud.services_providers.ServicesProvidersExtentionsService service.
type ServicesProvidersExtentionsServiceHandler interface {
	GetType(context.Context, *connect.Request[services_providers.GetTypeRequest]) (*connect.Response[services_providers.GetTypeResponse], error)
	Test(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
	Register(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
	Update(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
	Unregister(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error)
}

// NewServicesProvidersExtentionsServiceHandler builds an HTTP handler from the service
// implementation. It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServicesProvidersExtentionsServiceHandler(svc ServicesProvidersExtentionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	servicesProvidersExtentionsServiceGetTypeHandler := connect.NewUnaryHandler(
		ServicesProvidersExtentionsServiceGetTypeProcedure,
		svc.GetType,
		connect.WithSchema(servicesProvidersExtentionsServiceGetTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersExtentionsServiceTestHandler := connect.NewUnaryHandler(
		ServicesProvidersExtentionsServiceTestProcedure,
		svc.Test,
		connect.WithSchema(servicesProvidersExtentionsServiceTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersExtentionsServiceRegisterHandler := connect.NewUnaryHandler(
		ServicesProvidersExtentionsServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(servicesProvidersExtentionsServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersExtentionsServiceUpdateHandler := connect.NewUnaryHandler(
		ServicesProvidersExtentionsServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(servicesProvidersExtentionsServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicesProvidersExtentionsServiceUnregisterHandler := connect.NewUnaryHandler(
		ServicesProvidersExtentionsServiceUnregisterProcedure,
		svc.Unregister,
		connect.WithSchema(servicesProvidersExtentionsServiceUnregisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.services_providers.ServicesProvidersExtentionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServicesProvidersExtentionsServiceGetTypeProcedure:
			servicesProvidersExtentionsServiceGetTypeHandler.ServeHTTP(w, r)
		case ServicesProvidersExtentionsServiceTestProcedure:
			servicesProvidersExtentionsServiceTestHandler.ServeHTTP(w, r)
		case ServicesProvidersExtentionsServiceRegisterProcedure:
			servicesProvidersExtentionsServiceRegisterHandler.ServeHTTP(w, r)
		case ServicesProvidersExtentionsServiceUpdateProcedure:
			servicesProvidersExtentionsServiceUpdateHandler.ServeHTTP(w, r)
		case ServicesProvidersExtentionsServiceUnregisterProcedure:
			servicesProvidersExtentionsServiceUnregisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServicesProvidersExtentionsServiceHandler returns CodeUnimplemented from all
// methods.
type UnimplementedServicesProvidersExtentionsServiceHandler struct{}

func (UnimplementedServicesProvidersExtentionsServiceHandler) GetType(context.Context, *connect.Request[services_providers.GetTypeRequest]) (*connect.Response[services_providers.GetTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersExtentionsService.GetType is not implemented"))
}

func (UnimplementedServicesProvidersExtentionsServiceHandler) Test(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersExtentionsService.Test is not implemented"))
}

func (UnimplementedServicesProvidersExtentionsServiceHandler) Register(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersExtentionsService.Register is not implemented"))
}

func (UnimplementedServicesProvidersExtentionsServiceHandler) Update(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersExtentionsService.Update is not implemented"))
}

func (UnimplementedServicesProvidersExtentionsServiceHandler) Unregister(context.Context, *connect.Request[services_providers.ServicesProvidersExtentionData]) (*connect.Response[services_providers.GenericResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ServicesProvidersExtentionsService.Unregister is not implemented"))
}

// ShowcasesServiceClient is a client for the nocloud.services_providers.ShowcasesService service.
type ShowcasesServiceClient interface {
	Create(context.Context, *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error)
	Delete(context.Context, *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error)
	Update(context.Context, *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error)
	Get(context.Context, *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.Showcase], error)
	List(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.Showcases], error)
}

// NewShowcasesServiceClient constructs a client for the nocloud.services_providers.ShowcasesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShowcasesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShowcasesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &showcasesServiceClient{
		create: connect.NewClient[services_providers.Showcase, services_providers.Showcase](
			httpClient,
			baseURL+ShowcasesServiceCreateProcedure,
			connect.WithSchema(showcasesServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[services_providers.DeleteRequest, services_providers.DeleteResponse](
			httpClient,
			baseURL+ShowcasesServiceDeleteProcedure,
			connect.WithSchema(showcasesServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[services_providers.Showcase, services_providers.Showcase](
			httpClient,
			baseURL+ShowcasesServiceUpdateProcedure,
			connect.WithSchema(showcasesServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[services_providers.GetRequest, services_providers.Showcase](
			httpClient,
			baseURL+ShowcasesServiceGetProcedure,
			connect.WithSchema(showcasesServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[services_providers.ListRequest, services_providers.Showcases](
			httpClient,
			baseURL+ShowcasesServiceListProcedure,
			connect.WithSchema(showcasesServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// showcasesServiceClient implements ShowcasesServiceClient.
type showcasesServiceClient struct {
	create *connect.Client[services_providers.Showcase, services_providers.Showcase]
	delete *connect.Client[services_providers.DeleteRequest, services_providers.DeleteResponse]
	update *connect.Client[services_providers.Showcase, services_providers.Showcase]
	get    *connect.Client[services_providers.GetRequest, services_providers.Showcase]
	list   *connect.Client[services_providers.ListRequest, services_providers.Showcases]
}

// Create calls nocloud.services_providers.ShowcasesService.Create.
func (c *showcasesServiceClient) Create(ctx context.Context, req *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls nocloud.services_providers.ShowcasesService.Delete.
func (c *showcasesServiceClient) Delete(ctx context.Context, req *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Update calls nocloud.services_providers.ShowcasesService.Update.
func (c *showcasesServiceClient) Update(ctx context.Context, req *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls nocloud.services_providers.ShowcasesService.Get.
func (c *showcasesServiceClient) Get(ctx context.Context, req *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.Showcase], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls nocloud.services_providers.ShowcasesService.List.
func (c *showcasesServiceClient) List(ctx context.Context, req *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.Showcases], error) {
	return c.list.CallUnary(ctx, req)
}

// ShowcasesServiceHandler is an implementation of the nocloud.services_providers.ShowcasesService
// service.
type ShowcasesServiceHandler interface {
	Create(context.Context, *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error)
	Delete(context.Context, *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error)
	Update(context.Context, *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error)
	Get(context.Context, *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.Showcase], error)
	List(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.Showcases], error)
}

// NewShowcasesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShowcasesServiceHandler(svc ShowcasesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	showcasesServiceCreateHandler := connect.NewUnaryHandler(
		ShowcasesServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(showcasesServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	showcasesServiceDeleteHandler := connect.NewUnaryHandler(
		ShowcasesServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(showcasesServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	showcasesServiceUpdateHandler := connect.NewUnaryHandler(
		ShowcasesServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(showcasesServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	showcasesServiceGetHandler := connect.NewUnaryHandler(
		ShowcasesServiceGetProcedure,
		svc.Get,
		connect.WithSchema(showcasesServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	showcasesServiceListHandler := connect.NewUnaryHandler(
		ShowcasesServiceListProcedure,
		svc.List,
		connect.WithSchema(showcasesServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.services_providers.ShowcasesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShowcasesServiceCreateProcedure:
			showcasesServiceCreateHandler.ServeHTTP(w, r)
		case ShowcasesServiceDeleteProcedure:
			showcasesServiceDeleteHandler.ServeHTTP(w, r)
		case ShowcasesServiceUpdateProcedure:
			showcasesServiceUpdateHandler.ServeHTTP(w, r)
		case ShowcasesServiceGetProcedure:
			showcasesServiceGetHandler.ServeHTTP(w, r)
		case ShowcasesServiceListProcedure:
			showcasesServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShowcasesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShowcasesServiceHandler struct{}

func (UnimplementedShowcasesServiceHandler) Create(context.Context, *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ShowcasesService.Create is not implemented"))
}

func (UnimplementedShowcasesServiceHandler) Delete(context.Context, *connect.Request[services_providers.DeleteRequest]) (*connect.Response[services_providers.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ShowcasesService.Delete is not implemented"))
}

func (UnimplementedShowcasesServiceHandler) Update(context.Context, *connect.Request[services_providers.Showcase]) (*connect.Response[services_providers.Showcase], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ShowcasesService.Update is not implemented"))
}

func (UnimplementedShowcasesServiceHandler) Get(context.Context, *connect.Request[services_providers.GetRequest]) (*connect.Response[services_providers.Showcase], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ShowcasesService.Get is not implemented"))
}

func (UnimplementedShowcasesServiceHandler) List(context.Context, *connect.Request[services_providers.ListRequest]) (*connect.Response[services_providers.Showcases], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.services_providers.ShowcasesService.List is not implemented"))
}
