//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dns/dns.proto

package dnsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	dns "github.com/slntopp/nocloud-proto/dns"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DNSName is the fully-qualified name of the DNS service.
	DNSName = "nocloud.dns.DNS"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DNSGetProcedure is the fully-qualified name of the DNS's Get RPC.
	DNSGetProcedure = "/nocloud.dns.DNS/Get"
	// DNSListProcedure is the fully-qualified name of the DNS's List RPC.
	DNSListProcedure = "/nocloud.dns.DNS/List"
	// DNSPutProcedure is the fully-qualified name of the DNS's Put RPC.
	DNSPutProcedure = "/nocloud.dns.DNS/Put"
	// DNSDeleteProcedure is the fully-qualified name of the DNS's Delete RPC.
	DNSDeleteProcedure = "/nocloud.dns.DNS/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dNSServiceDescriptor      = dns.File_dns_dns_proto.Services().ByName("DNS")
	dNSGetMethodDescriptor    = dNSServiceDescriptor.Methods().ByName("Get")
	dNSListMethodDescriptor   = dNSServiceDescriptor.Methods().ByName("List")
	dNSPutMethodDescriptor    = dNSServiceDescriptor.Methods().ByName("Put")
	dNSDeleteMethodDescriptor = dNSServiceDescriptor.Methods().ByName("Delete")
)

// DNSClient is a client for the nocloud.dns.DNS service.
type DNSClient interface {
	Get(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Zone], error)
	List(context.Context, *connect.Request[dns.ListRequest]) (*connect.Response[dns.ListResponse], error)
	Put(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error)
	Delete(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error)
}

// NewDNSClient constructs a client for the nocloud.dns.DNS service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDNSClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DNSClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dNSClient{
		get: connect.NewClient[dns.Zone, dns.Zone](
			httpClient,
			baseURL+DNSGetProcedure,
			connect.WithSchema(dNSGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[dns.ListRequest, dns.ListResponse](
			httpClient,
			baseURL+DNSListProcedure,
			connect.WithSchema(dNSListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		put: connect.NewClient[dns.Zone, dns.Result](
			httpClient,
			baseURL+DNSPutProcedure,
			connect.WithSchema(dNSPutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[dns.Zone, dns.Result](
			httpClient,
			baseURL+DNSDeleteProcedure,
			connect.WithSchema(dNSDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// dNSClient implements DNSClient.
type dNSClient struct {
	get    *connect.Client[dns.Zone, dns.Zone]
	list   *connect.Client[dns.ListRequest, dns.ListResponse]
	put    *connect.Client[dns.Zone, dns.Result]
	delete *connect.Client[dns.Zone, dns.Result]
}

// Get calls nocloud.dns.DNS.Get.
func (c *dNSClient) Get(ctx context.Context, req *connect.Request[dns.Zone]) (*connect.Response[dns.Zone], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls nocloud.dns.DNS.List.
func (c *dNSClient) List(ctx context.Context, req *connect.Request[dns.ListRequest]) (*connect.Response[dns.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Put calls nocloud.dns.DNS.Put.
func (c *dNSClient) Put(ctx context.Context, req *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error) {
	return c.put.CallUnary(ctx, req)
}

// Delete calls nocloud.dns.DNS.Delete.
func (c *dNSClient) Delete(ctx context.Context, req *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error) {
	return c.delete.CallUnary(ctx, req)
}

// DNSHandler is an implementation of the nocloud.dns.DNS service.
type DNSHandler interface {
	Get(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Zone], error)
	List(context.Context, *connect.Request[dns.ListRequest]) (*connect.Response[dns.ListResponse], error)
	Put(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error)
	Delete(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error)
}

// NewDNSHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDNSHandler(svc DNSHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dNSGetHandler := connect.NewUnaryHandler(
		DNSGetProcedure,
		svc.Get,
		connect.WithSchema(dNSGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dNSListHandler := connect.NewUnaryHandler(
		DNSListProcedure,
		svc.List,
		connect.WithSchema(dNSListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dNSPutHandler := connect.NewUnaryHandler(
		DNSPutProcedure,
		svc.Put,
		connect.WithSchema(dNSPutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dNSDeleteHandler := connect.NewUnaryHandler(
		DNSDeleteProcedure,
		svc.Delete,
		connect.WithSchema(dNSDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.dns.DNS/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DNSGetProcedure:
			dNSGetHandler.ServeHTTP(w, r)
		case DNSListProcedure:
			dNSListHandler.ServeHTTP(w, r)
		case DNSPutProcedure:
			dNSPutHandler.ServeHTTP(w, r)
		case DNSDeleteProcedure:
			dNSDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDNSHandler returns CodeUnimplemented from all methods.
type UnimplementedDNSHandler struct{}

func (UnimplementedDNSHandler) Get(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Zone], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.dns.DNS.Get is not implemented"))
}

func (UnimplementedDNSHandler) List(context.Context, *connect.Request[dns.ListRequest]) (*connect.Response[dns.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.dns.DNS.List is not implemented"))
}

func (UnimplementedDNSHandler) Put(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.dns.DNS.Put is not implemented"))
}

func (UnimplementedDNSHandler) Delete(context.Context, *connect.Request[dns.Zone]) (*connect.Response[dns.Result], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.dns.DNS.Delete is not implemented"))
}
