// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cc/chats.proto

package ccconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	cc "github.com/slntopp/nocloud-proto/cc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "nocloud.cc.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceSendChatMessageProcedure is the fully-qualified name of the ChatService's
	// SendChatMessage RPC.
	ChatServiceSendChatMessageProcedure = "/nocloud.cc.ChatService/SendChatMessage"
	// ChatServiceListChatMessagesProcedure is the fully-qualified name of the ChatService's
	// ListChatMessages RPC.
	ChatServiceListChatMessagesProcedure = "/nocloud.cc.ChatService/ListChatMessages"
	// ChatServiceGetChatMessageProcedure is the fully-qualified name of the ChatService's
	// GetChatMessage RPC.
	ChatServiceGetChatMessageProcedure = "/nocloud.cc.ChatService/GetChatMessage"
	// ChatServiceDeleteChatMessageProcedure is the fully-qualified name of the ChatService's
	// DeleteChatMessage RPC.
	ChatServiceDeleteChatMessageProcedure = "/nocloud.cc.ChatService/DeleteChatMessage"
	// ChatServiceUpdateChatMessageProcedure is the fully-qualified name of the ChatService's
	// UpdateChatMessage RPC.
	ChatServiceUpdateChatMessageProcedure = "/nocloud.cc.ChatService/UpdateChatMessage"
	// ChatServiceGetChatProcedure is the fully-qualified name of the ChatService's GetChat RPC.
	ChatServiceGetChatProcedure = "/nocloud.cc.ChatService/GetChat"
	// ChatServiceInviteProcedure is the fully-qualified name of the ChatService's Invite RPC.
	ChatServiceInviteProcedure = "/nocloud.cc.ChatService/Invite"
	// ChatServiceCreateChatProcedure is the fully-qualified name of the ChatService's CreateChat RPC.
	ChatServiceCreateChatProcedure = "/nocloud.cc.ChatService/CreateChat"
	// ChatServiceDeleteChatProcedure is the fully-qualified name of the ChatService's DeleteChat RPC.
	ChatServiceDeleteChatProcedure = "/nocloud.cc.ChatService/DeleteChat"
	// ChatServiceUpdateChatProcedure is the fully-qualified name of the ChatService's UpdateChat RPC.
	ChatServiceUpdateChatProcedure = "/nocloud.cc.ChatService/UpdateChat"
	// ChatServiceStreamProcedure is the fully-qualified name of the ChatService's Stream RPC.
	ChatServiceStreamProcedure = "/nocloud.cc.ChatService/Stream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chatServiceServiceDescriptor                 = cc.File_cc_chats_proto.Services().ByName("ChatService")
	chatServiceSendChatMessageMethodDescriptor   = chatServiceServiceDescriptor.Methods().ByName("SendChatMessage")
	chatServiceListChatMessagesMethodDescriptor  = chatServiceServiceDescriptor.Methods().ByName("ListChatMessages")
	chatServiceGetChatMessageMethodDescriptor    = chatServiceServiceDescriptor.Methods().ByName("GetChatMessage")
	chatServiceDeleteChatMessageMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("DeleteChatMessage")
	chatServiceUpdateChatMessageMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("UpdateChatMessage")
	chatServiceGetChatMethodDescriptor           = chatServiceServiceDescriptor.Methods().ByName("GetChat")
	chatServiceInviteMethodDescriptor            = chatServiceServiceDescriptor.Methods().ByName("Invite")
	chatServiceCreateChatMethodDescriptor        = chatServiceServiceDescriptor.Methods().ByName("CreateChat")
	chatServiceDeleteChatMethodDescriptor        = chatServiceServiceDescriptor.Methods().ByName("DeleteChat")
	chatServiceUpdateChatMethodDescriptor        = chatServiceServiceDescriptor.Methods().ByName("UpdateChat")
	chatServiceStreamMethodDescriptor            = chatServiceServiceDescriptor.Methods().ByName("Stream")
)

// ChatServiceClient is a client for the nocloud.cc.ChatService service.
type ChatServiceClient interface {
	SendChatMessage(context.Context, *connect.Request[cc.SendChatMessageRequest]) (*connect.Response[cc.ChatMessage], error)
	ListChatMessages(context.Context, *connect.Request[cc.ListChatMessagesRequest]) (*connect.Response[cc.ListChatMessagesResponse], error)
	GetChatMessage(context.Context, *connect.Request[cc.GetChatMessageRequest]) (*connect.Response[cc.ChatMessage], error)
	DeleteChatMessage(context.Context, *connect.Request[cc.DeleteChatMessageRequest]) (*connect.Response[cc.Response], error)
	UpdateChatMessage(context.Context, *connect.Request[cc.ChatMessage]) (*connect.Response[cc.ChatMessage], error)
	GetChat(context.Context, *connect.Request[cc.GetChatRequest]) (*connect.Response[cc.Chat], error)
	Invite(context.Context, *connect.Request[cc.InviteChatRequest]) (*connect.Response[cc.Response], error)
	CreateChat(context.Context, *connect.Request[cc.CreateChatRequest]) (*connect.Response[cc.Chat], error)
	DeleteChat(context.Context, *connect.Request[cc.DeleteChatRequest]) (*connect.Response[cc.Response], error)
	UpdateChat(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	Stream(context.Context, *connect.Request[cc.ChatMessageStreamRequest]) (*connect.ServerStreamForClient[cc.ChatMessage], error)
}

// NewChatServiceClient constructs a client for the nocloud.cc.ChatService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		sendChatMessage: connect.NewClient[cc.SendChatMessageRequest, cc.ChatMessage](
			httpClient,
			baseURL+ChatServiceSendChatMessageProcedure,
			connect.WithSchema(chatServiceSendChatMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listChatMessages: connect.NewClient[cc.ListChatMessagesRequest, cc.ListChatMessagesResponse](
			httpClient,
			baseURL+ChatServiceListChatMessagesProcedure,
			connect.WithSchema(chatServiceListChatMessagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChatMessage: connect.NewClient[cc.GetChatMessageRequest, cc.ChatMessage](
			httpClient,
			baseURL+ChatServiceGetChatMessageProcedure,
			connect.WithSchema(chatServiceGetChatMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteChatMessage: connect.NewClient[cc.DeleteChatMessageRequest, cc.Response](
			httpClient,
			baseURL+ChatServiceDeleteChatMessageProcedure,
			connect.WithSchema(chatServiceDeleteChatMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateChatMessage: connect.NewClient[cc.ChatMessage, cc.ChatMessage](
			httpClient,
			baseURL+ChatServiceUpdateChatMessageProcedure,
			connect.WithSchema(chatServiceUpdateChatMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChat: connect.NewClient[cc.GetChatRequest, cc.Chat](
			httpClient,
			baseURL+ChatServiceGetChatProcedure,
			connect.WithSchema(chatServiceGetChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		invite: connect.NewClient[cc.InviteChatRequest, cc.Response](
			httpClient,
			baseURL+ChatServiceInviteProcedure,
			connect.WithSchema(chatServiceInviteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createChat: connect.NewClient[cc.CreateChatRequest, cc.Chat](
			httpClient,
			baseURL+ChatServiceCreateChatProcedure,
			connect.WithSchema(chatServiceCreateChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteChat: connect.NewClient[cc.DeleteChatRequest, cc.Response](
			httpClient,
			baseURL+ChatServiceDeleteChatProcedure,
			connect.WithSchema(chatServiceDeleteChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateChat: connect.NewClient[cc.Chat, cc.Chat](
			httpClient,
			baseURL+ChatServiceUpdateChatProcedure,
			connect.WithSchema(chatServiceUpdateChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stream: connect.NewClient[cc.ChatMessageStreamRequest, cc.ChatMessage](
			httpClient,
			baseURL+ChatServiceStreamProcedure,
			connect.WithSchema(chatServiceStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	sendChatMessage   *connect.Client[cc.SendChatMessageRequest, cc.ChatMessage]
	listChatMessages  *connect.Client[cc.ListChatMessagesRequest, cc.ListChatMessagesResponse]
	getChatMessage    *connect.Client[cc.GetChatMessageRequest, cc.ChatMessage]
	deleteChatMessage *connect.Client[cc.DeleteChatMessageRequest, cc.Response]
	updateChatMessage *connect.Client[cc.ChatMessage, cc.ChatMessage]
	getChat           *connect.Client[cc.GetChatRequest, cc.Chat]
	invite            *connect.Client[cc.InviteChatRequest, cc.Response]
	createChat        *connect.Client[cc.CreateChatRequest, cc.Chat]
	deleteChat        *connect.Client[cc.DeleteChatRequest, cc.Response]
	updateChat        *connect.Client[cc.Chat, cc.Chat]
	stream            *connect.Client[cc.ChatMessageStreamRequest, cc.ChatMessage]
}

// SendChatMessage calls nocloud.cc.ChatService.SendChatMessage.
func (c *chatServiceClient) SendChatMessage(ctx context.Context, req *connect.Request[cc.SendChatMessageRequest]) (*connect.Response[cc.ChatMessage], error) {
	return c.sendChatMessage.CallUnary(ctx, req)
}

// ListChatMessages calls nocloud.cc.ChatService.ListChatMessages.
func (c *chatServiceClient) ListChatMessages(ctx context.Context, req *connect.Request[cc.ListChatMessagesRequest]) (*connect.Response[cc.ListChatMessagesResponse], error) {
	return c.listChatMessages.CallUnary(ctx, req)
}

// GetChatMessage calls nocloud.cc.ChatService.GetChatMessage.
func (c *chatServiceClient) GetChatMessage(ctx context.Context, req *connect.Request[cc.GetChatMessageRequest]) (*connect.Response[cc.ChatMessage], error) {
	return c.getChatMessage.CallUnary(ctx, req)
}

// DeleteChatMessage calls nocloud.cc.ChatService.DeleteChatMessage.
func (c *chatServiceClient) DeleteChatMessage(ctx context.Context, req *connect.Request[cc.DeleteChatMessageRequest]) (*connect.Response[cc.Response], error) {
	return c.deleteChatMessage.CallUnary(ctx, req)
}

// UpdateChatMessage calls nocloud.cc.ChatService.UpdateChatMessage.
func (c *chatServiceClient) UpdateChatMessage(ctx context.Context, req *connect.Request[cc.ChatMessage]) (*connect.Response[cc.ChatMessage], error) {
	return c.updateChatMessage.CallUnary(ctx, req)
}

// GetChat calls nocloud.cc.ChatService.GetChat.
func (c *chatServiceClient) GetChat(ctx context.Context, req *connect.Request[cc.GetChatRequest]) (*connect.Response[cc.Chat], error) {
	return c.getChat.CallUnary(ctx, req)
}

// Invite calls nocloud.cc.ChatService.Invite.
func (c *chatServiceClient) Invite(ctx context.Context, req *connect.Request[cc.InviteChatRequest]) (*connect.Response[cc.Response], error) {
	return c.invite.CallUnary(ctx, req)
}

// CreateChat calls nocloud.cc.ChatService.CreateChat.
func (c *chatServiceClient) CreateChat(ctx context.Context, req *connect.Request[cc.CreateChatRequest]) (*connect.Response[cc.Chat], error) {
	return c.createChat.CallUnary(ctx, req)
}

// DeleteChat calls nocloud.cc.ChatService.DeleteChat.
func (c *chatServiceClient) DeleteChat(ctx context.Context, req *connect.Request[cc.DeleteChatRequest]) (*connect.Response[cc.Response], error) {
	return c.deleteChat.CallUnary(ctx, req)
}

// UpdateChat calls nocloud.cc.ChatService.UpdateChat.
func (c *chatServiceClient) UpdateChat(ctx context.Context, req *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return c.updateChat.CallUnary(ctx, req)
}

// Stream calls nocloud.cc.ChatService.Stream.
func (c *chatServiceClient) Stream(ctx context.Context, req *connect.Request[cc.ChatMessageStreamRequest]) (*connect.ServerStreamForClient[cc.ChatMessage], error) {
	return c.stream.CallServerStream(ctx, req)
}

// ChatServiceHandler is an implementation of the nocloud.cc.ChatService service.
type ChatServiceHandler interface {
	SendChatMessage(context.Context, *connect.Request[cc.SendChatMessageRequest]) (*connect.Response[cc.ChatMessage], error)
	ListChatMessages(context.Context, *connect.Request[cc.ListChatMessagesRequest]) (*connect.Response[cc.ListChatMessagesResponse], error)
	GetChatMessage(context.Context, *connect.Request[cc.GetChatMessageRequest]) (*connect.Response[cc.ChatMessage], error)
	DeleteChatMessage(context.Context, *connect.Request[cc.DeleteChatMessageRequest]) (*connect.Response[cc.Response], error)
	UpdateChatMessage(context.Context, *connect.Request[cc.ChatMessage]) (*connect.Response[cc.ChatMessage], error)
	GetChat(context.Context, *connect.Request[cc.GetChatRequest]) (*connect.Response[cc.Chat], error)
	Invite(context.Context, *connect.Request[cc.InviteChatRequest]) (*connect.Response[cc.Response], error)
	CreateChat(context.Context, *connect.Request[cc.CreateChatRequest]) (*connect.Response[cc.Chat], error)
	DeleteChat(context.Context, *connect.Request[cc.DeleteChatRequest]) (*connect.Response[cc.Response], error)
	UpdateChat(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error)
	Stream(context.Context, *connect.Request[cc.ChatMessageStreamRequest], *connect.ServerStream[cc.ChatMessage]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceSendChatMessageHandler := connect.NewUnaryHandler(
		ChatServiceSendChatMessageProcedure,
		svc.SendChatMessage,
		connect.WithSchema(chatServiceSendChatMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceListChatMessagesHandler := connect.NewUnaryHandler(
		ChatServiceListChatMessagesProcedure,
		svc.ListChatMessages,
		connect.WithSchema(chatServiceListChatMessagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetChatMessageHandler := connect.NewUnaryHandler(
		ChatServiceGetChatMessageProcedure,
		svc.GetChatMessage,
		connect.WithSchema(chatServiceGetChatMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceDeleteChatMessageHandler := connect.NewUnaryHandler(
		ChatServiceDeleteChatMessageProcedure,
		svc.DeleteChatMessage,
		connect.WithSchema(chatServiceDeleteChatMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateChatMessageHandler := connect.NewUnaryHandler(
		ChatServiceUpdateChatMessageProcedure,
		svc.UpdateChatMessage,
		connect.WithSchema(chatServiceUpdateChatMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetChatHandler := connect.NewUnaryHandler(
		ChatServiceGetChatProcedure,
		svc.GetChat,
		connect.WithSchema(chatServiceGetChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceInviteHandler := connect.NewUnaryHandler(
		ChatServiceInviteProcedure,
		svc.Invite,
		connect.WithSchema(chatServiceInviteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceCreateChatHandler := connect.NewUnaryHandler(
		ChatServiceCreateChatProcedure,
		svc.CreateChat,
		connect.WithSchema(chatServiceCreateChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceDeleteChatHandler := connect.NewUnaryHandler(
		ChatServiceDeleteChatProcedure,
		svc.DeleteChat,
		connect.WithSchema(chatServiceDeleteChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateChatHandler := connect.NewUnaryHandler(
		ChatServiceUpdateChatProcedure,
		svc.UpdateChat,
		connect.WithSchema(chatServiceUpdateChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceStreamHandler := connect.NewServerStreamHandler(
		ChatServiceStreamProcedure,
		svc.Stream,
		connect.WithSchema(chatServiceStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nocloud.cc.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceSendChatMessageProcedure:
			chatServiceSendChatMessageHandler.ServeHTTP(w, r)
		case ChatServiceListChatMessagesProcedure:
			chatServiceListChatMessagesHandler.ServeHTTP(w, r)
		case ChatServiceGetChatMessageProcedure:
			chatServiceGetChatMessageHandler.ServeHTTP(w, r)
		case ChatServiceDeleteChatMessageProcedure:
			chatServiceDeleteChatMessageHandler.ServeHTTP(w, r)
		case ChatServiceUpdateChatMessageProcedure:
			chatServiceUpdateChatMessageHandler.ServeHTTP(w, r)
		case ChatServiceGetChatProcedure:
			chatServiceGetChatHandler.ServeHTTP(w, r)
		case ChatServiceInviteProcedure:
			chatServiceInviteHandler.ServeHTTP(w, r)
		case ChatServiceCreateChatProcedure:
			chatServiceCreateChatHandler.ServeHTTP(w, r)
		case ChatServiceDeleteChatProcedure:
			chatServiceDeleteChatHandler.ServeHTTP(w, r)
		case ChatServiceUpdateChatProcedure:
			chatServiceUpdateChatHandler.ServeHTTP(w, r)
		case ChatServiceStreamProcedure:
			chatServiceStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) SendChatMessage(context.Context, *connect.Request[cc.SendChatMessageRequest]) (*connect.Response[cc.ChatMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.SendChatMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) ListChatMessages(context.Context, *connect.Request[cc.ListChatMessagesRequest]) (*connect.Response[cc.ListChatMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.ListChatMessages is not implemented"))
}

func (UnimplementedChatServiceHandler) GetChatMessage(context.Context, *connect.Request[cc.GetChatMessageRequest]) (*connect.Response[cc.ChatMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.GetChatMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) DeleteChatMessage(context.Context, *connect.Request[cc.DeleteChatMessageRequest]) (*connect.Response[cc.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.DeleteChatMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateChatMessage(context.Context, *connect.Request[cc.ChatMessage]) (*connect.Response[cc.ChatMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.UpdateChatMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) GetChat(context.Context, *connect.Request[cc.GetChatRequest]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.GetChat is not implemented"))
}

func (UnimplementedChatServiceHandler) Invite(context.Context, *connect.Request[cc.InviteChatRequest]) (*connect.Response[cc.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.Invite is not implemented"))
}

func (UnimplementedChatServiceHandler) CreateChat(context.Context, *connect.Request[cc.CreateChatRequest]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.CreateChat is not implemented"))
}

func (UnimplementedChatServiceHandler) DeleteChat(context.Context, *connect.Request[cc.DeleteChatRequest]) (*connect.Response[cc.Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.DeleteChat is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateChat(context.Context, *connect.Request[cc.Chat]) (*connect.Response[cc.Chat], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.UpdateChat is not implemented"))
}

func (UnimplementedChatServiceHandler) Stream(context.Context, *connect.Request[cc.ChatMessageStreamRequest], *connect.ServerStream[cc.ChatMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("nocloud.cc.ChatService.Stream is not implemented"))
}
