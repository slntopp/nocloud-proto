/*
Copyright Â© 2023 Nikita Ivanovski info@slnt-opp.xyz
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package nocloud.ansible;

import "google/api/annotations.proto";

import "access/access.proto";

// Required for Billing Plans and Instances first run
message Software {
  string playbook = 1; // Playbook UUID
  map<string, string> vars = 2; // Playbook Vars
  bool autorun = 3; // Automatically run Playbooks once Instance is RUNNING
  
  string run = 4; // Run UUID when created
  bool done = 5; // Is Playbook finished
}

message Playbook {
  string uuid = 1;
  string logo = 2;
  // Url to or Base64 encoded Image to be used as Playbook logo in the
  // Marketplace
  string title = 3;
  // Filename for playbook yaml
  string description = 4;
  // (optionally Markdown) long description Marketplace like
  string content = 5;
  // Ansible Playbook written in YAML

  repeated string supported_os = 6;
  // List of supported platforms(OS) by this Playbook

  bool private = 7;
  // Is this Playbook visible only for root or not
}

message Run {
  string uuid = 1;                 // Run UUID generated by Ansible Runner
  repeated Instance instances = 2; // Instances to run Playbook at
  string playbook_uuid = 3;        // Playbook to run

  map<string, string> jobs = 4;
  string status = 5;
  int64 rc = 6;

  // Use custom Private Key for SSH (applied to all Instances, can be
  // overriden only with login/pass)
  optional string ssh_key = 7;
  optional nocloud.access.Access access = 8;
  int64 create_time = 9;
  int64 exec_time = 10;
  map<string, string> vars = 11;
  optional Instance hop = 12;
}
message Runs { repeated Run pool = 1; }

message Job {
  string run_uuid = 1;
  string job_uuid = 2;
  string job = 3;
  string status = 4;
  optional int64 rc = 5;
}

message Instance {
  string uuid = 1; // NoCloud Instance UUID

  // SSH Setup
  string host = 2; // SSH accessible hostname(hostname, IP addr, domain name)
  optional string port = 3; // SSH port

  optional string user = 4; // SSH User
  optional string pass = 5; // SSH Password
  optional string ansible_host = 6; // Ansible Jump Host
  optional string python = 7;
}

message CreateRunRequest {
  Run run = 1;
  optional string namespace = 2;
}
message GetRunRequest { string uuid = 1; }

message ListRunsRequest {}

message ExecRunRequest {
  string uuid = 1;
  bool wait_finish = 2;
}
message ResyncRunRequest { string uuid = 1; }

message ExecRunResponse {
  message Error{
    string host = 1;
    string error = 2;
  }
  string status = 1;
  Error error = 2;
}

message WatchRunRequest { string uuid = 1; }

message DeleteRunRequest { string uuid = 1; }
message DeleteRunResponse {}

message ListPlaybooksRequest {}
message ListPlaybooksResponse { repeated Playbook playbooks = 1; }

message GetPlaybookRequest { string uuid = 1; }

message GetPlaybookResponse { Playbook playbook = 1; }

message DeletePlaybookRequest { string uuid = 1; }

message DeletePlaybookResponse {}

message UpdatePlaybookRequest { Playbook playbook = 1; }

message UpdatePlaybookResponse { Playbook playbook = 1; }

message CreatePlaybookRequest { Playbook playbook = 1; }

message CreatePlaybookResponse { Playbook playbook = 1; }

service AnsibleService {
  rpc Get(GetRunRequest) returns (Run) {
    option (google.api.http) = {
      get : "/ansible/runs/{uuid}"
    };
  };
  rpc List(ListRunsRequest) returns (Runs) {
    option (google.api.http) = {
      get : "/ansible/runs"
    };
  }
  rpc Create(CreateRunRequest) returns (Run) {
    option (google.api.http) = {
      post : "/ansible/runs"
      body : "*"
    };
  };
  rpc Exec(ExecRunRequest) returns (ExecRunResponse) {
    option (google.api.http) = {
      post : "/ansible/runs/{uuid}/exec"
      body : "*"
    };
  };
  rpc Watch(WatchRunRequest) returns (stream Job) {
    option (google.api.http) = {
      get : "/ansible/runs/{uuid}/watch"
    };
  };
  rpc Delete(DeleteRunRequest) returns (DeleteRunResponse) {
    option (google.api.http) = {
      delete : "/ansible/runs/{uuid}"
    };
  };
  rpc Resync(ResyncRunRequest) returns (Run) {
    option (google.api.http) = {
      post : "/ansible/runs/{uuid}/resync"
    };
  };
}

service PlaybooksService {
  rpc Get(GetPlaybookRequest) returns (GetPlaybookResponse) {
    option (google.api.http) = {
      get : "/ansible/playbooks/{uuid}"
    };
  };
  rpc List(ListPlaybooksRequest) returns (ListPlaybooksResponse) {
    option (google.api.http) = {
      get : "/ansible/playbooks"
    };
  };
  rpc Create(CreatePlaybookRequest) returns (CreatePlaybookResponse) {
    option (google.api.http) = {
      post : "/ansible/playbooks"
      body : "*"
    };
  };
  rpc Update(UpdatePlaybookRequest) returns (UpdatePlaybookResponse) {
    option (google.api.http) = {
      post : "/ansible/playbooks/{playbook.uuid}"
      body : "*"
    };
  };
  rpc Delete(DeletePlaybookRequest) returns (DeletePlaybookResponse) {
    option (google.api.http) = {
      delete : "/ansible/playbooks/{uuid}"
    };
  };
}