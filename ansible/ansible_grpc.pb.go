// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ansible/ansible.proto

package ansible

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnsibleServiceClient is the client API for AnsibleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnsibleServiceClient interface {
	Get(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*Run, error)
	Delete(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteRunResponse, error)
	Create(ctx context.Context, in *Run, opts ...grpc.CallOption) (*Run, error)
	Exec(ctx context.Context, in *ExecRunRequest, opts ...grpc.CallOption) (AnsibleService_ExecClient, error)
	Watch(ctx context.Context, in *WatchRunRequest, opts ...grpc.CallOption) (AnsibleService_WatchClient, error)
}

type ansibleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnsibleServiceClient(cc grpc.ClientConnInterface) AnsibleServiceClient {
	return &ansibleServiceClient{cc}
}

func (c *ansibleServiceClient) Get(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/nocloud.ansible.AnsibleService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Delete(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteRunResponse, error) {
	out := new(DeleteRunResponse)
	err := c.cc.Invoke(ctx, "/nocloud.ansible.AnsibleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Create(ctx context.Context, in *Run, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/nocloud.ansible.AnsibleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Exec(ctx context.Context, in *ExecRunRequest, opts ...grpc.CallOption) (AnsibleService_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnsibleService_ServiceDesc.Streams[0], "/nocloud.ansible.AnsibleService/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleServiceExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleService_ExecClient interface {
	Recv() (*Run, error)
	grpc.ClientStream
}

type ansibleServiceExecClient struct {
	grpc.ClientStream
}

func (x *ansibleServiceExecClient) Recv() (*Run, error) {
	m := new(Run)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ansibleServiceClient) Watch(ctx context.Context, in *WatchRunRequest, opts ...grpc.CallOption) (AnsibleService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnsibleService_ServiceDesc.Streams[1], "/nocloud.ansible.AnsibleService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleService_WatchClient interface {
	Recv() (*Run, error)
	grpc.ClientStream
}

type ansibleServiceWatchClient struct {
	grpc.ClientStream
}

func (x *ansibleServiceWatchClient) Recv() (*Run, error) {
	m := new(Run)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnsibleServiceServer is the server API for AnsibleService service.
// All implementations must embed UnimplementedAnsibleServiceServer
// for forward compatibility
type AnsibleServiceServer interface {
	Get(context.Context, *GetRunRequest) (*Run, error)
	Delete(context.Context, *DeleteRunRequest) (*DeleteRunResponse, error)
	Create(context.Context, *Run) (*Run, error)
	Exec(*ExecRunRequest, AnsibleService_ExecServer) error
	Watch(*WatchRunRequest, AnsibleService_WatchServer) error
	mustEmbedUnimplementedAnsibleServiceServer()
}

// UnimplementedAnsibleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnsibleServiceServer struct {
}

func (UnimplementedAnsibleServiceServer) Get(context.Context, *GetRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAnsibleServiceServer) Delete(context.Context, *DeleteRunRequest) (*DeleteRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAnsibleServiceServer) Create(context.Context, *Run) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAnsibleServiceServer) Exec(*ExecRunRequest, AnsibleService_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedAnsibleServiceServer) Watch(*WatchRunRequest, AnsibleService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedAnsibleServiceServer) mustEmbedUnimplementedAnsibleServiceServer() {}

// UnsafeAnsibleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnsibleServiceServer will
// result in compilation errors.
type UnsafeAnsibleServiceServer interface {
	mustEmbedUnimplementedAnsibleServiceServer()
}

func RegisterAnsibleServiceServer(s grpc.ServiceRegistrar, srv AnsibleServiceServer) {
	s.RegisterService(&AnsibleService_ServiceDesc, srv)
}

func _AnsibleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.ansible.AnsibleService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Get(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.ansible.AnsibleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Delete(ctx, req.(*DeleteRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Run)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.ansible.AnsibleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Create(ctx, req.(*Run))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleServiceServer).Exec(m, &ansibleServiceExecServer{stream})
}

type AnsibleService_ExecServer interface {
	Send(*Run) error
	grpc.ServerStream
}

type ansibleServiceExecServer struct {
	grpc.ServerStream
}

func (x *ansibleServiceExecServer) Send(m *Run) error {
	return x.ServerStream.SendMsg(m)
}

func _AnsibleService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleServiceServer).Watch(m, &ansibleServiceWatchServer{stream})
}

type AnsibleService_WatchServer interface {
	Send(*Run) error
	grpc.ServerStream
}

type ansibleServiceWatchServer struct {
	grpc.ServerStream
}

func (x *ansibleServiceWatchServer) Send(m *Run) error {
	return x.ServerStream.SendMsg(m)
}

// AnsibleService_ServiceDesc is the grpc.ServiceDesc for AnsibleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnsibleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.ansible.AnsibleService",
	HandlerType: (*AnsibleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AnsibleService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AnsibleService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AnsibleService_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _AnsibleService_Exec_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _AnsibleService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ansible/ansible.proto",
}
