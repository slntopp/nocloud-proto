//
//Copyright Â© 2023 Nikita Ivanovski info@slnt-opp.xyz
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ansible/ansible.proto

package ansible

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnsibleService_Get_FullMethodName    = "/nocloud.ansible.AnsibleService/Get"
	AnsibleService_List_FullMethodName   = "/nocloud.ansible.AnsibleService/List"
	AnsibleService_Create_FullMethodName = "/nocloud.ansible.AnsibleService/Create"
	AnsibleService_Exec_FullMethodName   = "/nocloud.ansible.AnsibleService/Exec"
	AnsibleService_Watch_FullMethodName  = "/nocloud.ansible.AnsibleService/Watch"
	AnsibleService_Delete_FullMethodName = "/nocloud.ansible.AnsibleService/Delete"
	AnsibleService_Resync_FullMethodName = "/nocloud.ansible.AnsibleService/Resync"
)

// AnsibleServiceClient is the client API for AnsibleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnsibleServiceClient interface {
	Get(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*Run, error)
	List(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*Runs, error)
	Create(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*Run, error)
	Exec(ctx context.Context, in *ExecRunRequest, opts ...grpc.CallOption) (*ExecRunResponse, error)
	Watch(ctx context.Context, in *WatchRunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Job], error)
	Delete(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteRunResponse, error)
	Resync(ctx context.Context, in *ResyncRunRequest, opts ...grpc.CallOption) (*Run, error)
}

type ansibleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnsibleServiceClient(cc grpc.ClientConnInterface) AnsibleServiceClient {
	return &ansibleServiceClient{cc}
}

func (c *ansibleServiceClient) Get(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*Run, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Run)
	err := c.cc.Invoke(ctx, AnsibleService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) List(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*Runs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Runs)
	err := c.cc.Invoke(ctx, AnsibleService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Create(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*Run, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Run)
	err := c.cc.Invoke(ctx, AnsibleService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Exec(ctx context.Context, in *ExecRunRequest, opts ...grpc.CallOption) (*ExecRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecRunResponse)
	err := c.cc.Invoke(ctx, AnsibleService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Watch(ctx context.Context, in *WatchRunRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Job], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AnsibleService_ServiceDesc.Streams[0], AnsibleService_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRunRequest, Job]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnsibleService_WatchClient = grpc.ServerStreamingClient[Job]

func (c *ansibleServiceClient) Delete(ctx context.Context, in *DeleteRunRequest, opts ...grpc.CallOption) (*DeleteRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRunResponse)
	err := c.cc.Invoke(ctx, AnsibleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleServiceClient) Resync(ctx context.Context, in *ResyncRunRequest, opts ...grpc.CallOption) (*Run, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Run)
	err := c.cc.Invoke(ctx, AnsibleService_Resync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnsibleServiceServer is the server API for AnsibleService service.
// All implementations must embed UnimplementedAnsibleServiceServer
// for forward compatibility.
type AnsibleServiceServer interface {
	Get(context.Context, *GetRunRequest) (*Run, error)
	List(context.Context, *ListRunsRequest) (*Runs, error)
	Create(context.Context, *CreateRunRequest) (*Run, error)
	Exec(context.Context, *ExecRunRequest) (*ExecRunResponse, error)
	Watch(*WatchRunRequest, grpc.ServerStreamingServer[Job]) error
	Delete(context.Context, *DeleteRunRequest) (*DeleteRunResponse, error)
	Resync(context.Context, *ResyncRunRequest) (*Run, error)
	mustEmbedUnimplementedAnsibleServiceServer()
}

// UnimplementedAnsibleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnsibleServiceServer struct{}

func (UnimplementedAnsibleServiceServer) Get(context.Context, *GetRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAnsibleServiceServer) List(context.Context, *ListRunsRequest) (*Runs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAnsibleServiceServer) Create(context.Context, *CreateRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAnsibleServiceServer) Exec(context.Context, *ExecRunRequest) (*ExecRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedAnsibleServiceServer) Watch(*WatchRunRequest, grpc.ServerStreamingServer[Job]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedAnsibleServiceServer) Delete(context.Context, *DeleteRunRequest) (*DeleteRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAnsibleServiceServer) Resync(context.Context, *ResyncRunRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resync not implemented")
}
func (UnimplementedAnsibleServiceServer) mustEmbedUnimplementedAnsibleServiceServer() {}
func (UnimplementedAnsibleServiceServer) testEmbeddedByValue()                        {}

// UnsafeAnsibleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnsibleServiceServer will
// result in compilation errors.
type UnsafeAnsibleServiceServer interface {
	mustEmbedUnimplementedAnsibleServiceServer()
}

func RegisterAnsibleServiceServer(s grpc.ServiceRegistrar, srv AnsibleServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnsibleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnsibleService_ServiceDesc, srv)
}

func _AnsibleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsibleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Get(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsibleService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).List(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsibleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Create(ctx, req.(*CreateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsibleService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Exec(ctx, req.(*ExecRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleServiceServer).Watch(m, &grpc.GenericServerStream[WatchRunRequest, Job]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnsibleService_WatchServer = grpc.ServerStreamingServer[Job]

func _AnsibleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsibleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Delete(ctx, req.(*DeleteRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsibleService_Resync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsibleServiceServer).Resync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsibleService_Resync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsibleServiceServer).Resync(ctx, req.(*ResyncRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnsibleService_ServiceDesc is the grpc.ServiceDesc for AnsibleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnsibleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.ansible.AnsibleService",
	HandlerType: (*AnsibleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AnsibleService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AnsibleService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AnsibleService_Create_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _AnsibleService_Exec_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AnsibleService_Delete_Handler,
		},
		{
			MethodName: "Resync",
			Handler:    _AnsibleService_Resync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _AnsibleService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ansible/ansible.proto",
}

const (
	PlaybooksService_Get_FullMethodName    = "/nocloud.ansible.PlaybooksService/Get"
	PlaybooksService_List_FullMethodName   = "/nocloud.ansible.PlaybooksService/List"
	PlaybooksService_Create_FullMethodName = "/nocloud.ansible.PlaybooksService/Create"
	PlaybooksService_Update_FullMethodName = "/nocloud.ansible.PlaybooksService/Update"
	PlaybooksService_Delete_FullMethodName = "/nocloud.ansible.PlaybooksService/Delete"
)

// PlaybooksServiceClient is the client API for PlaybooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaybooksServiceClient interface {
	Get(ctx context.Context, in *GetPlaybookRequest, opts ...grpc.CallOption) (*GetPlaybookResponse, error)
	List(ctx context.Context, in *ListPlaybooksRequest, opts ...grpc.CallOption) (*ListPlaybooksResponse, error)
	Create(ctx context.Context, in *CreatePlaybookRequest, opts ...grpc.CallOption) (*CreatePlaybookResponse, error)
	Update(ctx context.Context, in *UpdatePlaybookRequest, opts ...grpc.CallOption) (*UpdatePlaybookResponse, error)
	Delete(ctx context.Context, in *DeletePlaybookRequest, opts ...grpc.CallOption) (*DeletePlaybookResponse, error)
}

type playbooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaybooksServiceClient(cc grpc.ClientConnInterface) PlaybooksServiceClient {
	return &playbooksServiceClient{cc}
}

func (c *playbooksServiceClient) Get(ctx context.Context, in *GetPlaybookRequest, opts ...grpc.CallOption) (*GetPlaybookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaybookResponse)
	err := c.cc.Invoke(ctx, PlaybooksService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbooksServiceClient) List(ctx context.Context, in *ListPlaybooksRequest, opts ...grpc.CallOption) (*ListPlaybooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlaybooksResponse)
	err := c.cc.Invoke(ctx, PlaybooksService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbooksServiceClient) Create(ctx context.Context, in *CreatePlaybookRequest, opts ...grpc.CallOption) (*CreatePlaybookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlaybookResponse)
	err := c.cc.Invoke(ctx, PlaybooksService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbooksServiceClient) Update(ctx context.Context, in *UpdatePlaybookRequest, opts ...grpc.CallOption) (*UpdatePlaybookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlaybookResponse)
	err := c.cc.Invoke(ctx, PlaybooksService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbooksServiceClient) Delete(ctx context.Context, in *DeletePlaybookRequest, opts ...grpc.CallOption) (*DeletePlaybookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePlaybookResponse)
	err := c.cc.Invoke(ctx, PlaybooksService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaybooksServiceServer is the server API for PlaybooksService service.
// All implementations must embed UnimplementedPlaybooksServiceServer
// for forward compatibility.
type PlaybooksServiceServer interface {
	Get(context.Context, *GetPlaybookRequest) (*GetPlaybookResponse, error)
	List(context.Context, *ListPlaybooksRequest) (*ListPlaybooksResponse, error)
	Create(context.Context, *CreatePlaybookRequest) (*CreatePlaybookResponse, error)
	Update(context.Context, *UpdatePlaybookRequest) (*UpdatePlaybookResponse, error)
	Delete(context.Context, *DeletePlaybookRequest) (*DeletePlaybookResponse, error)
	mustEmbedUnimplementedPlaybooksServiceServer()
}

// UnimplementedPlaybooksServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlaybooksServiceServer struct{}

func (UnimplementedPlaybooksServiceServer) Get(context.Context, *GetPlaybookRequest) (*GetPlaybookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPlaybooksServiceServer) List(context.Context, *ListPlaybooksRequest) (*ListPlaybooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPlaybooksServiceServer) Create(context.Context, *CreatePlaybookRequest) (*CreatePlaybookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlaybooksServiceServer) Update(context.Context, *UpdatePlaybookRequest) (*UpdatePlaybookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlaybooksServiceServer) Delete(context.Context, *DeletePlaybookRequest) (*DeletePlaybookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlaybooksServiceServer) mustEmbedUnimplementedPlaybooksServiceServer() {}
func (UnimplementedPlaybooksServiceServer) testEmbeddedByValue()                          {}

// UnsafePlaybooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaybooksServiceServer will
// result in compilation errors.
type UnsafePlaybooksServiceServer interface {
	mustEmbedUnimplementedPlaybooksServiceServer()
}

func RegisterPlaybooksServiceServer(s grpc.ServiceRegistrar, srv PlaybooksServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlaybooksServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlaybooksService_ServiceDesc, srv)
}

func _PlaybooksService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaybookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybooksServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybooksService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybooksServiceServer).Get(ctx, req.(*GetPlaybookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybooksService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlaybooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybooksServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybooksService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybooksServiceServer).List(ctx, req.(*ListPlaybooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybooksService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaybookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybooksServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybooksService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybooksServiceServer).Create(ctx, req.(*CreatePlaybookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybooksService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaybookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybooksServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybooksService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybooksServiceServer).Update(ctx, req.(*UpdatePlaybookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybooksService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaybookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybooksServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybooksService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybooksServiceServer).Delete(ctx, req.(*DeletePlaybookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaybooksService_ServiceDesc is the grpc.ServiceDesc for PlaybooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaybooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.ansible.PlaybooksService",
	HandlerType: (*PlaybooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PlaybooksService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PlaybooksService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PlaybooksService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlaybooksService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlaybooksService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ansible/ansible.proto",
}
