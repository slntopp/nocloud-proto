/*
Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.instances;

import "google/protobuf/struct.proto";
import "hasher/hasherpb/hasher.proto";
import "states/states.proto";
import "billing/billing.proto";
import "services_providers/services_providers.proto";
import "google/api/annotations.proto";
import "access/access.proto";

enum InstanceStatus {
  UNSPECIFIED = 0;
  INIT = 1;
  MODIFIED = 2;
  UP = 3;
  DOWN = 4;
  DEL = 5;
  SUS = 6;
}

message Instance {
  string uuid = 1;
  string title = 2;
  InstanceStatus status = 3;
  map<string, google.protobuf.Value> config = 4
      [ (nocloud.hasher.hashed) = true ];
  map<string, google.protobuf.Value> resources = 5
      [ (nocloud.hasher.hashed) = true ];
  map<string, google.protobuf.Value> data = 6;
  nocloud.states.State state = 7;
  string hash = 8 [ (nocloud.hasher.hash) = true ];
  nocloud.billing.Plan billing_plan = 9 [ (nocloud.hasher.skipped) = true ];
  optional string product = 10;
  optional nocloud.access.Access access = 11;
}

message InstancesGroup {
  string uuid = 1;
  string type = 2;
  string title = 3;
  InstanceStatus status = 4;
  map<string, google.protobuf.Value> config = 5
      [ (nocloud.hasher.hashed) = true ];
  repeated Instance instances = 6 [ (nocloud.hasher.hashed) = true ];
  map<string, google.protobuf.Value> resources = 7
      [ (nocloud.hasher.hashed) = true ];
  map<string, google.protobuf.Value> data = 8;
  string hash = 9 [ (nocloud.hasher.hash) = true ];
  optional string sp = 10;
  optional nocloud.access.Access access = 11;
}

message TestInstancesGroupConfigRequest {
  InstancesGroup group = 1;
  nocloud.services_providers.ServicesProvider sp = 2;
}

message TestInstancesGroupConfigError {
  string error = 1;
  string instance = 2;
}

message TestInstancesGroupConfigResponse {
  bool result = 1;
  repeated TestInstancesGroupConfigError errors = 2;
}

message InvokeRequest {
  string uuid = 1;
  string method = 2;
  map<string, google.protobuf.Value> params = 3;
}

message InvokeResponse {
  bool result = 1;
  map<string, google.protobuf.Value> meta = 2;
}

message DeleteRequest { string uuid = 1; }

message DeleteResponse {
  bool result = 1;
  map<string, google.protobuf.Value> meta = 2;
}

message TransferRequest {
  string uuid = 1;
  string service = 2;
}

message TransferResponse {
  bool result = 1;
  map<string, google.protobuf.Value> meta = 2;
}

message ObjectData {
  string uuid = 1;
  map<string, google.protobuf.Value> data = 2;
}

service InstancesService {
  rpc Invoke(nocloud.instances.InvokeRequest)
      returns (nocloud.instances.InvokeResponse) {
    option (google.api.http) = {
      post : "/instances/{uuid}/invoke"
      body : "*"
    };
  };
  rpc Delete(nocloud.instances.DeleteRequest)
      returns (nocloud.instances.DeleteResponse) {
    option (google.api.http) = {
      delete : "/instances/{uuid}"
    };
  };
  rpc Transfer(nocloud.instances.TransferRequest)
      returns (nocloud.instances.TransferResponse) {
    option (google.api.http) = {
      post : "/igs/{uuid}"
      body : "*"
    };
  };
}
