/*
Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package nocloud.instances;

import "access/access.proto";
import "ansible/ansible.proto";
import "billing/billing.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "hasher/hasherpb/hasher.proto";
import "notes/notes.proto";
import "services_providers/services_providers.proto";
import "states/states.proto";
import "statuses/statuses.proto";

message Instance {
    string uuid = 1;
    string title = 2;
    statuses.NoCloudStatus status = 3;

    map<string, google.protobuf.Value> config = 4
    [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> resources = 5
    [(nocloud.hasher.hashed) = true];

    map<string, google.protobuf.Value> data = 6;
    nocloud.states.State state = 7;

    string hash = 8 [(nocloud.hasher.hash) = true];

    nocloud.billing.Plan billing_plan = 9 [(nocloud.hasher.skipped) = true];
    optional string product = 10;

    optional nocloud.access.Access access = 11;
    int64 created = 12;

    repeated nocloud.ansible.Software software = 13; // Must match contain all the software from the Billing Plan
    repeated notes.AdminNote admin_notes = 14;
    int64 deleted = 15;
}

message InstancesGroup {
    string uuid = 1;
    string type = 2;
    string title = 3;
    statuses.NoCloudStatus status = 4;
    map<string, google.protobuf.Value> config = 5
    [(nocloud.hasher.hashed) = true];
    repeated Instance instances = 6 [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> resources = 7
    [(nocloud.hasher.hashed) = true];
    map<string, google.protobuf.Value> data = 8;
    string hash = 9 [(nocloud.hasher.hash) = true];
    optional string sp = 10;
    optional nocloud.access.Access access = 11;
}

message TestInstancesGroupConfigRequest {
    InstancesGroup group = 1;
    nocloud.services_providers.ServicesProvider sp = 2;
    repeated string estimate_instances = 3; // UUIDs of instances to estimate cost
}

message TestInstancesGroupConfigError {
    string error = 1;
    string instance = 2;
}

message InstanceCostEstimation {
    nocloud.billing.CostEstimation down_payment = 1;
    nocloud.billing.CostEstimation general = 2;
}

message TestInstancesGroupConfigResponse {
    bool result = 1;
    repeated TestInstancesGroupConfigError errors = 2;
    map<string, InstanceCostEstimation> estimations = 3;
}

message InvokeRequest {
    string uuid = 1;
    string method = 2;
    map<string, google.protobuf.Value> params = 3;
}

message InvokeResponse {
    bool result = 1;
    map<string, google.protobuf.Value> meta = 2;
}

message DeleteRequest {string uuid = 1;}

message DeleteResponse {
    bool result = 1;
    map<string, google.protobuf.Value> meta = 2;
}

message TransferIGRequest {
    string uuid = 1;
    string service = 2;
}

message TransferIGResponse {
    bool result = 1;
    map<string, google.protobuf.Value> meta = 2;
}

message TransferInstanceRequest {
    string uuid = 1;
    string ig = 2;
}

message TransferInstanceResponse {
    bool result = 1;
    map<string, google.protobuf.Value> meta = 2;
}

message ObjectData {
    string uuid = 1;
    map<string, google.protobuf.Value> data = 2;
}

message ListInstancesRequest {
    optional uint64 page = 1;
    optional uint64 limit = 2;
    optional string field = 3;
    optional string sort = 4;
  
    map<string, google.protobuf.Value> filters = 5;
}

message ResponseInstance {
    Instance instance = 1;
    string service = 2;
    string sp = 3;
    string type = 4;
}

message ListInstancesResponse {
  repeated ResponseInstance pool = 1;
  int64 count = 2;
}

service InstancesService {
    rpc Invoke (nocloud.instances.InvokeRequest)
            returns (nocloud.instances.InvokeResponse) {
        option (google.api.http) = {
            post: "/instances/{uuid}/invoke"
            body: "*"
        };
    };
    rpc Delete (nocloud.instances.DeleteRequest)
            returns (nocloud.instances.DeleteResponse) {
        option (google.api.http) = {
            delete: "/instances/{uuid}"
        };
    };
    rpc AddNote (nocloud.notes.AddNoteRequest)
            returns (nocloud.notes.NoteResponse) {
        option (google.api.http) = {
            post: "/instances/{uuid}/note"
            body: "*"
        };
    };
    rpc PatchNote (nocloud.notes.PatchNoteRequest)
            returns (nocloud.notes.NoteResponse) {
        option (google.api.http) = {
            patch: "/instances/{uuid}/note"
            body: "*"
        };
    };
    rpc RemoveNote (nocloud.notes.RemoveNoteRequest)
            returns (nocloud.notes.NoteResponse) {
        option (google.api.http) = {
            delete: "/instances/{uuid}/note"
        };
    };
    rpc Detach (nocloud.instances.DeleteRequest)
            returns (nocloud.instances.DeleteResponse) {
        option (google.api.http) = {
            delete: "/instances/detach/{uuid}"
        };
    };
    rpc Attach (nocloud.instances.DeleteRequest)
            returns (nocloud.instances.DeleteResponse) {
        option (google.api.http) = {
            delete: "/instances/attach/{uuid}"
        };
    };
    rpc List (nocloud.instances.ListInstancesRequest)
            returns (nocloud.instances.ListInstancesResponse) {
        option (google.api.http) = {
            post: "/instances"
            body: "*"
        };
    };
    rpc TransferIG (nocloud.instances.TransferIGRequest)
            returns (nocloud.instances.TransferIGResponse) {
        option (google.api.http) = {
            post: "/igs/{uuid}"
            body: "*"
        };
    };
    rpc TransferInstance (nocloud.instances.TransferInstanceRequest)
            returns (nocloud.instances.TransferInstanceResponse) {
        option (google.api.http) = {
            post: "/instances/{uuid}"
            body: "*"
        };
    };
}
