//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=js+dts"
// @generated from file dns/dns.proto (package nocloud.dns, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message nocloud.dns.Record
 */
export declare class Record extends Message<Record> {
  /**
   * @generated from field: repeated nocloud.dns.Record.A a = 1;
   */
  a: Record_A[];

  /**
   * @generated from field: repeated nocloud.dns.Record.AAAA aaaa = 2;
   */
  aaaa: Record_AAAA[];

  /**
   * @generated from field: repeated nocloud.dns.Record.CNAME cname = 3;
   */
  cname: Record_CNAME[];

  /**
   * @generated from field: repeated nocloud.dns.Record.TXT txt = 4;
   */
  txt: Record_TXT[];

  constructor(data?: PartialMessage<Record>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Record";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record;

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.Record.A
 */
export declare class Record_A extends Message<Record_A> {
  /**
   * @generated from field: string ip = 1;
   */
  ip: string;

  /**
   * @generated from field: int32 ttl = 2;
   */
  ttl: number;

  constructor(data?: PartialMessage<Record_A>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Record.A";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record_A;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record_A;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record_A;

  static equals(a: Record_A | PlainMessage<Record_A> | undefined, b: Record_A | PlainMessage<Record_A> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.Record.AAAA
 */
export declare class Record_AAAA extends Message<Record_AAAA> {
  /**
   * @generated from field: string ip = 1;
   */
  ip: string;

  /**
   * @generated from field: int32 ttl = 2;
   */
  ttl: number;

  constructor(data?: PartialMessage<Record_AAAA>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Record.AAAA";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record_AAAA;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record_AAAA;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record_AAAA;

  static equals(a: Record_AAAA | PlainMessage<Record_AAAA> | undefined, b: Record_AAAA | PlainMessage<Record_AAAA> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.Record.CNAME
 */
export declare class Record_CNAME extends Message<Record_CNAME> {
  /**
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * @generated from field: int32 ttl = 2;
   */
  ttl: number;

  constructor(data?: PartialMessage<Record_CNAME>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Record.CNAME";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record_CNAME;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record_CNAME;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record_CNAME;

  static equals(a: Record_CNAME | PlainMessage<Record_CNAME> | undefined, b: Record_CNAME | PlainMessage<Record_CNAME> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.Record.TXT
 */
export declare class Record_TXT extends Message<Record_TXT> {
  /**
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * @generated from field: int32 ttl = 2;
   */
  ttl: number;

  constructor(data?: PartialMessage<Record_TXT>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Record.TXT";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record_TXT;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record_TXT;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record_TXT;

  static equals(a: Record_TXT | PlainMessage<Record_TXT> | undefined, b: Record_TXT | PlainMessage<Record_TXT> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.Zone
 */
export declare class Zone extends Message<Zone> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: map<string, nocloud.dns.Record> locations = 2;
   */
  locations: { [key: string]: Record };

  constructor(data?: PartialMessage<Zone>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Zone";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Zone;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Zone;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Zone;

  static equals(a: Zone | PlainMessage<Zone> | undefined, b: Zone | PlainMessage<Zone> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.ListRequest
 */
export declare class ListRequest extends Message<ListRequest> {
  constructor(data?: PartialMessage<ListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.ListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest;

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.ListResponse
 */
export declare class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated string zones = 1;
   */
  zones: string[];

  constructor(data?: PartialMessage<ListResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.ListResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse;

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean;
}

/**
 * @generated from message nocloud.dns.Result
 */
export declare class Result extends Message<Result> {
  /**
   * @generated from field: int64 result = 1;
   */
  result: bigint;

  constructor(data?: PartialMessage<Result>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nocloud.dns.Result";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Result;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Result;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Result;

  static equals(a: Result | PlainMessage<Result> | undefined, b: Result | PlainMessage<Result> | undefined): boolean;
}

