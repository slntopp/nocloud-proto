//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file health/health.proto (package nocloud.health, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file health/health.proto.
 */
export declare const file_health_health: GenFile;

/**
 * @generated from message nocloud.health.ProbeRequest
 */
export declare type ProbeRequest = Message<"nocloud.health.ProbeRequest"> & {
  /**
   * @generated from field: string probe_type = 1;
   */
  probeType: string;

  /**
   * @generated from field: string payload = 2;
   */
  payload: string;
};

/**
 * Describes the message nocloud.health.ProbeRequest.
 * Use `create(ProbeRequestSchema)` to create a new message.
 */
export declare const ProbeRequestSchema: GenMessage<ProbeRequest>;

/**
 * @generated from message nocloud.health.ProbeResponse
 */
export declare type ProbeResponse = Message<"nocloud.health.ProbeResponse"> & {
  /**
   * @generated from field: string response = 1;
   */
  response: string;

  /**
   * @generated from field: nocloud.health.Status status = 2;
   */
  status: Status;

  /**
   * @generated from field: repeated nocloud.health.ServingStatus serving = 3;
   */
  serving: ServingStatus[];

  /**
   * @generated from field: repeated nocloud.health.RoutineStatus routines = 4;
   */
  routines: RoutineStatus[];
};

/**
 * Describes the message nocloud.health.ProbeResponse.
 * Use `create(ProbeResponseSchema)` to create a new message.
 */
export declare const ProbeResponseSchema: GenMessage<ProbeResponse>;

/**
 * @generated from message nocloud.health.ServingStatus
 */
export declare type ServingStatus = Message<"nocloud.health.ServingStatus"> & {
  /**
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * @generated from field: nocloud.health.Status status = 2;
   */
  status: Status;

  /**
   * @generated from field: optional string error = 3;
   */
  error?: string;
};

/**
 * Describes the message nocloud.health.ServingStatus.
 * Use `create(ServingStatusSchema)` to create a new message.
 */
export declare const ServingStatusSchema: GenMessage<ServingStatus>;

/**
 * @generated from message nocloud.health.RoutineStatus
 */
export declare type RoutineStatus = Message<"nocloud.health.RoutineStatus"> & {
  /**
   * @generated from field: string routine = 1;
   */
  routine: string;

  /**
   * @generated from field: nocloud.health.ServingStatus status = 2;
   */
  status?: ServingStatus;

  /**
   * @generated from field: string last_execution = 3;
   */
  lastExecution: string;
};

/**
 * Describes the message nocloud.health.RoutineStatus.
 * Use `create(RoutineStatusSchema)` to create a new message.
 */
export declare const RoutineStatusSchema: GenMessage<RoutineStatus>;

/**
 * @generated from message nocloud.health.RoutinesStatus
 */
export declare type RoutinesStatus = Message<"nocloud.health.RoutinesStatus"> & {
  /**
   * @generated from field: repeated nocloud.health.RoutineStatus routines = 1;
   */
  routines: RoutineStatus[];
};

/**
 * Describes the message nocloud.health.RoutinesStatus.
 * Use `create(RoutinesStatusSchema)` to create a new message.
 */
export declare const RoutinesStatusSchema: GenMessage<RoutinesStatus>;

/**
 * @generated from enum nocloud.health.Status
 */
export enum Status {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Service is up and running
   *
   * @generated from enum value: SERVING = 1;
   */
  SERVING = 1,

  /**
   * Service is offline(down)
   *
   * @generated from enum value: OFFLINE = 2;
   */
  OFFLINE = 2,

  /**
   * Routine is running
   *
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * Routine is stopped
   *
   * @generated from enum value: STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * Internal error while making status
   *
   * @generated from enum value: INTERNAL = 5;
   */
  INTERNAL = 5,

  /**
   * Check has errors
   *
   * @generated from enum value: HASERRS = 6;
   */
  HASERRS = 6,

  /**
   * Service has no Routines
   *
   * @generated from enum value: NOEXIST = 7;
   */
  NOEXIST = 7,
}

/**
 * Describes the enum nocloud.health.Status.
 */
export declare const StatusSchema: GenEnum<Status>;

/**
 * @generated from service nocloud.health.HealthService
 */
export declare const HealthService: GenService<{
  /**
   * @generated from rpc nocloud.health.HealthService.Probe
   */
  probe: {
    methodKind: "unary";
    input: typeof ProbeRequestSchema;
    output: typeof ProbeResponseSchema;
  },
}>;

/**
 * @generated from service nocloud.health.InternalProbeService
 */
export declare const InternalProbeService: GenService<{
  /**
   * @generated from rpc nocloud.health.InternalProbeService.Service
   */
  service: {
    methodKind: "unary";
    input: typeof ProbeRequestSchema;
    output: typeof ServingStatusSchema;
  },
  /**
   * @generated from rpc nocloud.health.InternalProbeService.Routine
   */
  routine: {
    methodKind: "unary";
    input: typeof ProbeRequestSchema;
    output: typeof RoutinesStatusSchema;
  },
}>;

