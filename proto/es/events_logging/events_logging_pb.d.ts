//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file events_logging/events_logging.proto (package nocloud.events_logging, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Value } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file events_logging/events_logging.proto.
 */
export declare const file_events_logging_events_logging: GenFile;

/**
 * @generated from message nocloud.events_logging.Snapshot
 */
export declare type Snapshot = Message<"nocloud.events_logging.Snapshot"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string diff = 2;
   */
  diff: string;
};

/**
 * Describes the message nocloud.events_logging.Snapshot.
 * Use `create(SnapshotSchema)` to create a new message.
 */
export declare const SnapshotSchema: GenMessage<Snapshot>;

/**
 * @generated from message nocloud.events_logging.Event
 */
export declare type Event = Message<"nocloud.events_logging.Event"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string entity = 2;
   */
  entity: string;

  /**
   * @generated from field: string uuid = 3;
   */
  uuid: string;

  /**
   * @generated from field: string scope = 4;
   */
  scope: string;

  /**
   * @generated from field: string action = 5;
   */
  action: string;

  /**
   * @generated from field: int32 rc = 6;
   */
  rc: number;

  /**
   * @generated from field: string requestor = 7;
   */
  requestor: string;

  /**
   * @generated from field: int64 ts = 8;
   */
  ts: bigint;

  /**
   * @generated from field: optional nocloud.events_logging.Snapshot snapshot = 9;
   */
  snapshot?: Snapshot;
};

/**
 * Describes the message nocloud.events_logging.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export declare const EventSchema: GenMessage<Event>;

/**
 * @generated from message nocloud.events_logging.Events
 */
export declare type Events = Message<"nocloud.events_logging.Events"> & {
  /**
   * @generated from field: repeated nocloud.events_logging.Event events = 1;
   */
  events: Event[];

  /**
   * @generated from field: int64 count = 2;
   */
  count: bigint;
};

/**
 * Describes the message nocloud.events_logging.Events.
 * Use `create(EventsSchema)` to create a new message.
 */
export declare const EventsSchema: GenMessage<Events>;

/**
 * @generated from message nocloud.events_logging.GetEventsRequest
 */
export declare type GetEventsRequest = Message<"nocloud.events_logging.GetEventsRequest"> & {
  /**
   * @generated from field: optional string requestor = 1;
   */
  requestor?: string;

  /**
   * @generated from field: optional string uuid = 2;
   */
  uuid?: string;

  /**
   * @generated from field: optional int64 page = 3;
   */
  page?: bigint;

  /**
   * @generated from field: optional int64 limit = 4;
   */
  limit?: bigint;

  /**
   * @generated from field: optional string field = 5;
   */
  field?: string;

  /**
   * @generated from field: optional string sort = 6;
   */
  sort?: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 7;
   */
  filters: { [key: string]: Value };
};

/**
 * Describes the message nocloud.events_logging.GetEventsRequest.
 * Use `create(GetEventsRequestSchema)` to create a new message.
 */
export declare const GetEventsRequestSchema: GenMessage<GetEventsRequest>;

/**
 * @generated from message nocloud.events_logging.GetEventsCountRequest
 */
export declare type GetEventsCountRequest = Message<"nocloud.events_logging.GetEventsCountRequest"> & {
  /**
   * @generated from field: optional string requestor = 1;
   */
  requestor?: string;

  /**
   * @generated from field: optional string uuid = 2;
   */
  uuid?: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 7;
   */
  filters: { [key: string]: Value };
};

/**
 * Describes the message nocloud.events_logging.GetEventsCountRequest.
 * Use `create(GetEventsCountRequestSchema)` to create a new message.
 */
export declare const GetEventsCountRequestSchema: GenMessage<GetEventsCountRequest>;

/**
 * @generated from message nocloud.events_logging.GetEventsCountResponse
 */
export declare type GetEventsCountResponse = Message<"nocloud.events_logging.GetEventsCountResponse"> & {
  /**
   * @generated from field: uint64 total = 1;
   */
  total: bigint;

  /**
   * @generated from field: google.protobuf.Value unique = 2;
   */
  unique?: Value;
};

/**
 * Describes the message nocloud.events_logging.GetEventsCountResponse.
 * Use `create(GetEventsCountResponseSchema)` to create a new message.
 */
export declare const GetEventsCountResponseSchema: GenMessage<GetEventsCountResponse>;

/**
 * @generated from service nocloud.events_logging.EventsLoggingService
 */
export declare const EventsLoggingService: GenService<{
  /**
   * @generated from rpc nocloud.events_logging.EventsLoggingService.GetEvents
   */
  getEvents: {
    methodKind: "unary";
    input: typeof GetEventsRequestSchema;
    output: typeof EventsSchema;
  },
  /**
   * @generated from rpc nocloud.events_logging.EventsLoggingService.GetCount
   */
  getCount: {
    methodKind: "unary";
    input: typeof GetEventsCountRequestSchema;
    output: typeof GetEventsCountResponseSchema;
  },
}>;

