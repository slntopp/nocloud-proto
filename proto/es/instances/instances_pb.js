//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file instances/instances.proto (package nocloud.instances, syntax proto3)
/* eslint-disable */

import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_access_access } from "../access/access_pb";
import { file_ansible_ansible } from "../ansible/ansible_pb";
import { file_billing_billing } from "../billing/billing_pb";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import { file_hasher_hasherpb_hasher } from "../hasher/hasherpb/hasher_pb";
import { file_notes_notes } from "../notes/notes_pb";
import { file_services_providers_services_providers } from "../services_providers/services_providers_pb";
import { file_states_states } from "../states/states_pb";
import { file_statuses_statuses } from "../statuses/statuses_pb";
import { file_registry_accounts_accounts } from "../registry/accounts/accounts_pb";

/**
 * Describes the file instances/instances.proto.
 */
export const file_instances_instances = /*@__PURE__*/
  fileDesc("", [file_access_access, file_ansible_ansible, file_billing_billing, file_google_api_annotations, file_google_protobuf_struct, file_hasher_hasherpb_hasher, file_notes_notes, file_services_providers_services_providers, file_states_states, file_statuses_statuses, file_registry_accounts_accounts]);

/**
 * Describes the message nocloud.instances.Instance.
 * Use `create(InstanceSchema)` to create a new message.
 */
export const InstanceSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 0);

/**
 * Describes the message nocloud.instances.InstancesGroup.
 * Use `create(InstancesGroupSchema)` to create a new message.
 */
export const InstancesGroupSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 1);

/**
 * Describes the message nocloud.instances.Context.
 * Use `create(ContextSchema)` to create a new message.
 */
export const ContextSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 2);

/**
 * Describes the message nocloud.instances.TestInstancesGroupConfigRequest.
 * Use `create(TestInstancesGroupConfigRequestSchema)` to create a new message.
 */
export const TestInstancesGroupConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 3);

/**
 * Describes the message nocloud.instances.TestInstancesGroupConfigError.
 * Use `create(TestInstancesGroupConfigErrorSchema)` to create a new message.
 */
export const TestInstancesGroupConfigErrorSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 4);

/**
 * Describes the message nocloud.instances.InstanceCostEstimation.
 * Use `create(InstanceCostEstimationSchema)` to create a new message.
 */
export const InstanceCostEstimationSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 5);

/**
 * Describes the message nocloud.instances.TestInstancesGroupConfigResponse.
 * Use `create(TestInstancesGroupConfigResponseSchema)` to create a new message.
 */
export const TestInstancesGroupConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 6);

/**
 * Describes the message nocloud.instances.InvokeRequest.
 * Use `create(InvokeRequestSchema)` to create a new message.
 */
export const InvokeRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 7);

/**
 * Describes the message nocloud.instances.InvokeResponse.
 * Use `create(InvokeResponseSchema)` to create a new message.
 */
export const InvokeResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 8);

/**
 * Describes the message nocloud.instances.DeleteRequest.
 * Use `create(DeleteRequestSchema)` to create a new message.
 */
export const DeleteRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 9);

/**
 * Describes the message nocloud.instances.DeleteResponse.
 * Use `create(DeleteResponseSchema)` to create a new message.
 */
export const DeleteResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 10);

/**
 * Describes the message nocloud.instances.TransferIGRequest.
 * Use `create(TransferIGRequestSchema)` to create a new message.
 */
export const TransferIGRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 11);

/**
 * Describes the message nocloud.instances.TransferIGResponse.
 * Use `create(TransferIGResponseSchema)` to create a new message.
 */
export const TransferIGResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 12);

/**
 * Describes the message nocloud.instances.TransferInstanceRequest.
 * Use `create(TransferInstanceRequestSchema)` to create a new message.
 */
export const TransferInstanceRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 13);

/**
 * Describes the message nocloud.instances.TransferInstanceResponse.
 * Use `create(TransferInstanceResponseSchema)` to create a new message.
 */
export const TransferInstanceResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 14);

/**
 * Describes the message nocloud.instances.ObjectData.
 * Use `create(ObjectDataSchema)` to create a new message.
 */
export const ObjectDataSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 15);

/**
 * Describes the message nocloud.instances.ListInstancesRequest.
 * Use `create(ListInstancesRequestSchema)` to create a new message.
 */
export const ListInstancesRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 16);

/**
 * Describes the message nocloud.instances.ResponseInstance.
 * Use `create(ResponseInstanceSchema)` to create a new message.
 */
export const ResponseInstanceSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 17);

/**
 * Describes the message nocloud.instances.GetUniqueRequest.
 * Use `create(GetUniqueRequestSchema)` to create a new message.
 */
export const GetUniqueRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 18);

/**
 * Describes the message nocloud.instances.GetUniqueResponse.
 * Use `create(GetUniqueResponseSchema)` to create a new message.
 */
export const GetUniqueResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 19);

/**
 * Describes the message nocloud.instances.ListInstancesResponse.
 * Use `create(ListInstancesResponseSchema)` to create a new message.
 */
export const ListInstancesResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 20);

/**
 * Describes the message nocloud.instances.CreateRequest.
 * Use `create(CreateRequestSchema)` to create a new message.
 */
export const CreateRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 21);

/**
 * Describes the message nocloud.instances.CreateResponse.
 * Use `create(CreateResponseSchema)` to create a new message.
 */
export const CreateResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 22);

/**
 * Describes the message nocloud.instances.UpdateRequest.
 * Use `create(UpdateRequestSchema)` to create a new message.
 */
export const UpdateRequestSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 23);

/**
 * Describes the message nocloud.instances.UpdateResponse.
 * Use `create(UpdateResponseSchema)` to create a new message.
 */
export const UpdateResponseSchema = /*@__PURE__*/
  messageDesc(file_instances_instances, 24);

/**
 * @generated from service nocloud.instances.InstancesService
 */
export const InstancesService = /*@__PURE__*/
  serviceDesc(file_instances_instances, 0);

