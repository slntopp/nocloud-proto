//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file instances/instances.proto (package nocloud.instances, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { NoCloudStatus } from "../statuses/statuses_pb";
import type { Value } from "@bufbuild/protobuf/wkt";
import type { State } from "../states/states_pb";
import type { CostEstimation, Plan } from "../billing/billing_pb";
import type { Access } from "../access/access_pb";
import type { Software } from "../ansible/ansible_pb";
import type { AddNoteRequestSchema, AdminNote, NoteResponseSchema, PatchNoteRequestSchema, RemoveNoteRequestSchema } from "../notes/notes_pb";
import type { ServicesProvider } from "../services_providers/services_providers_pb";

/**
 * Describes the file instances/instances.proto.
 */
export declare const file_instances_instances: GenFile;

/**
 * @generated from message nocloud.instances.Instance
 */
export declare type Instance = Message<"nocloud.instances.Instance"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: nocloud.statuses.NoCloudStatus status = 3;
   */
  status: NoCloudStatus;

  /**
   * @generated from field: map<string, google.protobuf.Value> config = 4;
   */
  config: { [key: string]: Value };

  /**
   * @generated from field: map<string, google.protobuf.Value> resources = 5;
   */
  resources: { [key: string]: Value };

  /**
   * @generated from field: map<string, google.protobuf.Value> data = 6;
   */
  data: { [key: string]: Value };

  /**
   * @generated from field: nocloud.states.State state = 7;
   */
  state?: State;

  /**
   * @generated from field: string hash = 8;
   */
  hash: string;

  /**
   * @generated from field: nocloud.billing.Plan billing_plan = 9;
   */
  billingPlan?: Plan;

  /**
   * @generated from field: optional string product = 10;
   */
  product?: string;

  /**
   * @generated from field: optional nocloud.access.Access access = 11;
   */
  access?: Access;

  /**
   * @generated from field: int64 created = 12;
   */
  created: bigint;

  /**
   * Must match contain all the software from the Billing Plan
   *
   * @generated from field: repeated nocloud.ansible.Software software = 13;
   */
  software: Software[];

  /**
   * @generated from field: repeated nocloud.notes.AdminNote admin_notes = 14;
   */
  adminNotes: AdminNote[];

  /**
   * @generated from field: repeated string addons = 15;
   */
  addons: string[];

  /**
   * @generated from field: int64 deleted = 16;
   */
  deleted: bigint;

  /**
   * @generated from field: optional int64 period = 17;
   */
  period?: bigint;

  /**
   * @generated from field: double estimate = 18;
   */
  estimate: number;
};

/**
 * Describes the message nocloud.instances.Instance.
 * Use `create(InstanceSchema)` to create a new message.
 */
export declare const InstanceSchema: GenMessage<Instance>;

/**
 * @generated from message nocloud.instances.InstancesGroup
 */
export declare type InstancesGroup = Message<"nocloud.instances.InstancesGroup"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * @generated from field: nocloud.statuses.NoCloudStatus status = 4;
   */
  status: NoCloudStatus;

  /**
   * @generated from field: map<string, google.protobuf.Value> config = 5;
   */
  config: { [key: string]: Value };

  /**
   * @generated from field: repeated nocloud.instances.Instance instances = 6;
   */
  instances: Instance[];

  /**
   * @generated from field: map<string, google.protobuf.Value> resources = 7;
   */
  resources: { [key: string]: Value };

  /**
   * @generated from field: map<string, google.protobuf.Value> data = 8;
   */
  data: { [key: string]: Value };

  /**
   * @generated from field: string hash = 9;
   */
  hash: string;

  /**
   * @generated from field: optional string sp = 10;
   */
  sp?: string;

  /**
   * @generated from field: optional nocloud.access.Access access = 11;
   */
  access?: Access;
};

/**
 * Describes the message nocloud.instances.InstancesGroup.
 * Use `create(InstancesGroupSchema)` to create a new message.
 */
export declare const InstancesGroupSchema: GenMessage<InstancesGroup>;

/**
 * @generated from message nocloud.instances.Context
 */
export declare type Context = Message<"nocloud.instances.Context"> & {
  /**
   * @generated from field: string instance = 1;
   */
  instance: string;

  /**
   * @generated from field: string sp = 2;
   */
  sp: string;

  /**
   * @generated from field: string event = 3;
   */
  event: string;
};

/**
 * Describes the message nocloud.instances.Context.
 * Use `create(ContextSchema)` to create a new message.
 */
export declare const ContextSchema: GenMessage<Context>;

/**
 * @generated from message nocloud.instances.TestInstancesGroupConfigRequest
 */
export declare type TestInstancesGroupConfigRequest = Message<"nocloud.instances.TestInstancesGroupConfigRequest"> & {
  /**
   * @generated from field: nocloud.instances.InstancesGroup group = 1;
   */
  group?: InstancesGroup;

  /**
   * @generated from field: nocloud.services_providers.ServicesProvider sp = 2;
   */
  sp?: ServicesProvider;

  /**
   * UUIDs of instances to estimate cost
   *
   * @generated from field: repeated string estimate_instances = 3;
   */
  estimateInstances: string[];
};

/**
 * Describes the message nocloud.instances.TestInstancesGroupConfigRequest.
 * Use `create(TestInstancesGroupConfigRequestSchema)` to create a new message.
 */
export declare const TestInstancesGroupConfigRequestSchema: GenMessage<TestInstancesGroupConfigRequest>;

/**
 * @generated from message nocloud.instances.TestInstancesGroupConfigError
 */
export declare type TestInstancesGroupConfigError = Message<"nocloud.instances.TestInstancesGroupConfigError"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;

  /**
   * @generated from field: string instance = 2;
   */
  instance: string;
};

/**
 * Describes the message nocloud.instances.TestInstancesGroupConfigError.
 * Use `create(TestInstancesGroupConfigErrorSchema)` to create a new message.
 */
export declare const TestInstancesGroupConfigErrorSchema: GenMessage<TestInstancesGroupConfigError>;

/**
 * @generated from message nocloud.instances.InstanceCostEstimation
 */
export declare type InstanceCostEstimation = Message<"nocloud.instances.InstanceCostEstimation"> & {
  /**
   * @generated from field: nocloud.billing.CostEstimation down_payment = 1;
   */
  downPayment?: CostEstimation;

  /**
   * @generated from field: nocloud.billing.CostEstimation general = 2;
   */
  general?: CostEstimation;
};

/**
 * Describes the message nocloud.instances.InstanceCostEstimation.
 * Use `create(InstanceCostEstimationSchema)` to create a new message.
 */
export declare const InstanceCostEstimationSchema: GenMessage<InstanceCostEstimation>;

/**
 * @generated from message nocloud.instances.TestInstancesGroupConfigResponse
 */
export declare type TestInstancesGroupConfigResponse = Message<"nocloud.instances.TestInstancesGroupConfigResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: repeated nocloud.instances.TestInstancesGroupConfigError errors = 2;
   */
  errors: TestInstancesGroupConfigError[];

  /**
   * @generated from field: map<string, nocloud.instances.InstanceCostEstimation> estimations = 3;
   */
  estimations: { [key: string]: InstanceCostEstimation };
};

/**
 * Describes the message nocloud.instances.TestInstancesGroupConfigResponse.
 * Use `create(TestInstancesGroupConfigResponseSchema)` to create a new message.
 */
export declare const TestInstancesGroupConfigResponseSchema: GenMessage<TestInstancesGroupConfigResponse>;

/**
 * @generated from message nocloud.instances.InvokeRequest
 */
export declare type InvokeRequest = Message<"nocloud.instances.InvokeRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string method = 2;
   */
  method: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> params = 3;
   */
  params: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.InvokeRequest.
 * Use `create(InvokeRequestSchema)` to create a new message.
 */
export declare const InvokeRequestSchema: GenMessage<InvokeRequest>;

/**
 * @generated from message nocloud.instances.InvokeResponse
 */
export declare type InvokeResponse = Message<"nocloud.instances.InvokeResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 2;
   */
  meta: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.InvokeResponse.
 * Use `create(InvokeResponseSchema)` to create a new message.
 */
export declare const InvokeResponseSchema: GenMessage<InvokeResponse>;

/**
 * @generated from message nocloud.instances.DeleteRequest
 */
export declare type DeleteRequest = Message<"nocloud.instances.DeleteRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;
};

/**
 * Describes the message nocloud.instances.DeleteRequest.
 * Use `create(DeleteRequestSchema)` to create a new message.
 */
export declare const DeleteRequestSchema: GenMessage<DeleteRequest>;

/**
 * @generated from message nocloud.instances.DeleteResponse
 */
export declare type DeleteResponse = Message<"nocloud.instances.DeleteResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 2;
   */
  meta: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.DeleteResponse.
 * Use `create(DeleteResponseSchema)` to create a new message.
 */
export declare const DeleteResponseSchema: GenMessage<DeleteResponse>;

/**
 * @generated from message nocloud.instances.TransferIGRequest
 */
export declare type TransferIGRequest = Message<"nocloud.instances.TransferIGRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string service = 2;
   */
  service: string;
};

/**
 * Describes the message nocloud.instances.TransferIGRequest.
 * Use `create(TransferIGRequestSchema)` to create a new message.
 */
export declare const TransferIGRequestSchema: GenMessage<TransferIGRequest>;

/**
 * @generated from message nocloud.instances.TransferIGResponse
 */
export declare type TransferIGResponse = Message<"nocloud.instances.TransferIGResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 2;
   */
  meta: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.TransferIGResponse.
 * Use `create(TransferIGResponseSchema)` to create a new message.
 */
export declare const TransferIGResponseSchema: GenMessage<TransferIGResponse>;

/**
 * @generated from message nocloud.instances.TransferInstanceRequest
 */
export declare type TransferInstanceRequest = Message<"nocloud.instances.TransferInstanceRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string ig = 2;
   */
  ig: string;
};

/**
 * Describes the message nocloud.instances.TransferInstanceRequest.
 * Use `create(TransferInstanceRequestSchema)` to create a new message.
 */
export declare const TransferInstanceRequestSchema: GenMessage<TransferInstanceRequest>;

/**
 * @generated from message nocloud.instances.TransferInstanceResponse
 */
export declare type TransferInstanceResponse = Message<"nocloud.instances.TransferInstanceResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 2;
   */
  meta: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.TransferInstanceResponse.
 * Use `create(TransferInstanceResponseSchema)` to create a new message.
 */
export declare const TransferInstanceResponseSchema: GenMessage<TransferInstanceResponse>;

/**
 * @generated from message nocloud.instances.ObjectData
 */
export declare type ObjectData = Message<"nocloud.instances.ObjectData"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> data = 2;
   */
  data: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.ObjectData.
 * Use `create(ObjectDataSchema)` to create a new message.
 */
export declare const ObjectDataSchema: GenMessage<ObjectData>;

/**
 * @generated from message nocloud.instances.ListInstancesRequest
 */
export declare type ListInstancesRequest = Message<"nocloud.instances.ListInstancesRequest"> & {
  /**
   * @generated from field: optional uint64 page = 1;
   */
  page?: bigint;

  /**
   * @generated from field: optional uint64 limit = 2;
   */
  limit?: bigint;

  /**
   * Sort field
   *
   * @generated from field: optional string field = 3;
   */
  field?: string;

  /**
   * Sort direction
   *
   * @generated from field: optional string sort = 4;
   */
  sort?: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 5;
   */
  filters: { [key: string]: Value };

  /**
   * Sort custom order
   *
   * @generated from field: optional google.protobuf.Value custom_order = 6;
   */
  customOrder?: Value;
};

/**
 * Describes the message nocloud.instances.ListInstancesRequest.
 * Use `create(ListInstancesRequestSchema)` to create a new message.
 */
export declare const ListInstancesRequestSchema: GenMessage<ListInstancesRequest>;

/**
 * @generated from message nocloud.instances.ResponseInstance
 */
export declare type ResponseInstance = Message<"nocloud.instances.ResponseInstance"> & {
  /**
   * @generated from field: nocloud.instances.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * @generated from field: string service = 2;
   */
  service: string;

  /**
   * @generated from field: string sp = 3;
   */
  sp: string;

  /**
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * @generated from field: string account = 5;
   */
  account: string;

  /**
   * @generated from field: string namespace = 6;
   */
  namespace: string;
};

/**
 * Describes the message nocloud.instances.ResponseInstance.
 * Use `create(ResponseInstanceSchema)` to create a new message.
 */
export declare const ResponseInstanceSchema: GenMessage<ResponseInstance>;

/**
 * @generated from message nocloud.instances.GetUniqueRequest
 */
export declare type GetUniqueRequest = Message<"nocloud.instances.GetUniqueRequest"> & {
  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 5;
   */
  filters: { [key: string]: Value };
};

/**
 * Describes the message nocloud.instances.GetUniqueRequest.
 * Use `create(GetUniqueRequestSchema)` to create a new message.
 */
export declare const GetUniqueRequestSchema: GenMessage<GetUniqueRequest>;

/**
 * @generated from message nocloud.instances.GetUniqueResponse
 */
export declare type GetUniqueResponse = Message<"nocloud.instances.GetUniqueResponse"> & {
  /**
   * @generated from field: uint64 total = 1;
   */
  total: bigint;

  /**
   * @generated from field: google.protobuf.Value unique = 2;
   */
  unique?: Value;
};

/**
 * Describes the message nocloud.instances.GetUniqueResponse.
 * Use `create(GetUniqueResponseSchema)` to create a new message.
 */
export declare const GetUniqueResponseSchema: GenMessage<GetUniqueResponse>;

/**
 * @generated from message nocloud.instances.ListInstancesResponse
 */
export declare type ListInstancesResponse = Message<"nocloud.instances.ListInstancesResponse"> & {
  /**
   * @generated from field: repeated nocloud.instances.ResponseInstance pool = 1;
   */
  pool: ResponseInstance[];

  /**
   * @generated from field: int64 count = 2;
   */
  count: bigint;
};

/**
 * Describes the message nocloud.instances.ListInstancesResponse.
 * Use `create(ListInstancesResponseSchema)` to create a new message.
 */
export declare const ListInstancesResponseSchema: GenMessage<ListInstancesResponse>;

/**
 * @generated from message nocloud.instances.CreateRequest
 */
export declare type CreateRequest = Message<"nocloud.instances.CreateRequest"> & {
  /**
   * @generated from field: string ig = 1;
   */
  ig: string;

  /**
   * @generated from field: nocloud.instances.Instance instance = 2;
   */
  instance?: Instance;
};

/**
 * Describes the message nocloud.instances.CreateRequest.
 * Use `create(CreateRequestSchema)` to create a new message.
 */
export declare const CreateRequestSchema: GenMessage<CreateRequest>;

/**
 * @generated from message nocloud.instances.CreateResponse
 */
export declare type CreateResponse = Message<"nocloud.instances.CreateResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;

  /**
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message nocloud.instances.CreateResponse.
 * Use `create(CreateResponseSchema)` to create a new message.
 */
export declare const CreateResponseSchema: GenMessage<CreateResponse>;

/**
 * @generated from message nocloud.instances.UpdateRequest
 */
export declare type UpdateRequest = Message<"nocloud.instances.UpdateRequest"> & {
  /**
   * @generated from field: nocloud.instances.Instance instance = 1;
   */
  instance?: Instance;
};

/**
 * Describes the message nocloud.instances.UpdateRequest.
 * Use `create(UpdateRequestSchema)` to create a new message.
 */
export declare const UpdateRequestSchema: GenMessage<UpdateRequest>;

/**
 * @generated from message nocloud.instances.UpdateResponse
 */
export declare type UpdateResponse = Message<"nocloud.instances.UpdateResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;
};

/**
 * Describes the message nocloud.instances.UpdateResponse.
 * Use `create(UpdateResponseSchema)` to create a new message.
 */
export declare const UpdateResponseSchema: GenMessage<UpdateResponse>;

/**
 * @generated from service nocloud.instances.InstancesService
 */
export declare const InstancesService: GenService<{
  /**
   * @generated from rpc nocloud.instances.InstancesService.Invoke
   */
  invoke: {
    methodKind: "unary";
    input: typeof InvokeRequestSchema;
    output: typeof InvokeResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.Delete
   */
  delete: {
    methodKind: "unary";
    input: typeof DeleteRequestSchema;
    output: typeof DeleteResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.AddNote
   */
  addNote: {
    methodKind: "unary";
    input: typeof AddNoteRequestSchema;
    output: typeof NoteResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.PatchNote
   */
  patchNote: {
    methodKind: "unary";
    input: typeof PatchNoteRequestSchema;
    output: typeof NoteResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.RemoveNote
   */
  removeNote: {
    methodKind: "unary";
    input: typeof RemoveNoteRequestSchema;
    output: typeof NoteResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.Detach
   */
  detach: {
    methodKind: "unary";
    input: typeof DeleteRequestSchema;
    output: typeof DeleteResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.Attach
   */
  attach: {
    methodKind: "unary";
    input: typeof DeleteRequestSchema;
    output: typeof DeleteResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.List
   */
  list: {
    methodKind: "unary";
    input: typeof ListInstancesRequestSchema;
    output: typeof ListInstancesResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof InstanceSchema;
    output: typeof ResponseInstanceSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.Create
   */
  create: {
    methodKind: "unary";
    input: typeof CreateRequestSchema;
    output: typeof CreateResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.Update
   */
  update: {
    methodKind: "unary";
    input: typeof UpdateRequestSchema;
    output: typeof UpdateResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.GetUnique
   */
  getUnique: {
    methodKind: "unary";
    input: typeof GetUniqueRequestSchema;
    output: typeof GetUniqueResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.TransferIG
   */
  transferIG: {
    methodKind: "unary";
    input: typeof TransferIGRequestSchema;
    output: typeof TransferIGResponseSchema;
  },
  /**
   * @generated from rpc nocloud.instances.InstancesService.TransferInstance
   */
  transferInstance: {
    methodKind: "unary";
    input: typeof TransferInstanceRequestSchema;
    output: typeof TransferInstanceResponseSchema;
  },
}>;

