//
//Copyright Â© 2021-2023 Nikita Ivanovski info@slnt-opp.xyz
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file billing/billing.proto (package nocloud.billing, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Value } from "@bufbuild/protobuf/wkt";
import type { Software } from "../ansible/ansible_pb";
import type { NoCloudStatus } from "../statuses/statuses_pb";
import type { NoCloudState } from "../states/states_pb";
import type { AddonSchema, BulkAddonsSchema, CountAddonsRequestSchema, CountAddonsResponseSchema, ListAddonsRequestSchema, ListAddonsResponseSchema } from "./addons/addons_pb";
import type { CountDescriptionsRequestSchema, CountDescriptionsResponseSchema, DescriptionSchema, ListDescriptionsRequestSchema, ListDescriptionsResponseSchema } from "./descriptions/descriptions_pb";

/**
 * Describes the file billing/billing.proto.
 */
export declare const file_billing_billing: GenFile;

/**
 * @generated from message nocloud.billing.FeeRange
 */
export declare type FeeRange = Message<"nocloud.billing.FeeRange"> & {
  /**
   * @generated from field: double from = 1;
   */
  from: number;

  /**
   * @generated from field: double to = 2;
   */
  to: number;

  /**
   * @generated from field: double factor = 3;
   */
  factor: number;
};

/**
 * Describes the message nocloud.billing.FeeRange.
 * Use `create(FeeRangeSchema)` to create a new message.
 */
export declare const FeeRangeSchema: GenMessage<FeeRange>;

/**
 * @generated from message nocloud.billing.Fee
 */
export declare type Fee = Message<"nocloud.billing.Fee"> & {
  /**
   * @generated from field: int64 precision = 1;
   */
  precision: bigint;

  /**
   * @generated from field: nocloud.billing.Round round = 2;
   */
  round: Round;

  /**
   * @generated from field: double default = 3;
   */
  default: number;

  /**
   * @generated from field: repeated nocloud.billing.FeeRange ranges = 4;
   */
  ranges: FeeRange[];
};

/**
 * Describes the message nocloud.billing.Fee.
 * Use `create(FeeSchema)` to create a new message.
 */
export declare const FeeSchema: GenMessage<Fee>;

/**
 * @generated from message nocloud.billing.Plan
 */
export declare type Plan = Message<"nocloud.billing.Plan"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Instance / InstanceGroup type supported by this plan
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * if true, then this plan is available for all users
   *
   * @generated from field: bool public = 4;
   */
  public: boolean;

  /**
   * dynamic(based on resources) or static(based on products)
   *
   * @generated from field: nocloud.billing.PlanKind kind = 5;
   */
  kind: PlanKind;

  /**
   * Resources confs to make plan dynamic
   *
   * @generated from field: repeated nocloud.billing.ResourceConf resources = 6;
   */
  resources: ResourceConf[];

  /**
   * Products to make plan pre defined(map key is product key like sm, lg
   *
   * @generated from field: map<string, nocloud.billing.Product> products = 7;
   */
  products: { [key: string]: Product };

  /**
   * or whatever)
   *
   * @generated from field: map<string, google.protobuf.Value> meta = 8;
   */
  meta: { [key: string]: Value };

  /**
   * @generated from field: nocloud.billing.Fee fee = 9;
   */
  fee?: Fee;

  /**
   * @generated from field: repeated nocloud.ansible.Software software = 10;
   */
  software: Software[];

  /**
   * @generated from field: nocloud.statuses.NoCloudStatus status = 11;
   */
  status: NoCloudStatus;

  /**
   * @generated from field: repeated string addons = 12;
   */
  addons: string[];
};

/**
 * Describes the message nocloud.billing.Plan.
 * Use `create(PlanSchema)` to create a new message.
 */
export declare const PlanSchema: GenMessage<Plan>;

/**
 * @generated from message nocloud.billing.ListRequest
 */
export declare type ListRequest = Message<"nocloud.billing.ListRequest"> & {
  /**
   * @generated from field: string sp_uuid = 1;
   */
  spUuid: string;

  /**
   * @generated from field: bool anonymously = 2;
   */
  anonymously: boolean;

  /**
   * @generated from field: bool show_deleted = 3;
   */
  showDeleted: boolean;
};

/**
 * Describes the message nocloud.billing.ListRequest.
 * Use `create(ListRequestSchema)` to create a new message.
 */
export declare const ListRequestSchema: GenMessage<ListRequest>;

/**
 * @generated from message nocloud.billing.ListResponse
 */
export declare type ListResponse = Message<"nocloud.billing.ListResponse"> & {
  /**
   * @generated from field: repeated nocloud.billing.Plan pool = 1;
   */
  pool: Plan[];
};

/**
 * Describes the message nocloud.billing.ListResponse.
 * Use `create(ListResponseSchema)` to create a new message.
 */
export declare const ListResponseSchema: GenMessage<ListResponse>;

/**
 * @generated from message nocloud.billing.ListPlansInstancesRequest
 */
export declare type ListPlansInstancesRequest = Message<"nocloud.billing.ListPlansInstancesRequest"> & {
  /**
   * @generated from field: bool anonymously = 1;
   */
  anonymously: boolean;
};

/**
 * Describes the message nocloud.billing.ListPlansInstancesRequest.
 * Use `create(ListPlansInstancesRequestSchema)` to create a new message.
 */
export declare const ListPlansInstancesRequestSchema: GenMessage<ListPlansInstancesRequest>;

/**
 * @generated from message nocloud.billing.ListPlansInstancesResponse
 */
export declare type ListPlansInstancesResponse = Message<"nocloud.billing.ListPlansInstancesResponse"> & {
  /**
   * @generated from field: map<string, google.protobuf.Value> plans = 1;
   */
  plans: { [key: string]: Value };
};

/**
 * Describes the message nocloud.billing.ListPlansInstancesResponse.
 * Use `create(ListPlansInstancesResponseSchema)` to create a new message.
 */
export declare const ListPlansInstancesResponseSchema: GenMessage<ListPlansInstancesResponse>;

/**
 * @generated from message nocloud.billing.ResourceConf
 */
export declare type ResourceConf = Message<"nocloud.billing.ResourceConf"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: nocloud.billing.Kind kind = 2;
   */
  kind: Kind;

  /**
   * Price in NCU per period
   *
   * @generated from field: double price = 3;
   */
  price: number;

  /**
   * if set to 0, then it's a one-time payment
   *
   * @generated from field: int64 period = 4;
   */
  period: bigint;

  /**
   * If except set to true then transaction will be created if Instance is in
   * one of the states listed in on If except set to false then transaction will
   * be created if Instance is NOT in one of the states listed in on
   *
   * @generated from field: bool except = 5;
   */
  except: boolean;

  /**
   * @generated from field: repeated nocloud.states.NoCloudState on = 6;
   */
  on: NoCloudState[];

  /**
   * @generated from field: nocloud.billing.Fee fee = 7;
   */
  fee?: Fee;

  /**
   * @generated from field: string title = 8;
   */
  title: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 9;
   */
  meta: { [key: string]: Value };

  /**
   * @generated from field: bool public = 10;
   */
  public: boolean;

  /**
   * @generated from field: bool virtual = 11;
   */
  virtual: boolean;

  /**
   * @generated from field: optional int32 min = 12;
   */
  min?: number;

  /**
   * @generated from field: optional int32 max = 13;
   */
  max?: number;

  /**
   * @generated from field: nocloud.billing.PeriodKind period_kind = 14;
   */
  periodKind: PeriodKind;

  /**
   * @generated from field: string description_id = 15;
   */
  descriptionId: string;
};

/**
 * Describes the message nocloud.billing.ResourceConf.
 * Use `create(ResourceConfSchema)` to create a new message.
 */
export declare const ResourceConfSchema: GenMessage<ResourceConf>;

/**
 * @generated from message nocloud.billing.Product
 */
export declare type Product = Message<"nocloud.billing.Product"> & {
  /**
   * @generated from field: nocloud.billing.Kind kind = 1;
   */
  kind: Kind;

  /**
   * Product title
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Product price in NCU per period
   *
   * @generated from field: double price = 3;
   */
  price: number;

  /**
   * @generated from field: int64 period = 4;
   */
  period: bigint;

  /**
   * Map of resources keys to fixed units amount
   *
   * @generated from field: map<string, google.protobuf.Value> resources = 5;
   */
  resources: { [key: string]: Value };

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 6;
   */
  meta: { [key: string]: Value };

  /**
   * Sorting order, might be needed in UIs
   *
   * @generated from field: optional int32 sorter = 7;
   */
  sorter?: number;

  /**
   * @generated from field: optional double installation_fee = 8;
   */
  installationFee?: number;

  /**
   * @generated from field: bool public = 9;
   */
  public: boolean;

  /**
   * @generated from field: string group = 10;
   */
  group: string;

  /**
   * @generated from field: nocloud.billing.PeriodKind period_kind = 11;
   */
  periodKind: PeriodKind;

  /**
   * @generated from field: string description_id = 12;
   */
  descriptionId: string;

  /**
   * @generated from field: repeated string addons = 13;
   */
  addons: string[];
};

/**
 * Describes the message nocloud.billing.Product.
 * Use `create(ProductSchema)` to create a new message.
 */
export declare const ProductSchema: GenMessage<Product>;

/**
 * @generated from message nocloud.billing.Transaction
 */
export declare type Transaction = Message<"nocloud.billing.Transaction"> & {
  /**
   * transaction UUID
   *
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * Timestamp of Transaction planned execution time
   *
   * @generated from field: int64 exec = 2;
   */
  exec: bigint;

  /**
   * Timestamp of Transaction processing time
   *
   * @generated from field: int64 proc = 3;
   */
  proc: bigint;

  /**
   * Wether Transaction has been processed(applied to
   *
   * @generated from field: bool processed = 4;
   */
  processed: boolean;

  /**
   * @generated from field: nocloud.billing.Priority priority = 5;
   */
  priority: Priority;

  /**
   * @generated from field: string account = 6;
   */
  account: string;

  /**
   * @generated from field: string service = 7;
   */
  service: string;

  /**
   * list of records UUIDs
   *
   * @generated from field: repeated string records = 8;
   */
  records: string[];

  /**
   * Transaction total value in NCU
   *
   * @generated from field: double total = 9;
   */
  total: number;

  /**
   * Transaction meta data, like
   * meta: {
   * total: <number> // resource "quantity", e.g. CPU cores, RAM Mb, Drive
   * Mb, IP quantity price_atm: <number> // hourly price per quant of resouce at
   * the moment, e.g. 1 NCU [other keys]: <any> // for example Drive
   * Type(SSD/HDD/NVMe/etc)
   * }
   *
   * @generated from field: map<string, google.protobuf.Value> meta = 10;
   */
  meta: { [key: string]: Value };

  /**
   * @generated from field: nocloud.billing.Currency currency = 11;
   */
  currency?: Currency;

  /**
   * @generated from field: int64 created = 12;
   */
  created: bigint;

  /**
   * @generated from field: optional string base = 13;
   */
  base?: string;

  /**
   * @generated from field: optional string previous = 14;
   */
  previous?: string;
};

/**
 * Describes the message nocloud.billing.Transaction.
 * Use `create(TransactionSchema)` to create a new message.
 */
export declare const TransactionSchema: GenMessage<Transaction>;

/**
 * Position. Instance must be specified to connect action with instance
 *
 * @generated from message nocloud.billing.Item
 */
export declare type Item = Message<"nocloud.billing.Item"> & {
  /**
   * @generated from field: int32 amount = 1;
   */
  amount: number;

  /**
   * @generated from field: string unit = 2;
   */
  unit: string;

  /**
   * @generated from field: double price = 3;
   */
  price: number;

  /**
   * @generated from field: string instance = 4;
   */
  instance: string;

  /**
   * @generated from field: string description = 5;
   */
  description: string;
};

/**
 * Describes the message nocloud.billing.Item.
 * Use `create(ItemSchema)` to create a new message.
 */
export declare const ItemSchema: GenMessage<Item>;

/**
 * @generated from message nocloud.billing.Invoice
 */
export declare type Invoice = Message<"nocloud.billing.Invoice"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * Payment date timestamp
   *
   * @generated from field: int64 payment = 2;
   */
  payment: bigint;

  /**
   * Processed date timestamp(when actions applied)(only for payment flow)
   *
   * @generated from field: int64 processed = 3;
   */
  processed: bigint;

  /**
   * Returned date timestamp(not 0 if invoice has returned status)
   *
   * @generated from field: int64 returned = 4;
   */
  returned: bigint;

  /**
   * @generated from field: int64 deadline = 5;
   */
  deadline: bigint;

  /**
   * @generated from field: nocloud.billing.BillingStatus status = 6;
   */
  status: BillingStatus;

  /**
   * @generated from field: string account = 7;
   */
  account: string;

  /**
   * @generated from field: repeated string transactions = 8;
   */
  transactions: string[];

  /**
   * @generated from field: double total = 9;
   */
  total: number;

  /**
   * @generated from field: map<string, google.protobuf.Value> meta = 10;
   */
  meta: { [key: string]: Value };

  /**
   * @generated from field: nocloud.billing.Currency currency = 11;
   */
  currency?: Currency;

  /**
   * @generated from field: int64 created = 12;
   */
  created: bigint;

  /**
   * @generated from field: repeated nocloud.billing.Item items = 13;
   */
  items: Item[];

  /**
   * @generated from field: nocloud.billing.ActionType type = 14;
   */
  type: ActionType;

  /**
   * @generated from field: string number = 15;
   */
  number: string;
};

/**
 * Describes the message nocloud.billing.Invoice.
 * Use `create(InvoiceSchema)` to create a new message.
 */
export declare const InvoiceSchema: GenMessage<Invoice>;

/**
 * @generated from message nocloud.billing.Invoices
 */
export declare type Invoices = Message<"nocloud.billing.Invoices"> & {
  /**
   * @generated from field: repeated nocloud.billing.Invoice pool = 1;
   */
  pool: Invoice[];
};

/**
 * Describes the message nocloud.billing.Invoices.
 * Use `create(InvoicesSchema)` to create a new message.
 */
export declare const InvoicesSchema: GenMessage<Invoices>;

/**
 * @generated from message nocloud.billing.Transactions
 */
export declare type Transactions = Message<"nocloud.billing.Transactions"> & {
  /**
   * @generated from field: repeated nocloud.billing.Transaction pool = 1;
   */
  pool: Transaction[];
};

/**
 * Describes the message nocloud.billing.Transactions.
 * Use `create(TransactionsSchema)` to create a new message.
 */
export declare const TransactionsSchema: GenMessage<Transactions>;

/**
 * @generated from message nocloud.billing.Record
 */
export declare type Record = Message<"nocloud.billing.Record"> & {
  /**
   * Record UUID
   *
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * Timestamp of Record coverage frame start
   *
   * @generated from field: int64 start = 2;
   */
  start: bigint;

  /**
   * Timestamp of Record coverage frame end
   *
   * @generated from field: int64 end = 3;
   */
  end: bigint;

  /**
   * Time when Record must be processed
   *
   * @generated from field: int64 exec = 4;
   */
  exec: bigint;

  /**
   * Wether Record has been processed(converted to Transaction)
   *
   * @generated from field: bool processed = 5;
   */
  processed: boolean;

  /**
   * @generated from field: nocloud.billing.Priority priority = 6;
   */
  priority: Priority;

  /**
   * Instance UUID
   *
   * @generated from field: string instance = 7;
   */
  instance: string;

  /**
   * Instance state
   *
   * @generated from field: nocloud.states.NoCloudState state = 8;
   */
  state: NoCloudState;

  /**
   * Resource key
   *
   * @generated from field: string resource = 9;
   */
  resource: string;

  /**
   * Product key
   *
   * @generated from field: string product = 10;
   */
  product: string;

  /**
   * Record total value in NCU
   *
   * @generated from field: double total = 11;
   */
  total: number;

  /**
   * Record meta data, like
   * meta: {
   * total: <number> // resource "quantity", e.g. CPU cores, RAM Mb, Drive
   * Mb, IP quantity price_atm: <number> // hourly price per quant of resouce at
   * the moment, e.g. 1 NCU [other keys]: <any> // for example Drive
   * Type(SSD/HDD/NVMe/etc)
   * }
   *
   * @generated from field: map<string, google.protobuf.Value> meta = 12;
   */
  meta: { [key: string]: Value };

  /**
   * @generated from field: nocloud.billing.Currency currency = 13;
   */
  currency?: Currency;

  /**
   * @generated from field: string service = 14;
   */
  service: string;

  /**
   * @generated from field: string account = 15;
   */
  account: string;

  /**
   * @generated from field: optional string base = 16;
   */
  base?: string;

  /**
   * @generated from field: optional string previous = 17;
   */
  previous?: string;

  /**
   * @generated from field: double cost = 18;
   */
  cost: number;

  /**
   * Addon key
   *
   * @generated from field: string addon = 19;
   */
  addon: string;
};

/**
 * Describes the message nocloud.billing.Record.
 * Use `create(RecordSchema)` to create a new message.
 */
export declare const RecordSchema: GenMessage<Record>;

/**
 * @generated from message nocloud.billing.Records
 */
export declare type Records = Message<"nocloud.billing.Records"> & {
  /**
   * @generated from field: repeated nocloud.billing.Record pool = 1;
   */
  pool: Record[];
};

/**
 * Describes the message nocloud.billing.Records.
 * Use `create(RecordsSchema)` to create a new message.
 */
export declare const RecordsSchema: GenMessage<Records>;

/**
 * @generated from message nocloud.billing.GetActiveRequest
 */
export declare type GetActiveRequest = Message<"nocloud.billing.GetActiveRequest"> & {
  /**
   * Instance UUID
   *
   * @generated from field: string uuid = 1;
   */
  uuid: string;
};

/**
 * Describes the message nocloud.billing.GetActiveRequest.
 * Use `create(GetActiveRequestSchema)` to create a new message.
 */
export declare const GetActiveRequestSchema: GenMessage<GetActiveRequest>;

/**
 * @generated from message nocloud.billing.GetTransactionsRequest
 */
export declare type GetTransactionsRequest = Message<"nocloud.billing.GetTransactionsRequest"> & {
  /**
   * @generated from field: optional string account = 1;
   */
  account?: string;

  /**
   * @generated from field: optional string service = 2;
   */
  service?: string;

  /**
   * @generated from field: optional uint64 page = 3;
   */
  page?: bigint;

  /**
   * @generated from field: optional uint64 limit = 4;
   */
  limit?: bigint;

  /**
   * @generated from field: optional string field = 5;
   */
  field?: string;

  /**
   * @generated from field: optional string sort = 6;
   */
  sort?: string;

  /**
   * Get a single Transaction (would embed records too)
   *
   * @generated from field: optional string uuid = 7;
   */
  uuid?: string;

  /**
   * @generated from field: optional string type = 8;
   */
  type?: string;
};

/**
 * Describes the message nocloud.billing.GetTransactionsRequest.
 * Use `create(GetTransactionsRequestSchema)` to create a new message.
 */
export declare const GetTransactionsRequestSchema: GenMessage<GetTransactionsRequest>;

/**
 * @generated from message nocloud.billing.ReprocessTransactionsRequest
 */
export declare type ReprocessTransactionsRequest = Message<"nocloud.billing.ReprocessTransactionsRequest"> & {
  /**
   * @generated from field: string account = 1;
   */
  account: string;
};

/**
 * Describes the message nocloud.billing.ReprocessTransactionsRequest.
 * Use `create(ReprocessTransactionsRequestSchema)` to create a new message.
 */
export declare const ReprocessTransactionsRequestSchema: GenMessage<ReprocessTransactionsRequest>;

/**
 * @generated from message nocloud.billing.GetTransactionsCountRequest
 */
export declare type GetTransactionsCountRequest = Message<"nocloud.billing.GetTransactionsCountRequest"> & {
  /**
   * @generated from field: optional string account = 1;
   */
  account?: string;

  /**
   * @generated from field: optional string service = 2;
   */
  service?: string;

  /**
   * @generated from field: optional string type = 3;
   */
  type?: string;
};

/**
 * Describes the message nocloud.billing.GetTransactionsCountRequest.
 * Use `create(GetTransactionsCountRequestSchema)` to create a new message.
 */
export declare const GetTransactionsCountRequestSchema: GenMessage<GetTransactionsCountRequest>;

/**
 * @generated from message nocloud.billing.GetTransactionsCountResponse
 */
export declare type GetTransactionsCountResponse = Message<"nocloud.billing.GetTransactionsCountResponse"> & {
  /**
   * @generated from field: uint64 total = 1;
   */
  total: bigint;
};

/**
 * Describes the message nocloud.billing.GetTransactionsCountResponse.
 * Use `create(GetTransactionsCountResponseSchema)` to create a new message.
 */
export declare const GetTransactionsCountResponseSchema: GenMessage<GetTransactionsCountResponse>;

/**
 * @generated from message nocloud.billing.UpdateTransactionRequest
 */
export declare type UpdateTransactionRequest = Message<"nocloud.billing.UpdateTransactionRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: int64 exec = 2;
   */
  exec: bigint;
};

/**
 * Describes the message nocloud.billing.UpdateTransactionRequest.
 * Use `create(UpdateTransactionRequestSchema)` to create a new message.
 */
export declare const UpdateTransactionRequestSchema: GenMessage<UpdateTransactionRequest>;

/**
 * @generated from message nocloud.billing.CreateInvoiceRequest
 */
export declare type CreateInvoiceRequest = Message<"nocloud.billing.CreateInvoiceRequest"> & {
  /**
   * @generated from field: nocloud.billing.Invoice invoice = 1;
   */
  invoice?: Invoice;

  /**
   * @generated from field: bool is_send_email = 2;
   */
  isSendEmail: boolean;
};

/**
 * Describes the message nocloud.billing.CreateInvoiceRequest.
 * Use `create(CreateInvoiceRequestSchema)` to create a new message.
 */
export declare const CreateInvoiceRequestSchema: GenMessage<CreateInvoiceRequest>;

/**
 * @generated from message nocloud.billing.UpdateInvoiceRequest
 */
export declare type UpdateInvoiceRequest = Message<"nocloud.billing.UpdateInvoiceRequest"> & {
  /**
   * @generated from field: nocloud.billing.Invoice invoice = 1;
   */
  invoice?: Invoice;

  /**
   * @generated from field: bool is_send_email = 2;
   */
  isSendEmail: boolean;
};

/**
 * Describes the message nocloud.billing.UpdateInvoiceRequest.
 * Use `create(UpdateInvoiceRequestSchema)` to create a new message.
 */
export declare const UpdateInvoiceRequestSchema: GenMessage<UpdateInvoiceRequest>;

/**
 * @generated from message nocloud.billing.UpdateInvoiceStatusRequest
 */
export declare type UpdateInvoiceStatusRequest = Message<"nocloud.billing.UpdateInvoiceStatusRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: nocloud.billing.BillingStatus status = 2;
   */
  status: BillingStatus;

  /**
   * @generated from field: nocloud.billing.UpdateInvoiceStatusRequest.Params params = 3;
   */
  params?: UpdateInvoiceStatusRequest_Params;
};

/**
 * Describes the message nocloud.billing.UpdateInvoiceStatusRequest.
 * Use `create(UpdateInvoiceStatusRequestSchema)` to create a new message.
 */
export declare const UpdateInvoiceStatusRequestSchema: GenMessage<UpdateInvoiceStatusRequest>;

/**
 * @generated from message nocloud.billing.UpdateInvoiceStatusRequest.Params
 */
export declare type UpdateInvoiceStatusRequest_Params = Message<"nocloud.billing.UpdateInvoiceStatusRequest.Params"> & {
  /**
   * @generated from field: int64 payment_date = 1;
   */
  paymentDate: bigint;

  /**
   * @generated from field: bool is_send_email = 2;
   */
  isSendEmail: boolean;
};

/**
 * Describes the message nocloud.billing.UpdateInvoiceStatusRequest.Params.
 * Use `create(UpdateInvoiceStatusRequest_ParamsSchema)` to create a new message.
 */
export declare const UpdateInvoiceStatusRequest_ParamsSchema: GenMessage<UpdateInvoiceStatusRequest_Params>;

/**
 * @generated from message nocloud.billing.GetInvoicesCountRequest
 */
export declare type GetInvoicesCountRequest = Message<"nocloud.billing.GetInvoicesCountRequest"> & {
  /**
   * @generated from field: optional string account = 1;
   */
  account?: string;

  /**
   * @generated from field: optional string service = 2;
   */
  service?: string;

  /**
   * @generated from field: optional nocloud.billing.BillingStatus status = 3;
   */
  status?: BillingStatus;

  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 4;
   */
  filters: { [key: string]: Value };
};

/**
 * Describes the message nocloud.billing.GetInvoicesCountRequest.
 * Use `create(GetInvoicesCountRequestSchema)` to create a new message.
 */
export declare const GetInvoicesCountRequestSchema: GenMessage<GetInvoicesCountRequest>;

/**
 * @generated from message nocloud.billing.GetInvoicesRequest
 */
export declare type GetInvoicesRequest = Message<"nocloud.billing.GetInvoicesRequest"> & {
  /**
   * @generated from field: optional string account = 1;
   */
  account?: string;

  /**
   * @generated from field: optional string service = 2;
   */
  service?: string;

  /**
   * @generated from field: optional uint64 page = 3;
   */
  page?: bigint;

  /**
   * @generated from field: optional uint64 limit = 4;
   */
  limit?: bigint;

  /**
   * @generated from field: optional string field = 5;
   */
  field?: string;

  /**
   * @generated from field: optional string sort = 6;
   */
  sort?: string;

  /**
   * Get a single Transaction (would embed records too)
   *
   * @generated from field: optional string uuid = 7;
   */
  uuid?: string;

  /**
   * @generated from field: optional nocloud.billing.BillingStatus status = 8;
   */
  status?: BillingStatus;

  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 9;
   */
  filters: { [key: string]: Value };
};

/**
 * Describes the message nocloud.billing.GetInvoicesRequest.
 * Use `create(GetInvoicesRequestSchema)` to create a new message.
 */
export declare const GetInvoicesRequestSchema: GenMessage<GetInvoicesRequest>;

/**
 * @generated from message nocloud.billing.GetInvoicesCountResponse
 */
export declare type GetInvoicesCountResponse = Message<"nocloud.billing.GetInvoicesCountResponse"> & {
  /**
   * @generated from field: uint64 total = 1;
   */
  total: bigint;
};

/**
 * Describes the message nocloud.billing.GetInvoicesCountResponse.
 * Use `create(GetInvoicesCountResponseSchema)` to create a new message.
 */
export declare const GetInvoicesCountResponseSchema: GenMessage<GetInvoicesCountResponse>;

/**
 * @generated from message nocloud.billing.UpdateTransactionResponse
 */
export declare type UpdateTransactionResponse = Message<"nocloud.billing.UpdateTransactionResponse"> & {
  /**
   * @generated from field: bool result = 1;
   */
  result: boolean;
};

/**
 * Describes the message nocloud.billing.UpdateTransactionResponse.
 * Use `create(UpdateTransactionResponseSchema)` to create a new message.
 */
export declare const UpdateTransactionResponseSchema: GenMessage<UpdateTransactionResponse>;

/**
 * @generated from message nocloud.billing.CostEstimation
 */
export declare type CostEstimation = Message<"nocloud.billing.CostEstimation"> & {
  /**
   * @generated from field: map<string, double> resources = 1;
   */
  resources: { [key: string]: number };

  /**
   * @generated from field: double product = 2;
   */
  product: number;

  /**
   * @generated from field: double total = 3;
   */
  total: number;
};

/**
 * Describes the message nocloud.billing.CostEstimation.
 * Use `create(CostEstimationSchema)` to create a new message.
 */
export declare const CostEstimationSchema: GenMessage<CostEstimation>;

/**
 * -------------------------------------
 *
 * @generated from message nocloud.billing.GetInstancesReportRequest
 */
export declare type GetInstancesReportRequest = Message<"nocloud.billing.GetInstancesReportRequest"> & {
  /**
   * @generated from field: optional int64 from = 1;
   */
  from?: bigint;

  /**
   * @generated from field: optional int64 to = 2;
   */
  to?: bigint;

  /**
   * @generated from field: optional int64 page = 3;
   */
  page?: bigint;

  /**
   * @generated from field: optional int64 limit = 4;
   */
  limit?: bigint;

  /**
   * @generated from field: optional string field = 5;
   */
  field?: string;

  /**
   * @generated from field: optional string sort = 6;
   */
  sort?: string;
};

/**
 * Describes the message nocloud.billing.GetInstancesReportRequest.
 * Use `create(GetInstancesReportRequestSchema)` to create a new message.
 */
export declare const GetInstancesReportRequestSchema: GenMessage<GetInstancesReportRequest>;

/**
 * @generated from message nocloud.billing.InstanceReport
 */
export declare type InstanceReport = Message<"nocloud.billing.InstanceReport"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: double total = 2;
   */
  total: number;

  /**
   * @generated from field: nocloud.billing.Currency currency = 3;
   */
  currency?: Currency;
};

/**
 * Describes the message nocloud.billing.InstanceReport.
 * Use `create(InstanceReportSchema)` to create a new message.
 */
export declare const InstanceReportSchema: GenMessage<InstanceReport>;

/**
 * @generated from message nocloud.billing.GetInstancesReportResponse
 */
export declare type GetInstancesReportResponse = Message<"nocloud.billing.GetInstancesReportResponse"> & {
  /**
   * @generated from field: repeated nocloud.billing.InstanceReport reports = 1;
   */
  reports: InstanceReport[];
};

/**
 * Describes the message nocloud.billing.GetInstancesReportResponse.
 * Use `create(GetInstancesReportResponseSchema)` to create a new message.
 */
export declare const GetInstancesReportResponseSchema: GenMessage<GetInstancesReportResponse>;

/**
 * -------------------------------------
 *
 * @generated from message nocloud.billing.GetRecordsReportsRequest
 */
export declare type GetRecordsReportsRequest = Message<"nocloud.billing.GetRecordsReportsRequest"> & {
  /**
   * @generated from field: optional int64 page = 1;
   */
  page?: bigint;

  /**
   * @generated from field: optional int64 limit = 2;
   */
  limit?: bigint;

  /**
   * @generated from field: optional string field = 3;
   */
  field?: string;

  /**
   * @generated from field: optional string sort = 4;
   */
  sort?: string;

  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 5;
   */
  filters: { [key: string]: Value };

  /**
   * @generated from field: optional string account = 6;
   */
  account?: string;

  /**
   * @generated from field: optional string service = 7;
   */
  service?: string;
};

/**
 * Describes the message nocloud.billing.GetRecordsReportsRequest.
 * Use `create(GetRecordsReportsRequestSchema)` to create a new message.
 */
export declare const GetRecordsReportsRequestSchema: GenMessage<GetRecordsReportsRequest>;

/**
 * @generated from message nocloud.billing.GetRecordsReportsResponse
 */
export declare type GetRecordsReportsResponse = Message<"nocloud.billing.GetRecordsReportsResponse"> & {
  /**
   * @generated from field: repeated nocloud.billing.Record records = 1;
   */
  records: Record[];

  /**
   * @generated from field: double total = 2;
   */
  total: number;

  /**
   * @generated from field: int64 count = 3;
   */
  count: bigint;
};

/**
 * Describes the message nocloud.billing.GetRecordsReportsResponse.
 * Use `create(GetRecordsReportsResponseSchema)` to create a new message.
 */
export declare const GetRecordsReportsResponseSchema: GenMessage<GetRecordsReportsResponse>;

/**
 * -------------------------------------
 *
 * @generated from message nocloud.billing.GetInstancesReportsCountRequest
 */
export declare type GetInstancesReportsCountRequest = Message<"nocloud.billing.GetInstancesReportsCountRequest"> & {
};

/**
 * Describes the message nocloud.billing.GetInstancesReportsCountRequest.
 * Use `create(GetInstancesReportsCountRequestSchema)` to create a new message.
 */
export declare const GetInstancesReportsCountRequestSchema: GenMessage<GetInstancesReportsCountRequest>;

/**
 * -------------------------------------
 *
 * @generated from message nocloud.billing.GetRecordsReportsCountRequest
 */
export declare type GetRecordsReportsCountRequest = Message<"nocloud.billing.GetRecordsReportsCountRequest"> & {
  /**
   * @generated from field: map<string, google.protobuf.Value> filters = 1;
   */
  filters: { [key: string]: Value };

  /**
   * @generated from field: optional string account = 2;
   */
  account?: string;

  /**
   * @generated from field: optional string service = 3;
   */
  service?: string;
};

/**
 * Describes the message nocloud.billing.GetRecordsReportsCountRequest.
 * Use `create(GetRecordsReportsCountRequestSchema)` to create a new message.
 */
export declare const GetRecordsReportsCountRequestSchema: GenMessage<GetRecordsReportsCountRequest>;

/**
 * @generated from message nocloud.billing.GetReportsCountResponse
 */
export declare type GetReportsCountResponse = Message<"nocloud.billing.GetReportsCountResponse"> & {
  /**
   * @generated from field: int64 total = 1;
   */
  total: bigint;

  /**
   * @generated from field: google.protobuf.Value unique = 2;
   */
  unique?: Value;
};

/**
 * Describes the message nocloud.billing.GetReportsCountResponse.
 * Use `create(GetReportsCountResponseSchema)` to create a new message.
 */
export declare const GetReportsCountResponseSchema: GenMessage<GetReportsCountResponse>;

/**
 * @generated from message nocloud.billing.GetInvoiceSettingsTemplateExampleRequest
 */
export declare type GetInvoiceSettingsTemplateExampleRequest = Message<"nocloud.billing.GetInvoiceSettingsTemplateExampleRequest"> & {
};

/**
 * Describes the message nocloud.billing.GetInvoiceSettingsTemplateExampleRequest.
 * Use `create(GetInvoiceSettingsTemplateExampleRequestSchema)` to create a new message.
 */
export declare const GetInvoiceSettingsTemplateExampleRequestSchema: GenMessage<GetInvoiceSettingsTemplateExampleRequest>;

/**
 * @generated from message nocloud.billing.GetInvoiceSettingsTemplateExampleResponse
 */
export declare type GetInvoiceSettingsTemplateExampleResponse = Message<"nocloud.billing.GetInvoiceSettingsTemplateExampleResponse"> & {
  /**
   * @generated from field: string example = 1;
   */
  example: string;
};

/**
 * Describes the message nocloud.billing.GetInvoiceSettingsTemplateExampleResponse.
 * Use `create(GetInvoiceSettingsTemplateExampleResponseSchema)` to create a new message.
 */
export declare const GetInvoiceSettingsTemplateExampleResponseSchema: GenMessage<GetInvoiceSettingsTemplateExampleResponse>;

/**
 * @generated from message nocloud.billing.Currency
 */
export declare type Currency = Message<"nocloud.billing.Currency"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string title = 2;
   */
  title: string;
};

/**
 * Describes the message nocloud.billing.Currency.
 * Use `create(CurrencySchema)` to create a new message.
 */
export declare const CurrencySchema: GenMessage<Currency>;

/**
 * @generated from message nocloud.billing.CreateCurrencyRequest
 */
export declare type CreateCurrencyRequest = Message<"nocloud.billing.CreateCurrencyRequest"> & {
  /**
   * @generated from field: nocloud.billing.Currency currency = 1;
   */
  currency?: Currency;
};

/**
 * Describes the message nocloud.billing.CreateCurrencyRequest.
 * Use `create(CreateCurrencyRequestSchema)` to create a new message.
 */
export declare const CreateCurrencyRequestSchema: GenMessage<CreateCurrencyRequest>;

/**
 * @generated from message nocloud.billing.CreateCurrencyResponse
 */
export declare type CreateCurrencyResponse = Message<"nocloud.billing.CreateCurrencyResponse"> & {
};

/**
 * Describes the message nocloud.billing.CreateCurrencyResponse.
 * Use `create(CreateCurrencyResponseSchema)` to create a new message.
 */
export declare const CreateCurrencyResponseSchema: GenMessage<CreateCurrencyResponse>;

/**
 * @generated from message nocloud.billing.CreateExchangeRateRequest
 */
export declare type CreateExchangeRateRequest = Message<"nocloud.billing.CreateExchangeRateRequest"> & {
  /**
   * @generated from field: nocloud.billing.Currency from = 1;
   */
  from?: Currency;

  /**
   * @generated from field: nocloud.billing.Currency to = 2;
   */
  to?: Currency;

  /**
   * @generated from field: double rate = 3;
   */
  rate: number;

  /**
   * @generated from field: double commission = 4;
   */
  commission: number;
};

/**
 * Describes the message nocloud.billing.CreateExchangeRateRequest.
 * Use `create(CreateExchangeRateRequestSchema)` to create a new message.
 */
export declare const CreateExchangeRateRequestSchema: GenMessage<CreateExchangeRateRequest>;

/**
 * @generated from message nocloud.billing.CreateExchangeRateResponse
 */
export declare type CreateExchangeRateResponse = Message<"nocloud.billing.CreateExchangeRateResponse"> & {
};

/**
 * Describes the message nocloud.billing.CreateExchangeRateResponse.
 * Use `create(CreateExchangeRateResponseSchema)` to create a new message.
 */
export declare const CreateExchangeRateResponseSchema: GenMessage<CreateExchangeRateResponse>;

/**
 * @generated from message nocloud.billing.UpdateExchangeRateRequest
 */
export declare type UpdateExchangeRateRequest = Message<"nocloud.billing.UpdateExchangeRateRequest"> & {
  /**
   * @generated from field: nocloud.billing.Currency from = 1;
   */
  from?: Currency;

  /**
   * @generated from field: nocloud.billing.Currency to = 2;
   */
  to?: Currency;

  /**
   * @generated from field: double rate = 3;
   */
  rate: number;

  /**
   * @generated from field: double commission = 4;
   */
  commission: number;
};

/**
 * Describes the message nocloud.billing.UpdateExchangeRateRequest.
 * Use `create(UpdateExchangeRateRequestSchema)` to create a new message.
 */
export declare const UpdateExchangeRateRequestSchema: GenMessage<UpdateExchangeRateRequest>;

/**
 * @generated from message nocloud.billing.UpdateExchangeRateResponse
 */
export declare type UpdateExchangeRateResponse = Message<"nocloud.billing.UpdateExchangeRateResponse"> & {
};

/**
 * Describes the message nocloud.billing.UpdateExchangeRateResponse.
 * Use `create(UpdateExchangeRateResponseSchema)` to create a new message.
 */
export declare const UpdateExchangeRateResponseSchema: GenMessage<UpdateExchangeRateResponse>;

/**
 * @generated from message nocloud.billing.DeleteExchangeRateRequest
 */
export declare type DeleteExchangeRateRequest = Message<"nocloud.billing.DeleteExchangeRateRequest"> & {
  /**
   * @generated from field: nocloud.billing.Currency from = 1;
   */
  from?: Currency;

  /**
   * @generated from field: nocloud.billing.Currency to = 2;
   */
  to?: Currency;
};

/**
 * Describes the message nocloud.billing.DeleteExchangeRateRequest.
 * Use `create(DeleteExchangeRateRequestSchema)` to create a new message.
 */
export declare const DeleteExchangeRateRequestSchema: GenMessage<DeleteExchangeRateRequest>;

/**
 * @generated from message nocloud.billing.DeleteExchangeRateResponse
 */
export declare type DeleteExchangeRateResponse = Message<"nocloud.billing.DeleteExchangeRateResponse"> & {
};

/**
 * Describes the message nocloud.billing.DeleteExchangeRateResponse.
 * Use `create(DeleteExchangeRateResponseSchema)` to create a new message.
 */
export declare const DeleteExchangeRateResponseSchema: GenMessage<DeleteExchangeRateResponse>;

/**
 * @generated from message nocloud.billing.GetCurrenciesRequest
 */
export declare type GetCurrenciesRequest = Message<"nocloud.billing.GetCurrenciesRequest"> & {
};

/**
 * Describes the message nocloud.billing.GetCurrenciesRequest.
 * Use `create(GetCurrenciesRequestSchema)` to create a new message.
 */
export declare const GetCurrenciesRequestSchema: GenMessage<GetCurrenciesRequest>;

/**
 * @generated from message nocloud.billing.GetCurrenciesResponse
 */
export declare type GetCurrenciesResponse = Message<"nocloud.billing.GetCurrenciesResponse"> & {
  /**
   * @generated from field: repeated nocloud.billing.Currency currencies = 1;
   */
  currencies: Currency[];
};

/**
 * Describes the message nocloud.billing.GetCurrenciesResponse.
 * Use `create(GetCurrenciesResponseSchema)` to create a new message.
 */
export declare const GetCurrenciesResponseSchema: GenMessage<GetCurrenciesResponse>;

/**
 * @generated from message nocloud.billing.GetExchangeRateRequest
 */
export declare type GetExchangeRateRequest = Message<"nocloud.billing.GetExchangeRateRequest"> & {
  /**
   * @generated from field: nocloud.billing.Currency from = 1;
   */
  from?: Currency;

  /**
   * @generated from field: nocloud.billing.Currency to = 2;
   */
  to?: Currency;
};

/**
 * Describes the message nocloud.billing.GetExchangeRateRequest.
 * Use `create(GetExchangeRateRequestSchema)` to create a new message.
 */
export declare const GetExchangeRateRequestSchema: GenMessage<GetExchangeRateRequest>;

/**
 * @generated from message nocloud.billing.GetExchangeRatesRequest
 */
export declare type GetExchangeRatesRequest = Message<"nocloud.billing.GetExchangeRatesRequest"> & {
};

/**
 * Describes the message nocloud.billing.GetExchangeRatesRequest.
 * Use `create(GetExchangeRatesRequestSchema)` to create a new message.
 */
export declare const GetExchangeRatesRequestSchema: GenMessage<GetExchangeRatesRequest>;

/**
 * @generated from message nocloud.billing.GetExchangeRateResponse
 */
export declare type GetExchangeRateResponse = Message<"nocloud.billing.GetExchangeRateResponse"> & {
  /**
   * @generated from field: nocloud.billing.Currency from = 1;
   */
  from?: Currency;

  /**
   * @generated from field: nocloud.billing.Currency to = 2;
   */
  to?: Currency;

  /**
   * @generated from field: double rate = 3;
   */
  rate: number;

  /**
   * @generated from field: double commission = 4;
   */
  commission: number;
};

/**
 * Describes the message nocloud.billing.GetExchangeRateResponse.
 * Use `create(GetExchangeRateResponseSchema)` to create a new message.
 */
export declare const GetExchangeRateResponseSchema: GenMessage<GetExchangeRateResponse>;

/**
 * @generated from message nocloud.billing.GetExchangeRatesResponse
 */
export declare type GetExchangeRatesResponse = Message<"nocloud.billing.GetExchangeRatesResponse"> & {
  /**
   * @generated from field: repeated nocloud.billing.GetExchangeRateResponse rates = 1;
   */
  rates: GetExchangeRateResponse[];
};

/**
 * Describes the message nocloud.billing.GetExchangeRatesResponse.
 * Use `create(GetExchangeRatesResponseSchema)` to create a new message.
 */
export declare const GetExchangeRatesResponseSchema: GenMessage<GetExchangeRatesResponse>;

/**
 * @generated from message nocloud.billing.ConversionRequest
 */
export declare type ConversionRequest = Message<"nocloud.billing.ConversionRequest"> & {
  /**
   * @generated from field: nocloud.billing.Currency from = 1;
   */
  from?: Currency;

  /**
   * @generated from field: nocloud.billing.Currency to = 2;
   */
  to?: Currency;

  /**
   * @generated from field: double amount = 3;
   */
  amount: number;
};

/**
 * Describes the message nocloud.billing.ConversionRequest.
 * Use `create(ConversionRequestSchema)` to create a new message.
 */
export declare const ConversionRequestSchema: GenMessage<ConversionRequest>;

/**
 * @generated from message nocloud.billing.ConversionResponse
 */
export declare type ConversionResponse = Message<"nocloud.billing.ConversionResponse"> & {
  /**
   * @generated from field: double amount = 1;
   */
  amount: number;
};

/**
 * Describes the message nocloud.billing.ConversionResponse.
 * Use `create(ConversionResponseSchema)` to create a new message.
 */
export declare const ConversionResponseSchema: GenMessage<ConversionResponse>;

/**
 * @generated from enum nocloud.billing.PlanKind
 */
export enum PlanKind {
  /**
   * Default value; should never be used but will be treated as DYNAMIC
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DYNAMIC = 1;
   */
  DYNAMIC = 1,

  /**
   * @generated from enum value: STATIC = 2;
   */
  STATIC = 2,
}

/**
 * Describes the enum nocloud.billing.PlanKind.
 */
export declare const PlanKindSchema: GenEnum<PlanKind>;

/**
 * @generated from enum nocloud.billing.Round
 */
export enum Round {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: FLOOR = 1;
   */
  FLOOR = 1,

  /**
   * @generated from enum value: ROUND = 2;
   */
  ROUND = 2,

  /**
   * @generated from enum value: CEIL = 3;
   */
  CEIL = 3,
}

/**
 * Describes the enum nocloud.billing.Round.
 */
export declare const RoundSchema: GenEnum<Round>;

/**
 * @generated from enum nocloud.billing.Kind
 */
export enum Kind {
  /**
   * Shall never be used, requests will be rejected
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Transaction must be processed based on End time
   *
   * @generated from enum value: POSTPAID = 1;
   */
  POSTPAID = 1,

  /**
   * Transaction must be processed based on Start time
   *
   * @generated from enum value: PREPAID = 2;
   */
  PREPAID = 2,
}

/**
 * Describes the enum nocloud.billing.Kind.
 */
export declare const KindSchema: GenEnum<Kind>;

/**
 * @generated from enum nocloud.billing.PeriodKind
 */
export enum PeriodKind {
  /**
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * @generated from enum value: CALENDAR_MONTH = 1;
   */
  CALENDAR_MONTH = 1,

  /**
   * @generated from enum value: CALENDAR_YEAR = 2;
   */
  CALENDAR_YEAR = 2,
}

/**
 * Describes the enum nocloud.billing.PeriodKind.
 */
export declare const PeriodKindSchema: GenEnum<PeriodKind>;

/**
 * @generated from enum nocloud.billing.Priority
 */
export enum Priority {
  /**
   * @generated from enum value: NORMAL = 0;
   */
  NORMAL = 0,

  /**
   * @generated from enum value: URGENT = 1;
   */
  URGENT = 1,

  /**
   * @generated from enum value: ADDITIONAL = 2;
   */
  ADDITIONAL = 2,
}

/**
 * Describes the enum nocloud.billing.Priority.
 */
export declare const PrioritySchema: GenEnum<Priority>;

/**
 * @generated from enum nocloud.billing.BillingStatus
 */
export enum BillingStatus {
  /**
   * Dont use.
   *
   * @generated from enum value: BILLING_STATUS_UNKNOWN = 0;
   */
  BILLING_STATUS_UNKNOWN = 0,

  /**
   * @generated from enum value: PAID = 1;
   */
  PAID = 1,

  /**
   * @generated from enum value: UNPAID = 2;
   */
  UNPAID = 2,

  /**
   * @generated from enum value: CANCELED = 3;
   */
  CANCELED = 3,

  /**
   * @generated from enum value: TERMINATED = 4;
   */
  TERMINATED = 4,

  /**
   * @generated from enum value: DRAFT = 5;
   */
  DRAFT = 5,

  /**
   * @generated from enum value: RETURNED = 6;
   */
  RETURNED = 6,
}

/**
 * Describes the enum nocloud.billing.BillingStatus.
 */
export declare const BillingStatusSchema: GenEnum<BillingStatus>;

/**
 * @generated from enum nocloud.billing.ActionType
 */
export enum ActionType {
  /**
   * Dont use.
   *
   * @generated from enum value: ACTION_TYPE_UNKNOWN = 0;
   */
  ACTION_TYPE_UNKNOWN = 0,

  /**
   * @generated from enum value: NO_ACTION = 1;
   */
  NO_ACTION = 1,

  /**
   * @generated from enum value: INSTANCE_START = 2;
   */
  INSTANCE_START = 2,

  /**
   * @generated from enum value: INSTANCE_RENEWAL = 3;
   */
  INSTANCE_RENEWAL = 3,

  /**
   * @generated from enum value: BALANCE = 4;
   */
  BALANCE = 4,
}

/**
 * Describes the enum nocloud.billing.ActionType.
 */
export declare const ActionTypeSchema: GenEnum<ActionType>;

/**
 * @generated from service nocloud.billing.RecordsService
 */
export declare const RecordsService: GenService<{
  /**
   * @generated from rpc nocloud.billing.RecordsService.GetActive
   */
  getActive: {
    methodKind: "unary";
    input: typeof GetActiveRequestSchema;
    output: typeof RecordsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.RecordsService.Create
   */
  create: {
    methodKind: "unary";
    input: typeof RecordsSchema;
    output: typeof RecordsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.RecordsService.Update
   */
  update: {
    methodKind: "unary";
    input: typeof RecordsSchema;
    output: typeof RecordsSchema;
  },
}>;

/**
 * @generated from service nocloud.billing.BillingService
 */
export declare const BillingService: GenService<{
  /**
   * @generated from rpc nocloud.billing.BillingService.CreatePlan
   */
  createPlan: {
    methodKind: "unary";
    input: typeof PlanSchema;
    output: typeof PlanSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.UpdatePlan
   */
  updatePlan: {
    methodKind: "unary";
    input: typeof PlanSchema;
    output: typeof PlanSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetPlan
   */
  getPlan: {
    methodKind: "unary";
    input: typeof PlanSchema;
    output: typeof PlanSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.ListPlans
   */
  listPlans: {
    methodKind: "unary";
    input: typeof ListRequestSchema;
    output: typeof ListResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.ListPlansInstances
   */
  listPlansInstances: {
    methodKind: "unary";
    input: typeof ListPlansInstancesRequestSchema;
    output: typeof ListPlansInstancesResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.DeletePlan
   */
  deletePlan: {
    methodKind: "unary";
    input: typeof PlanSchema;
    output: typeof PlanSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.CreateTransaction
   */
  createTransaction: {
    methodKind: "unary";
    input: typeof TransactionSchema;
    output: typeof TransactionSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetTransactions
   */
  getTransactions: {
    methodKind: "unary";
    input: typeof GetTransactionsRequestSchema;
    output: typeof TransactionsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetTransactionsCount
   */
  getTransactionsCount: {
    methodKind: "unary";
    input: typeof GetTransactionsCountRequestSchema;
    output: typeof GetTransactionsCountResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.UpdateTransaction
   */
  updateTransaction: {
    methodKind: "unary";
    input: typeof TransactionSchema;
    output: typeof UpdateTransactionResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetRecords
   */
  getRecords: {
    methodKind: "unary";
    input: typeof TransactionSchema;
    output: typeof RecordsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetInstancesReports
   */
  getInstancesReports: {
    methodKind: "unary";
    input: typeof GetInstancesReportRequestSchema;
    output: typeof GetInstancesReportResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetInstancesReportsCount
   */
  getInstancesReportsCount: {
    methodKind: "unary";
    input: typeof GetInstancesReportsCountRequestSchema;
    output: typeof GetReportsCountResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetRecordsReports
   */
  getRecordsReports: {
    methodKind: "unary";
    input: typeof GetRecordsReportsRequestSchema;
    output: typeof GetRecordsReportsResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetRecordsReportsCount
   */
  getRecordsReportsCount: {
    methodKind: "unary";
    input: typeof GetRecordsReportsCountRequestSchema;
    output: typeof GetReportsCountResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.Reprocess
   */
  reprocess: {
    methodKind: "unary";
    input: typeof ReprocessTransactionsRequestSchema;
    output: typeof TransactionsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.CreateInvoice
   */
  createInvoice: {
    methodKind: "unary";
    input: typeof CreateInvoiceRequestSchema;
    output: typeof InvoiceSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetInvoice
   */
  getInvoice: {
    methodKind: "unary";
    input: typeof InvoiceSchema;
    output: typeof InvoiceSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetInvoices
   */
  getInvoices: {
    methodKind: "unary";
    input: typeof GetInvoicesRequestSchema;
    output: typeof InvoicesSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetInvoicesCount
   */
  getInvoicesCount: {
    methodKind: "unary";
    input: typeof GetInvoicesCountRequestSchema;
    output: typeof GetInvoicesCountResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.UpdateInvoice
   */
  updateInvoice: {
    methodKind: "unary";
    input: typeof UpdateInvoiceRequestSchema;
    output: typeof InvoiceSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.UpdateInvoiceStatus
   */
  updateInvoiceStatus: {
    methodKind: "unary";
    input: typeof UpdateInvoiceStatusRequestSchema;
    output: typeof InvoiceSchema;
  },
  /**
   * @generated from rpc nocloud.billing.BillingService.GetInvoiceSettingsTemplateExample
   */
  getInvoiceSettingsTemplateExample: {
    methodKind: "unary";
    input: typeof GetInvoiceSettingsTemplateExampleRequestSchema;
    output: typeof GetInvoiceSettingsTemplateExampleResponseSchema;
  },
}>;

/**
 * @generated from service nocloud.billing.CurrencyService
 */
export declare const CurrencyService: GenService<{
  /**
   * @generated from rpc nocloud.billing.CurrencyService.CreateCurrency
   */
  createCurrency: {
    methodKind: "unary";
    input: typeof CreateCurrencyRequestSchema;
    output: typeof CreateCurrencyResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.GetCurrencies
   */
  getCurrencies: {
    methodKind: "unary";
    input: typeof GetCurrenciesRequestSchema;
    output: typeof GetCurrenciesResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.GetExchangeRate
   */
  getExchangeRate: {
    methodKind: "unary";
    input: typeof GetExchangeRateRequestSchema;
    output: typeof GetExchangeRateResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.GetExchangeRates
   */
  getExchangeRates: {
    methodKind: "unary";
    input: typeof GetExchangeRatesRequestSchema;
    output: typeof GetExchangeRatesResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.CreateExchangeRate
   */
  createExchangeRate: {
    methodKind: "unary";
    input: typeof CreateExchangeRateRequestSchema;
    output: typeof CreateExchangeRateResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.UpdateExchangeRate
   */
  updateExchangeRate: {
    methodKind: "unary";
    input: typeof UpdateExchangeRateRequestSchema;
    output: typeof UpdateExchangeRateResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.DeleteExchangeRate
   */
  deleteExchangeRate: {
    methodKind: "unary";
    input: typeof DeleteExchangeRateRequestSchema;
    output: typeof DeleteExchangeRateResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.CurrencyService.Convert
   */
  convert: {
    methodKind: "unary";
    input: typeof ConversionRequestSchema;
    output: typeof ConversionResponseSchema;
  },
}>;

/**
 * @generated from service nocloud.billing.AddonsService
 */
export declare const AddonsService: GenService<{
  /**
   * @generated from rpc nocloud.billing.AddonsService.Create
   */
  create: {
    methodKind: "unary";
    input: typeof AddonSchema;
    output: typeof AddonSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.CreateBulk
   */
  createBulk: {
    methodKind: "unary";
    input: typeof BulkAddonsSchema;
    output: typeof BulkAddonsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.Update
   */
  update: {
    methodKind: "unary";
    input: typeof AddonSchema;
    output: typeof AddonSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.UpdateBulk
   */
  updateBulk: {
    methodKind: "unary";
    input: typeof BulkAddonsSchema;
    output: typeof BulkAddonsSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof AddonSchema;
    output: typeof AddonSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.List
   */
  list: {
    methodKind: "unary";
    input: typeof ListAddonsRequestSchema;
    output: typeof ListAddonsResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.Count
   */
  count: {
    methodKind: "unary";
    input: typeof CountAddonsRequestSchema;
    output: typeof CountAddonsResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.AddonsService.Delete
   */
  delete: {
    methodKind: "unary";
    input: typeof AddonSchema;
    output: typeof AddonSchema;
  },
}>;

/**
 * @generated from service nocloud.billing.DescriptionsService
 */
export declare const DescriptionsService: GenService<{
  /**
   * @generated from rpc nocloud.billing.DescriptionsService.Create
   */
  create: {
    methodKind: "unary";
    input: typeof DescriptionSchema;
    output: typeof DescriptionSchema;
  },
  /**
   * @generated from rpc nocloud.billing.DescriptionsService.Update
   */
  update: {
    methodKind: "unary";
    input: typeof DescriptionSchema;
    output: typeof DescriptionSchema;
  },
  /**
   * @generated from rpc nocloud.billing.DescriptionsService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof DescriptionSchema;
    output: typeof DescriptionSchema;
  },
  /**
   * @generated from rpc nocloud.billing.DescriptionsService.List
   */
  list: {
    methodKind: "unary";
    input: typeof ListDescriptionsRequestSchema;
    output: typeof ListDescriptionsResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.DescriptionsService.Count
   */
  count: {
    methodKind: "unary";
    input: typeof CountDescriptionsRequestSchema;
    output: typeof CountDescriptionsResponseSchema;
  },
  /**
   * @generated from rpc nocloud.billing.DescriptionsService.Delete
   */
  delete: {
    methodKind: "unary";
    input: typeof DescriptionSchema;
    output: typeof DescriptionSchema;
  },
}>;

