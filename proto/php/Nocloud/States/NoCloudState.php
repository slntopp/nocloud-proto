<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: states/states.proto

namespace Nocloud\States;

use UnexpectedValueException;

/**
 * Protobuf type <code>nocloud.states.NoCloudState</code>
 */
class NoCloudState
{
    /**
     * Generated from protobuf enum <code>INIT = 0;</code>
     */
    const INIT = 0;
    /**
     * Generated from protobuf enum <code>UNKNOWN = 1;</code>
     */
    const UNKNOWN = 1;
    /**
     * Generated from protobuf enum <code>STOPPED = 2;</code>
     */
    const STOPPED = 2;
    /**
     * Generated from protobuf enum <code>RUNNING = 3;</code>
     */
    const RUNNING = 3;
    /**
     * Generated from protobuf enum <code>FAILURE = 4;</code>
     */
    const FAILURE = 4;
    /**
     * Generated from protobuf enum <code>DELETED = 5;</code>
     */
    const DELETED = 5;
    /**
     * Generated from protobuf enum <code>SUSPENDED = 6;</code>
     */
    const SUSPENDED = 6;
    /**
     * Generated from protobuf enum <code>OPERATION = 7;</code>
     */
    const OPERATION = 7;
    /**
     * Generated from protobuf enum <code>PENDING = 8;</code>
     */
    const PENDING = 8;

    private static $valueToName = [
        self::INIT => 'INIT',
        self::UNKNOWN => 'UNKNOWN',
        self::STOPPED => 'STOPPED',
        self::RUNNING => 'RUNNING',
        self::FAILURE => 'FAILURE',
        self::DELETED => 'DELETED',
        self::SUSPENDED => 'SUSPENDED',
        self::OPERATION => 'OPERATION',
        self::PENDING => 'PENDING',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

