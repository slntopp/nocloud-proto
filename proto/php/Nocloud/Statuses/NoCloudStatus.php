<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: statuses/statuses.proto

namespace Nocloud\Statuses;

use UnexpectedValueException;

/**
 * Protobuf type <code>nocloud.statuses.NoCloudStatus</code>
 */
class NoCloudStatus
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>INIT = 1;</code>
     */
    const INIT = 1;
    /**
     * Generated from protobuf enum <code>MODIFIED = 2;</code>
     */
    const MODIFIED = 2;
    /**
     * Generated from protobuf enum <code>UP = 3;</code>
     */
    const UP = 3;
    /**
     * Generated from protobuf enum <code>DOWN = 4;</code>
     */
    const DOWN = 4;
    /**
     * Generated from protobuf enum <code>DEL = 5;</code>
     */
    const DEL = 5;
    /**
     * Generated from protobuf enum <code>PROC = 6;</code>
     */
    const PROC = 6;
    /**
     * Generated from protobuf enum <code>SUS = 7;</code>
     */
    const SUS = 7;
    /**
     * Generated from protobuf enum <code>DETACHED = 8;</code>
     */
    const DETACHED = 8;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::INIT => 'INIT',
        self::MODIFIED => 'MODIFIED',
        self::UP => 'UP',
        self::DOWN => 'DOWN',
        self::DEL => 'DEL',
        self::PROC => 'PROC',
        self::SUS => 'SUS',
        self::DETACHED => 'DETACHED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

